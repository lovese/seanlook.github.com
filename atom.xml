<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean&#39;s Notes</title>
  <subtitle>Stay hungry, stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seanlook.com/"/>
  <updated>2016-11-21T00:55:08.073Z</updated>
  <id>http://seanlook.com/</id>
  
  <author>
    <name>seanlook</name>
    <email>seanlook7@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://seanlook.com/2016/11/21/py-mysql-table-checksum-non-replicas/"/>
    <id>http://seanlook.com/2016/11/21/py-mysql-table-checksum-non-replicas/</id>
    <published>2016-11-21T00:52:15.950Z</published>
    <updated>2016-11-21T00:55:08.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2><p>title: MySQL非主从环境下数据一致性校验及修复程序<br>date: 2016-11-20 16:32:49<br>tags: [mysql, python, pt-table-checksum]<br>categories:</p>
<ul>
<li>Python<br>updated: 2016-11-20 16:32:49</li>
</ul>
<hr>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>项目地址：<a href="https://github.com/seanlook/px-table-checksum" target="_blank" rel="external">https://github.com/seanlook/px-table-checksum</a></p>
<p>主从环境下数据一致性校验经常会用 pt-table-checksum 工具，它的原理及实施过程之前写过一篇文章：<a href="http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/">生产环境使用 pt-table-checksum 检查MySQL数据一致性</a>。但是DBA工作中还会有些针对两个表检查是否一致，而这两个表之间并没有主从关系，pt工具是基于binlog把在主库进行的检查动作，在从库重放一遍，此时就不适用了。</p>
<p>总会有这样特殊的需求，比如从阿里云RDS实例迁移到自建mysql实例，它的数据传输服务实现方式是基于表的批量数据提取，加上binlog订阅，但强制row模式会导致pt-table-checksum没有权限把会话临时改成statement。另一种需求是，整库进行字符集转换：库表定义都是utf8，但应用连接使用了默认的 latin1，要将连接字符集和表字符集统一起来，只能以latin1导出数据，再以utf8导入，这种情况数据一致性校验，且不说binlog解析程序不支持statement（如canal），新旧库本身内容不同，pt-table-checksum 算出的校验值也会不一样，失效。</p>
<p>所以才萌生了参考 pt-table-checksum 自己写了一个：px-table-checksum 。</p>
<h2 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h2><p>整体思路是借鉴pt-table-checksum，从源库批量（即chunk）取出一块数据如1000行，计算CRC32值，同样的语句在目标库运行一遍，结果都存入另一个库，最后检查对应编号的chunk crc值是否一致。知道不一致还不行，得能否快速方便的修复差异，所以继续根据那些不一致的chunk，去目标库和源库找到不一致的行，是缺失，还是多余，还是被修改了，然后生成修复sql，根据指示是否自动修复。</p>
<p>那么问题就在于：</p>
<ol>
<li><p>如何确定批次，也就是下一个chunk该怎么取？<br>我还没想做到pt-table-checksum那样，可以根据负载动态调整chunk大小，甚至活跃线程数超过阀值就暂停检查，上来工作量就太大了。目前每次计算的chunk的行数是固定的，可以配置1000或2000等。<br>所以就要用到分页查询，根据（自增或联合）主键、唯一索引，每次limit 1000后升序取最后一条，作为下一批的起始。所以要分析表上的键情况，组合查询条件。目前仅能检查有主键或唯一所以的表。</p>
</li>
<li><p>如何保证源库和目标库，运行的sql一样？<br>之前一版是目标库和源库，以多线程各自计算chunk，入库，后来才意识到严重的bug：比如同样是取1000行，如果目标库少数据，那么下一个chunk起始就不一样，比较的结果简直一塌糊涂。<br>所以必须保证相同编号的chunk，起点必须相同，所以想到用队列，存放在源库跑过的所有校验sql，模拟pt工具在目标库重放。考虑到要多线程同时比较多个表，队列可能吃内存过大，于是使用了redis队列。</p>
</li>
<li><p>直接在数据库中计算crc32，还是取出数据在内存里计算？<br>翻了pt-table-checksum的源码，它是在数据库里计算的。但是第一节里说过，如果目标库和源库要使用不同的字符集才能读出正确的数据，只能查询出来之后再比较。所以 px-table-checksum 两种都支持，只需指定一个配置项。</p>
</li>
<li><p>同时检查多个表，源库sql挤在队列，目标库拿出来执行时过了1s，此时源库那条数据又被修改了一次同步到了目标库，会导致计算结果不一致，实则一致，怎么处理<br>无法处理，是px-table-checksum相比pt-table-checksum最大的缺陷。<br>但为了尽可能减少此类问题（比如主从延迟也可能会），特意设计了多个redis队列，目标库多个检查线程，即比如同时指定检查8个表，源库检查会有8个线程对应，但可以根据表的写入情况，配置4个redis队列（目前是随机入列），10个目标库检查线程，来减少不准确因素。<br>但站在我的角度往往来说，不一致的数据会被记录下来，如果不多，人工核对一下；如果较多，就再跑一遍检查，如果两次都有同一条数据不一致，那就有情况了。</p>
</li>
</ol>
<h2 id="3-限制"><a href="#3-限制" class="headerlink" title="3. 限制"></a>3. 限制</h2><ol>
<li>如果检查期间源表数据，变化频繁，有可能检查的结果不准确<br>也就是上面第4点的问题。很明显，这个程序每个检查的事务是分开的，不像pt工具能严格保证每条检查sql的事务顺序。但有不一致的数据再排查一下就ok了。实际在我线上使用过程中，99.9%是准确的。<a id="more"></a></li>
<li><p>表上必须有主键或唯一索引<br>程序会检查，如果没有会退出。</p>
</li>
<li><p>varbinay,blob等二进制字段不支持修复<br>其实也不是完全不支持，要看怎么用的。开发如果有把字符先转成字节，再存入mysql，这种就不支持修复。是有办法可以处理，那就是从源库查时用 <code>hex()</code>函数，修复sql里面<code>unhex()</code>写回去。</p>
</li>
</ol>
<h2 id="4-使用说明"><a href="#4-使用说明" class="headerlink" title="4. 使用说明"></a>4. 使用说明</h2><p>该python程序基于2.7开发，2.6、3.x上没有测试。使用前需要安装 <code>MySQLdb</code>和<code>hotqueue</code>：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip <span class="keyword">install</span> MySQL-python hotqueue</div></pre></td></tr></table></figure></p>
<p>要比较的表和选项，使用全配置化，即不通过命令行的方式指定（原谅命令行参数使用方式会额外增加代码量）。</p>
<h3 id="4-1-px-table-checksum-py"><a href="#4-1-px-table-checksum-py" class="headerlink" title="4.1 px-table-checksum.py"></a>4.1 <code>px-table-checksum.py</code></h3><p>主程序，运行<code>python px-table-checksum.py</code> 执行一致性检查，但一定了解下面的配置文件选项。</p>
<h3 id="4-2-settings-checksum-py"><a href="#4-2-settings-checksum-py" class="headerlink" title="4.2 settings_checksum.py"></a>4.2 <code>settings_checksum.py</code></h3><p>配置选项</p>
<ul>
<li><code>CHUNK_SIZE</code>: 每次提取的chunk行数</li>
<li><code>REDIS_INFO</code>: 指定使用redis队列地址</li>
<li><code>REDIS_QUEUE_CNT</code>: redis队列数量，消费者（目标库）有一一对应的线程守着队列</li>
<li><code>REDIS_POOL_CNT</code>: 生产者（源库）redis客户端连接池。这个设计是为了缓解GIL带来的问题，把入列端与出列端分开，因为如果表多可能短时间有大量sql入队列，避免hotqueue争用</li>
<li><p><code>CALC_CRC32_DB</code>: True 表示在db里面计算checksum值，False表示取出chunk数据在python里面计算。默认给的值是根据连接字符集定的。</p>
</li>
<li><p><code>DO_COMPARE</code>: 运行模式</p>
<ul>
<li>0: 只提取数据计算，不比较是否一致。可以在之后在模式2下只比较</li>
<li>1: 计算，并比较。常用，每次计算之前会删除上一次这个待检查表的结果，比较的结果只告诉哪些chunk号不一致。</li>
<li>2: 不计算，只从t_checkum结果比较。常用，计算是消耗数据库资源的，可以只对已有的checksum计算结果比较不一致的地方。类似pt工具的<code>--replicate-check-only</code>选项。</li>
</ul>
</li>
<li><code>GEN_DATAFIX</code>:<br>与<code>DO_COMPARE</code>结合使用，为 True 表示对不一致的chunk找到具体不一致行，并生成修复sql；为 False 则什么都不做。</li>
<li><p><code>RUN_DATAFIX</code>:<br>与<code>GEN_DATAFIX</code>结合使用，为 True 表示对生成的修复sql，在目标库执行。需要谨慎，如果哪一次设置了修复，记得完成后改回False，不然下次检查另一个表就出意外了，所以特意对这个选项再加了一个确认提示。</p>
</li>
<li><p><code>DB_CHECKSUM</code>: 一个字典，指定checksum的结果存到哪里<br>配置文件有示例，必须指定 <code>db_name</code>，表会自动创建。</p>
</li>
</ul>
<h3 id="4-3-settings-cs-tables-py"><a href="#4-3-settings-cs-tables-py" class="headerlink" title="4.3 settings_cs_tables.py"></a>4.3 <code>settings_cs_tables.py</code></h3><p>上面的配置文件可以认为是用于控制程序的，这个配置文件是指定要校验的源库和目标库信息，以及要检验哪些表。</p>
<ul>
<li><code>TABLES_CHECK</code>: 字典，指定要检查哪些表的一致性，db名为key，多个table名组成列表为value。暂不支持对整个db做检查，同时比较的表数量不建议超过8个</li>
<li><code>DB_SOURCE</code>: 字典，指定源库的连接信息</li>
<li><code>DB_SOURCE</code>: 字典，指定目标库的连接信息</li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/11/20/py-mysql-table-checksum-non-replicas/">http://seanlook.com/2016/11/20/py-mysql-table-checksum-non-replicas/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;#&quot;&gt;&lt;/a&gt;#&lt;/h2&gt;&lt;p&gt;title: MySQL非主从环境下数据一致性校验及修复程序&lt;br&gt;date: 2016-11-20 16:32:49&lt;br&gt;tags: [mysql, python, pt-table-checksum]&lt;br&gt;categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;br&gt;updated: 2016-11-20 16:32:49&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/seanlook/px-table-checksum&quot;&gt;https://github.com/seanlook/px-table-checksum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主从环境下数据一致性校验经常会用 pt-table-checksum 工具，它的原理及实施过程之前写过一篇文章：&lt;a href=&quot;http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/&quot;&gt;生产环境使用 pt-table-checksum 检查MySQL数据一致性&lt;/a&gt;。但是DBA工作中还会有些针对两个表检查是否一致，而这两个表之间并没有主从关系，pt工具是基于binlog把在主库进行的检查动作，在从库重放一遍，此时就不适用了。&lt;/p&gt;
&lt;p&gt;总会有这样特殊的需求，比如从阿里云RDS实例迁移到自建mysql实例，它的数据传输服务实现方式是基于表的批量数据提取，加上binlog订阅，但强制row模式会导致pt-table-checksum没有权限把会话临时改成statement。另一种需求是，整库进行字符集转换：库表定义都是utf8，但应用连接使用了默认的 latin1，要将连接字符集和表字符集统一起来，只能以latin1导出数据，再以utf8导入，这种情况数据一致性校验，且不说binlog解析程序不支持statement（如canal），新旧库本身内容不同，pt-table-checksum 算出的校验值也会不一样，失效。&lt;/p&gt;
&lt;p&gt;所以才萌生了参考 pt-table-checksum 自己写了一个：px-table-checksum 。&lt;/p&gt;
&lt;h2 id=&quot;2-实现方法&quot;&gt;&lt;a href=&quot;#2-实现方法&quot; class=&quot;headerlink&quot; title=&quot;2. 实现方法&quot;&gt;&lt;/a&gt;2. 实现方法&lt;/h2&gt;&lt;p&gt;整体思路是借鉴pt-table-checksum，从源库批量（即chunk）取出一块数据如1000行，计算CRC32值，同样的语句在目标库运行一遍，结果都存入另一个库，最后检查对应编号的chunk crc值是否一致。知道不一致还不行，得能否快速方便的修复差异，所以继续根据那些不一致的chunk，去目标库和源库找到不一致的行，是缺失，还是多余，还是被修改了，然后生成修复sql，根据指示是否自动修复。&lt;/p&gt;
&lt;p&gt;那么问题就在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如何确定批次，也就是下一个chunk该怎么取？&lt;br&gt;我还没想做到pt-table-checksum那样，可以根据负载动态调整chunk大小，甚至活跃线程数超过阀值就暂停检查，上来工作量就太大了。目前每次计算的chunk的行数是固定的，可以配置1000或2000等。&lt;br&gt;所以就要用到分页查询，根据（自增或联合）主键、唯一索引，每次limit 1000后升序取最后一条，作为下一批的起始。所以要分析表上的键情况，组合查询条件。目前仅能检查有主键或唯一所以的表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何保证源库和目标库，运行的sql一样？&lt;br&gt;之前一版是目标库和源库，以多线程各自计算chunk，入库，后来才意识到严重的bug：比如同样是取1000行，如果目标库少数据，那么下一个chunk起始就不一样，比较的结果简直一塌糊涂。&lt;br&gt;所以必须保证相同编号的chunk，起点必须相同，所以想到用队列，存放在源库跑过的所有校验sql，模拟pt工具在目标库重放。考虑到要多线程同时比较多个表，队列可能吃内存过大，于是使用了redis队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接在数据库中计算crc32，还是取出数据在内存里计算？&lt;br&gt;翻了pt-table-checksum的源码，它是在数据库里计算的。但是第一节里说过，如果目标库和源库要使用不同的字符集才能读出正确的数据，只能查询出来之后再比较。所以 px-table-checksum 两种都支持，只需指定一个配置项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同时检查多个表，源库sql挤在队列，目标库拿出来执行时过了1s，此时源库那条数据又被修改了一次同步到了目标库，会导致计算结果不一致，实则一致，怎么处理&lt;br&gt;无法处理，是px-table-checksum相比pt-table-checksum最大的缺陷。&lt;br&gt;但为了尽可能减少此类问题（比如主从延迟也可能会），特意设计了多个redis队列，目标库多个检查线程，即比如同时指定检查8个表，源库检查会有8个线程对应，但可以根据表的写入情况，配置4个redis队列（目前是随机入列），10个目标库检查线程，来减少不准确因素。&lt;br&gt;但站在我的角度往往来说，不一致的数据会被记录下来，如果不多，人工核对一下；如果较多，就再跑一遍检查，如果两次都有同一条数据不一致，那就有情况了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-限制&quot;&gt;&lt;a href=&quot;#3-限制&quot; class=&quot;headerlink&quot; title=&quot;3. 限制&quot;&gt;&lt;/a&gt;3. 限制&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如果检查期间源表数据，变化频繁，有可能检查的结果不准确&lt;br&gt;也就是上面第4点的问题。很明显，这个程序每个检查的事务是分开的，不像pt工具能严格保证每条检查sql的事务顺序。但有不一致的数据再排查一下就ok了。实际在我线上使用过程中，99.9%是准确的。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>让mysqldump变成并发导出导入的魔法</title>
    <link href="http://seanlook.com/2016/11/17/python-mysqldump-out-in-concurrency-magic/"/>
    <id>http://seanlook.com/2016/11/17/python-mysqldump-out-in-concurrency-magic/</id>
    <published>2016-11-17T08:32:49.000Z</published>
    <updated>2016-11-17T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>取名mypumpkin，是python封装的一个让mysqldump以多线程的方式导出库表，再以mysql命令多线程导入新库，用于成倍加快导出，特别是导入的速度。这一切只需要在 mysqldump 或 mysql 命令前面加上 <code>mypumpkin.py</code> 即可，所以称作魔法。</p>
<p><strong>项目地址</strong>：<a href="https://github.com/seanlook/mypumpkin" target="_blank" rel="external">https://github.com/seanlook/mypumpkin</a>  </p>
<p>该程序源于需要对现网单库几百G的数据进行转移到新库，并对中间进行一些特殊操作（如字符集转换），无法容忍mysqldump导入速度。有人可能会提到为什么不用 mydumper，其实也尝试过它但还是放弃了，原因有：</p>
<ol>
<li>不能设置字符集<br>mydumper强制使用 binary 方式来连接库以达到不关心备份恢复时的字符集问题，然而我的场景下需要特意以不同的字符集导出、再导入。写这个程序的时候正好在公众号看到网易有推送的一篇文章 (<a href="http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650756926&amp;idx=1&amp;sn=b8081a8ae9456a6051d1ba519febee54&amp;chksm=f3f9e2abc48e6bbd5912edb4e6207ff6ec5bf7123fedbf10b5c65a43146af22845dbf0787b39&amp;scene=0#wechat_redirect" target="_blank" rel="external">解密网易MySQL实例迁移高效完成背后的黑科技</a>)，提到他们对mydumper的改进已支持字符集设置，可是在0.9.1版本的patch里还是没找到。</li>
<li>没有像 mysqldump 那样灵活控制过滤选项（导哪些表、忽略哪些表）<br>因为数据量之巨大，而且将近70%是不变更的历史表数据，这些表是可以提前导出转换的；又有少量单表大于50G的，最好是分库导出转换。mydumper 不具备 mysqldump 这样的灵活性</li>
<li>对忽略导出gtid信息、触发器等其它支持<br>阿里云rds 5.6 导出必须要设置 set-gtid-purged=OFF</li>
</ol>
<p>另外有人还可能提到 mysqlpump —— 它才是我认为mysqldump应该具有的模样，语法兼容，基于表的并发导出。但是只有 mysql服务端 5.7.9 以上才支持，这就是现实和理想的距离。。。</p>
<h2 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h2><p>首先说明，mysqldump的导出速度并不慢，经测试能达到50M/s的速度，10G数据花费3分钟的样子，可以看到瓶颈在于网络和磁盘IO，再怎样的导出工具也快不了多少，但是导入却花了60分钟，磁盘和网络大概只用到了20%，瓶颈在目标库写入速度（而一般顺序写入达不到IOPS限制），所以mypumpkin就诞生了 —— 兼顾myloader的导入速度和mysqldump导出的灵活性。</p>
<a id="more"></a>
<p>用python构造1个队列，将需要导出的所有表一次放到队列中，同时启动N个python线程，各自从这个Queue里取出表名，subprocess调用操作系统的mysqldump命令，导出数据到以 dbname.tablename.sql 命名的文件中。load in 与 dump out 类似，根据指定的库名或表名，从dump_dir目录找到所有sql文件，压进队列，N个线程同时调用mysql构造新的命令，模拟 <code>&lt;</code> 操作。</p>
<p>参数解析从原来自己解析，到改用argparse模块，几乎做了一次重构。<br>对于没有指定<code>--tables</code>的情况，程序会主动去库里查询一下所有表名，然后过滤进队列。</p>
<p>load in目标库，选项做到与dump out一样丰富，可以指定导入哪些db、哪些表、忽略哪些表。</p>
<p>其中的重点是做到与原mysqldump兼容，因为需要对与表有关的选项（<code>-B</code>, <code>-A</code>, <code>--tables</code>, <code>--ignore=</code>），进行分析并组合成新的执行命令，考虑的异常情况非常多。</p>
<h2 id="3-限制"><a href="#3-限制" class="headerlink" title="3. 限制"></a>3. 限制</h2><ol>
<li><strong>重要</strong>：导出的数据不保证库级别的一致性<ol>
<li>对历史不变表，是不影响的</li>
<li>具体到一个表能保证一致性，这是mysqldump本身采用哪些选项决定的</li>
<li>不同表导出动作在不同的mysqldump命令中，无法保证事务。<br>在我的案例场景下，是有开发同学辅助使用一套binlog解析程序，等完成后重放所有变更，来保证最终一致性。<br>另，许多情况下我们导数据，并不需要完整的或者一致的数据，只是用于离线分析或临时导出，重点是快速拿数据给到开发。</li>
</ol>
</li>
<li>不寻常选项识别<br>程序已经尽力做到与mysqldump命令兼容，只需要加上 mypumpkin.py、指定dump-dir，就完成并发魔法，但有些情况的参数不方便解析，暂不支持格式：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">db1</span> table1 table2</div><div class="line">db2 db3</div></pre></td></tr></table></figure>
</li>
</ol>
<p>即以上无法在命令行下判断 db1、table1 是库名还是表面，用的时候只需记住“[-A|-B], [–tables], [–ignore-table]”三组，必须出现一个：<code>db1 table1 table2</code>改成<code>db1 --tables table1 table2</code>，<code>db2</code>改成<code>-B db2 db3</code>。</p>
<ol>
<li>密码暂只能显式输入</li>
</ol>
<h2 id="4-使用说明"><a href="#4-使用说明" class="headerlink" title="4. 使用说明"></a>4. 使用说明</h2><p>安装基于python 2.7 开发，其它版本没测。需要按 MySQLdb 库。</p>
<h3 id="4-1-help"><a href="#4-1-help" class="headerlink" title="4.1 help"></a>4.1 help</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">./mypumpkin.py --<span class="keyword">help</span></div><div class="line">Only mysqldump or mysql allowed after mypumpkin.py</div><div class="line"></div><div class="line">usage: mypumpkin.py &#123;mysqldump|mysqls&#125; [--<span class="keyword">help</span>]</div><div class="line"></div><div class="line">This's a <span class="keyword">program</span> that wrap mysqldump/mysql to make them dump-<span class="keyword">out</span>/load-<span class="keyword">in</span></div><div class="line">concurrently. Attention: it can not <span class="keyword">keep</span> consistent <span class="keyword">for</span> whole database(s).</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  --<span class="keyword">help</span>                show this <span class="keyword">help</span> message and <span class="keyword">exit</span></div><div class="line">  -B db1 [db1 ...], --databases db1 [db1 ...]</div><div class="line">                        Dump <span class="keyword">one</span> or <span class="keyword">more</span> databases</div><div class="line">  -A, --all-databases   Dump all databases</div><div class="line">  --tables t1 [t1 ...]  Specifiy tables to dump. Override --databases (-B)</div><div class="line">  --ignore-<span class="keyword">table</span> db1.table1 [db1.table1 ...]</div><div class="line">                        <span class="keyword">Do</span> not dump the specified <span class="keyword">table</span>. (<span class="keyword">format</span> like</div><div class="line">                        --ignore-<span class="keyword">table</span>=dbname.tablename). <span class="keyword">Use</span> the directive</div><div class="line">                        multiple times <span class="keyword">for</span> <span class="keyword">more</span> than <span class="keyword">one</span> <span class="keyword">table</span> to ignore.</div><div class="line">  --threads =<span class="keyword">N</span>          Threads to dump <span class="keyword">out</span> [2], or load <span class="keyword">in</span> [CPUs*2].</div><div class="line">  --dump-<span class="keyword">dir</span> DUMP_DIR   Required. Directory to dump <span class="keyword">out</span> (create <span class="keyword">if</span> not exist),</div><div class="line">                        Or Where to load <span class="keyword">in</span> sqlfile</div><div class="line"></div><div class="line">At least <span class="keyword">one</span> of these 3 group options given: [-A,-B] [--tables] [--ignore-<span class="keyword">table</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>--dump-dir</code>，必选项，原来用的shell标准输入输出 <code>&gt; or &lt;</code> 不允许使用。dump-dir指定目录不存在时会尝试自动创建。</li>
<li><code>--threads=N</code>，N指定并发导出或导入线程数。dump out 默认线程数2， mypumpkin load in 默认线程数是 cpu个数 * 2。<br>注：线程数不是越大越好，这里主要的衡量指标是网络带宽、磁盘IO、目标库IOPS，最好用 dstat 观察一下。</li>
<li><code>-B</code>, <code>--tables</code>，<code>--ignore-table</code>，使用与mysqldump相同，如：  <ol>
<li>在mysqldump里面，<code>--tables</code>会覆盖<code>--databases/-B</code>选项</li>
<li>在mysqldump里面，<code>--tables</code>与<code>--ignore-table</code>不能同时出现</li>
<li>在mysqldump里面，如果没有指定<code>-B</code>，则<code>--tables</code>或<code>--ignore-table</code>必须紧跟db名之后</li>
</ol>
</li>
<li>其它选项，mypumpkin会原封不动的保留下来，放到shell去执行。所以如果其它选项有错误，检查是交给原生mysqldump去做的，执行过程遇到一个失败则会退出线程。</li>
</ul>
<h3 id="4-2-example"><a href="#4-2-example" class="headerlink" title="4.2 example"></a>4.2 example</h3><p>导出：<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 导出源库所有db到visit_dumpdir2目录 （不包括information_schema和performance_schema）</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> -A <span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导出源库db1,db2，会从原库查询所有表名来过滤</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> -B <span class="string">db1 </span><span class="string">db2 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 只导出db1库的t1,t2表，如果指定表不存在则有提示</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> -B <span class="string">db1 </span><span class="built_in">--tables</span> <span class="string">t1 </span><span class="string">t2 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导出db1,db2库，但忽略 db1.t1, db2.t2, db2.t3表</span></div><div class="line"><span class="comment">## mysqldump只支持--ignore-table=db1.t1这种，使用多个重复指令来指定多表。这里做了兼容扩展</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--single-transaction</span> \</div><div class="line"> <span class="built_in">--opt</span> -B <span class="string">db1 </span><span class="string">db2 </span><span class="built_in">--ignore-table=db1.t1</span> <span class="built_in">--ignore-table</span> <span class="string">db2.</span><span class="string">t2 </span><span class="string">db2.</span><span class="string">t3 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2 </span>(如果-A表示全部<span class="string">db)</span></div><div class="line"></div><div class="line"><span class="comment">## 不带 -A/-B</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--opt</span> <span class="string">db1 </span><span class="built_in">--ignore-table=db1.t1</span> <span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 其它选项不做处理</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysqldump </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span>-<span class="string">P3306 </span>\</div><div class="line"> <span class="built_in">--single-transaction</span> <span class="built_in">--set-gtid-purged=OFF</span> <span class="built_in">--no-set-names</span> <span class="built_in">--skip-add-locks</span> -e -q -t -n <span class="built_in">--skip-triggers</span> \</div><div class="line"> <span class="built_in">--max-allowed-packet=134217728</span> <span class="built_in">--net-buffer-length=1638400</span> <span class="built_in">--default-character-set=latin1</span> \</div><div class="line"> <span class="built_in">--insert-ignore</span> <span class="built_in">--hex-blob</span> <span class="built_in">--no-autocommit</span> \</div><div class="line"> <span class="string">db1 </span><span class="built_in">--tables</span> <span class="string">t1 </span><span class="built_in">--dump-dir</span> <span class="string">visit_dumpdir2</span></div></pre></td></tr></table></figure></p>
<p>导入：<br><code>-A</code>, <code>-B</code>, <code>--tables</code>, <code>--ignore-table</code>, <code>--threads</code>, <code>--dump-dir</code>用法与作用与上面完全相同，举部分例子：</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 导入dump-dir目录下所有表</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>-A \</div><div class="line"> <span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导入db1库（所有表）</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>-B <span class="string">db1 </span>\</div><div class="line"> <span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 只导入db.t1表</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>\</div><div class="line"> <span class="built_in">--default-character-set=utf8mb4</span> <span class="built_in">--max-allowed-packet=134217728</span> <span class="built_in">--net-buffer-length=1638400</span> \</div><div class="line"> -B <span class="string">db1 </span><span class="built_in">--tables</span> <span class="string">t1 </span><span class="built_in">--dump-dir=visit_dumpdir2</span></div><div class="line"></div><div class="line"><span class="comment">## 导入db1,db2库，但忽略db1.t1表（会到dump-dir目录检查db1,db2有无对应的表存在，不在目标库检查）</span></div><div class="line">$ ./<span class="string">mypumpkin.</span><span class="string">py </span><span class="string">mysql </span>-h <span class="string">dbhost_name </span>-<span class="string">utest_user </span>-<span class="string">pyourpassword </span><span class="built_in">--port</span> <span class="string">3307 </span>\</div><div class="line"> -B <span class="string">db1 </span><span class="string">db2 </span><span class="built_in">--ignore-table=db1.t1</span> <span class="built_in">--dump-dir=visit_dumpdir2</span></div></pre></td></tr></table></figure>
<h2 id="5-速度对比"><a href="#5-速度对比" class="headerlink" title="5.速度对比"></a>5.速度对比</h2><hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/11/17/python-mysqldump-out-in-concurrency-magic/">http://seanlook.com/2016/11/17/python-mysqldump-out-in-concurrency-magic/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;取名mypumpkin，是python封装的一个让mysqldump以多线程的方式导出库表，再以mysql命令多线程导入新库，用于成倍加快导出，特别是导入的速度。这一切只需要在 mysqldump 或 mysql 命令前面加上 &lt;code&gt;mypumpkin.py&lt;/code&gt; 即可，所以称作魔法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&quot;https://github.com/seanlook/mypumpkin&quot;&gt;https://github.com/seanlook/mypumpkin&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;该程序源于需要对现网单库几百G的数据进行转移到新库，并对中间进行一些特殊操作（如字符集转换），无法容忍mysqldump导入速度。有人可能会提到为什么不用 mydumper，其实也尝试过它但还是放弃了，原因有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能设置字符集&lt;br&gt;mydumper强制使用 binary 方式来连接库以达到不关心备份恢复时的字符集问题，然而我的场景下需要特意以不同的字符集导出、再导入。写这个程序的时候正好在公众号看到网易有推送的一篇文章 (&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;amp;mid=2650756926&amp;amp;idx=1&amp;amp;sn=b8081a8ae9456a6051d1ba519febee54&amp;amp;chksm=f3f9e2abc48e6bbd5912edb4e6207ff6ec5bf7123fedbf10b5c65a43146af22845dbf0787b39&amp;amp;scene=0#wechat_redirect&quot;&gt;解密网易MySQL实例迁移高效完成背后的黑科技&lt;/a&gt;)，提到他们对mydumper的改进已支持字符集设置，可是在0.9.1版本的patch里还是没找到。&lt;/li&gt;
&lt;li&gt;没有像 mysqldump 那样灵活控制过滤选项（导哪些表、忽略哪些表）&lt;br&gt;因为数据量之巨大，而且将近70%是不变更的历史表数据，这些表是可以提前导出转换的；又有少量单表大于50G的，最好是分库导出转换。mydumper 不具备 mysqldump 这样的灵活性&lt;/li&gt;
&lt;li&gt;对忽略导出gtid信息、触发器等其它支持&lt;br&gt;阿里云rds 5.6 导出必须要设置 set-gtid-purged=OFF&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外有人还可能提到 mysqlpump —— 它才是我认为mysqldump应该具有的模样，语法兼容，基于表的并发导出。但是只有 mysql服务端 5.7.9 以上才支持，这就是现实和理想的距离。。。&lt;/p&gt;
&lt;h2 id=&quot;2-实现方法&quot;&gt;&lt;a href=&quot;#2-实现方法&quot; class=&quot;headerlink&quot; title=&quot;2. 实现方法&quot;&gt;&lt;/a&gt;2. 实现方法&lt;/h2&gt;&lt;p&gt;首先说明，mysqldump的导出速度并不慢，经测试能达到50M/s的速度，10G数据花费3分钟的样子，可以看到瓶颈在于网络和磁盘IO，再怎样的导出工具也快不了多少，但是导入却花了60分钟，磁盘和网络大概只用到了20%，瓶颈在目标库写入速度（而一般顺序写入达不到IOPS限制），所以mypumpkin就诞生了 —— 兼顾myloader的导入速度和mysqldump导出的灵活性。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://seanlook.com/categories/Python/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="mysqldump" scheme="http://seanlook.com/tags/mysqldump/"/>
    
      <category term="python" scheme="http://seanlook.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>自动记录MySQL慢查询快照脚本</title>
    <link href="http://seanlook.com/2016/09/27/python-mysql-querykill/"/>
    <id>http://seanlook.com/2016/09/27/python-mysql-querykill/</id>
    <published>2016-09-27T08:32:49.000Z</published>
    <updated>2016-09-27T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python完成的一个小程序，用于杀掉 MySQL 上的异常线程，如慢查询、处于Sleep状态的。<br><strong>项目地址</strong>：<a href="https://github.com/seanlook/myquerykill" target="_blank" rel="external">https://github.com/seanlook/myquerykill</a>  </p>
<p>写这个脚本的初衷是在使用阿里云RDS的过程中，数据库出现异常，需要快速恢复。网上有许多类似的kill脚本，都是通过 mysqladmin 实现的。然而 Ali-RDS 环境有以下限制：</p>
<ul>
<li>不提供 SUPER 权限的用户，也就是用户只能 kill 自己的线程</li>
<li>当连接数暴增时，外部用户无法登陆，包括控制台</li>
</ul>
<p>为了解决上午2大问题，该 python 脚本通过在db实例上，使用多线程的方式，为每个用户保留一个连接，并<strong>实时</strong>读取指令配置文件 <code>mysqk.ini</code>，发现有 kill 需求时，利用对应用户已有连接找到 <code>information_schema.processlist</code> 中符合条件的线程，并 kill 。</p>
<p>说明：该脚本在9月份做过一次重写，7月份的版本（分支 old_0.5.0）是每实例每用户，对应一个线程，db实例一多线程数也太多，看得始终不太优雅，于是改成了一个db实例一个线程，维护同时维护多个用户的会话。同时新版也加入了更多的功能，如按时间窗口检查，包含或排除特定连接，邮件通知，配置项覆盖。</p>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol>
<li>始终通过 mysql ping 维持一个长连接，并有断开自动重来机制，解决没有连接可用的尴尬局面</li>
<li>每个db实例有自己的线程，避免需要单独登陆个别用户去kill的繁复操作。<br>如果你具有 SUPER 权限，也可以简化配置做到兼容</li>
<li>能够分开应对需要杀死线程的场景：<ul>
<li>长时间运行超过 N 秒的</li>
<li>Sleep 状态的事务 （一般不建议，但有时候kill它，可以快速释放连接给管理员使用）</li>
<li>排除一些线程不能kill，如 Binlog dump</li>
<li>包含特定关键字的线程要kill</li>
</ul>
</li>
<li>出现符合条件的线程时，会对当时的processlist, engine status，lock_wait 做一个快照，并邮件发出</li>
<li>有试运行dry_run模式，即执行所有的检查过程但不真正kill</li>
<li>支持只在时间窗口内运行，考虑到晚上一些长任务不检查</li>
<li>密码加密</li>
</ol>
<a id="more"></a>
<h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><p>需要pip安装<code>MySQL-python</code>和<code>pycrypto</code>两个库，只在python 2.7上有测试。</p>
<p>在 <em>settings.py</em> 里面设置连接的用户名和密码信息。这里假设同一批db的要check的认证信息是一样的，指定的用户既用于登录认证，也用于告知脚本哪些用户需要被检查。<br>密码要通过 <code>prpcryptec.py</code> 加密，加密的密钥需写入脚本本身的 <code>KEY_DB_AUTH</code>变量。（担心泄露的话，把mysqk.py编译成 pyc 来跑）</p>
<p>在 <em>mysqk.ini</em> 主配置文件里面  </p>
<ul>
<li><code>db_info</code> 节设置需要被检查的数据库地址，如 <code>db01=10.0.200.100:3306</code></li>
<li>可分别 <code>db01</code>等指定需要kill thread的选项。<code>[id_db01]</code> 则默认复用 <code>[db_commkill]</code> 的选项</li>
<li><code>db_comconfig</code> 节设置 <code>db_puser</code> 为能查看到所有processlist的权限用户，且在 <em>settings.py</em> 的DB_AUTH中已指定</li>
<li><p>只想执行检查，并不想真正kill异常线程，确认 dry_run不等于0</p>
<p>Here we go!</p>
</li>
</ul>
<h1 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h1><p><strong><code>mysqk.ini</code></strong>：</p>
<h2 id="mail-config"><a href="#mail-config" class="headerlink" title="mail_config"></a>mail_config</h2><p>邮件通知相关设置，smtp服务地址和认证信息。<br><code>mail_receiver=</code> 设置空，表示不发邮件</p>
<h2 id="db-info"><a href="#db-info" class="headerlink" title="db_info"></a>db_info</h2><p>设置要检查kill哪些数据库实例.<br>格式：<code>&lt;dbid&gt;=&lt;host&gt;:&lt;port&gt;</code>，dbid是唯一表示db实例的，后面设置各db需要被kill的选项，小节配置名就是 <code>id_&lt;dbid&gt;</code>；端口必需指定。</p>
<p>在这里出现的db实例都会被执行检查，可用 ; 注释，但需要重启脚本。</p>
<h2 id="db-comconfig"><a href="#db-comconfig" class="headerlink" title="db_comconfig"></a>db_comconfig</h2><p>检查用公共配置，实时生效。</p>
<ul>
<li><code>db_puser</code>：指定一个用户名用于 show processlist，需要的权限：PROCESS、information_schema库查看。可以认为是一个代表用户，检查异常thread，把结果提供给有该thread杀掉权限用户。</li>
<li><code>run_max_count</code>：执行检查的次数，是一个全局控制开关。每次修改这个值都会重新开始检查，即一个 clean start，让刚修改的配置生效。<ul>
<li>为 0 表示脚本不进行任何检查，只简单维护与数据库的连接存活。存活检查频率在 <em>settings.py</em> 由 <code>CHECK_CONFIG_INTERVAL × CHECK_PING_MULTI</code>决定</li>
<li>为 999 表示会在后台一致检查连接线程（但不一定有符合kill条件的），检查的频率在 <em>settings.py</em> 里面 <code>CHECK_CONFIG_INTERVAL</code> 指定</li>
<li>为其它值时，表示检查次数满后停止检查</li>
</ul>
</li>
<li><code>dry_run</code>：是否开启试运行模式，为0表示真实kill，为1或其它值表示试运行。试运行模式可用于监控慢查询并告警。注意同一会话线程ID只告警一次</li>
<li><code>run_time_window</code>：运行的检查的时间窗口，格式如 <code>08:00-22:00</code>，在这个时间以外不执行检查，留空表示不限制。主要考虑晚上一些统计任务可能出现“异常”线程。</li>
</ul>
<h2 id="db-commkill"><a href="#db-commkill" class="headerlink" title="db_commkill"></a>db_commkill</h2><p>kill用公共配置，实时生效，会被 <code>id_&lt;dbid&gt;</code> 节的选项覆盖。</p>
<ul>
<li><p><code>k_user</code>：很关键的一个选项，表示你要检查并kill哪些数据库用户，多个用逗号分隔（不要带引号）。<br>为 <code>all</code> 时，表示要检查 <em>settings.py</em> 里 DB_AUTH 指定的所有用户<br>为 <code>none</code> 时，表示不kill任何异常线程，效果与设置了 dry_run 模式相当  </p>
</li>
<li><p><code>k_longtime</code>：执行超过设定值的sql则认为异常。一般大于 CHECK_CONFIG_INTERVAL</p>
</li>
<li><code>k_sleep</code>：Sleep超过设定秒的sql则认为异常，为 0 表示不杀掉sleep状态的线程</li>
<li><code>k_exclude</code>：排除掉那些特定关键字的线程，比如复制线程、管理员的连接等</li>
<li><code>k_include</code>：包含这些特定关键字的线程，需要被kill。注意，它作用在满足 k_user 和 k_exclude 的前提之下。<br>k_exclude与k_include 的值是支持python re模块正则的格式，不要带引号</li>
</ul>
<h2 id="id-dbid"><a href="#id-dbid" class="headerlink" title="id_dbid"></a>id_dbid</h2><p>这部分区域的配置项与 db_commconfig 相同，用于针对个别db的kill选项。</p>
<h1 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h1><p>两种组合模式：</p>
<ol>
<li>设置 <code>dry_run=0</code>，默认 <code>k_user=none</code>，当数据库出现异常时，主动修改对应db的k_user值，动态kill</li>
<li>设置 <code>dry_run=1</code>，默认 <code>k_user=all</code>，相当于运行在daemon模式，有慢查询则邮件通知，并且记录下当时的信息</li>
</ol>
<p>当然你也可以<code>dry_run=0</code>，<code>k_user=all</code>，让程序一直在后台跑并kill，但生产环境极不推荐。</p>
<p>有日志和快照文件可以查看。</p>
<h1 id="配置文件示例"><a href="#配置文件示例" class="headerlink" title="配置文件示例"></a>配置文件示例</h1><p>mysqlk.ini :</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="section">[mail_config]</span></div><div class="line"><span class="attr">mail_host</span>=smtp.exmail.qq.com</div><div class="line"><span class="attr">mail_user</span>=xxx@ecqun.com</div><div class="line"><span class="attr">mail_pass</span>=xxxxxx</div><div class="line"></div><div class="line"><span class="attr">mail_receiver</span>=</div><div class="line"><span class="section"></span></div><div class="line">[db_info]</div><div class="line"><span class="attr">crm0</span>=<span class="number">192.168</span>.<span class="number">1.125</span>:<span class="number">3306</span></div><div class="line"><span class="attr">crm1</span>=<span class="number">192.168</span>.<span class="number">1.126</span>:<span class="number">3306</span></div><div class="line"><span class="attr">crm2</span>=<span class="number">192.168</span>.<span class="number">1.127</span>:<span class="number">3306</span></div><div class="line"><span class="attr">crm3</span>=<span class="number">192.168</span>.<span class="number">1.128</span>:<span class="number">3306</span></div><div class="line"><span class="attr">base</span>=<span class="number">10.0</span>.<span class="number">200.142</span>:<span class="number">3306</span></div><div class="line"><span class="section"></span></div><div class="line">[db_commconfig]</div><div class="line"><span class="attr">db_puser</span>=ecuser</div><div class="line"></div><div class="line"><span class="comment">; how many kill times once this config file changed</span></div><div class="line"><span class="comment">; 0: DISABLE all kill</span></div><div class="line"><span class="comment">; 999: always kill threads that meet kill conditions</span></div><div class="line"><span class="comment">; default: 1</span></div><div class="line"><span class="comment">; can not be inherit</span></div><div class="line"><span class="attr">run_max_count</span>=<span class="number">999</span></div><div class="line"><span class="attr">dry_run</span>=<span class="number">1</span></div><div class="line"><span class="attr">run_time_window</span>=<span class="number">08</span>:<span class="number">00</span>-<span class="number">22</span>:<span class="number">00</span></div><div class="line"><span class="section"></span></div><div class="line"></div><div class="line">[db_commkill]</div><div class="line"><span class="attr">k_user</span>=all</div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"><span class="attr">k_lock</span>=<span class="number">1</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"></div><div class="line"><span class="attr">k_exclude</span>=Binlog|ecdba|Daemon</div><div class="line"><span class="attr">k_include</span>=select sleep\(<span class="number">17</span>\)</div><div class="line"><span class="section"></span></div><div class="line"></div><div class="line">[id_crm0]</div><div class="line"><span class="comment">; k_user: who's threads to be killed. use comma to separate</span></div><div class="line"><span class="comment">;         none: do not kill anyone's threads</span></div><div class="line"><span class="comment">;         all: kill all user's threads (with other where conditions)</span></div><div class="line"><span class="comment">; default: none</span></div><div class="line"><span class="attr">k_user</span>=all</div><div class="line"></div><div class="line"><span class="comment">; k_longtime: filter the threads who's running time is longer than this</span></div><div class="line"><span class="comment">;             0: ignore the time &gt; x  condition</span></div><div class="line"><span class="comment">; default: 10</span></div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">; k_sleep: whether kill sleepd threads or not</span></div><div class="line"><span class="comment">;          0: do not kill command='Sleep' threads from processlist</span></div><div class="line"><span class="comment">;          when it set to 1, usually it's subset of k_longtime condition</span></div><div class="line"><span class="comment">; default: 0</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"><span class="section"></span></div><div class="line">[id_crm1]</div><div class="line"><span class="attr">k_user</span>=ecuser</div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"><span class="section"></span></div><div class="line">[id_crm2]</div><div class="line"><span class="attr">k_user</span>=all</div><div class="line"><span class="attr">k_longtime</span>=<span class="number">10</span></div><div class="line"><span class="attr">k_sleep</span>=<span class="number">0</span></div><div class="line"><span class="section"></span></div><div class="line">[id_crm3]</div></pre></td></tr></table></figure>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/09/27/python-mysql-querykill/">http://seanlook.com/2016/09/27/python-mysql-querykill/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python完成的一个小程序，用于杀掉 MySQL 上的异常线程，如慢查询、处于Sleep状态的。&lt;br&gt;&lt;strong&gt;项目地址&lt;/strong&gt;：&lt;a href=&quot;https://github.com/seanlook/myquerykill&quot;&gt;https://github.com/seanlook/myquerykill&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;写这个脚本的初衷是在使用阿里云RDS的过程中，数据库出现异常，需要快速恢复。网上有许多类似的kill脚本，都是通过 mysqladmin 实现的。然而 Ali-RDS 环境有以下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不提供 SUPER 权限的用户，也就是用户只能 kill 自己的线程&lt;/li&gt;
&lt;li&gt;当连接数暴增时，外部用户无法登陆，包括控制台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决上午2大问题，该 python 脚本通过在db实例上，使用多线程的方式，为每个用户保留一个连接，并&lt;strong&gt;实时&lt;/strong&gt;读取指令配置文件 &lt;code&gt;mysqk.ini&lt;/code&gt;，发现有 kill 需求时，利用对应用户已有连接找到 &lt;code&gt;information_schema.processlist&lt;/code&gt; 中符合条件的线程，并 kill 。&lt;/p&gt;
&lt;p&gt;说明：该脚本在9月份做过一次重写，7月份的版本（分支 old_0.5.0）是每实例每用户，对应一个线程，db实例一多线程数也太多，看得始终不太优雅，于是改成了一个db实例一个线程，维护同时维护多个用户的会话。同时新版也加入了更多的功能，如按时间窗口检查，包含或排除特定连接，邮件通知，配置项覆盖。&lt;/p&gt;
&lt;h1 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;始终通过 mysql ping 维持一个长连接，并有断开自动重来机制，解决没有连接可用的尴尬局面&lt;/li&gt;
&lt;li&gt;每个db实例有自己的线程，避免需要单独登陆个别用户去kill的繁复操作。&lt;br&gt;如果你具有 SUPER 权限，也可以简化配置做到兼容&lt;/li&gt;
&lt;li&gt;能够分开应对需要杀死线程的场景：&lt;ul&gt;
&lt;li&gt;长时间运行超过 N 秒的&lt;/li&gt;
&lt;li&gt;Sleep 状态的事务 （一般不建议，但有时候kill它，可以快速释放连接给管理员使用）&lt;/li&gt;
&lt;li&gt;排除一些线程不能kill，如 Binlog dump&lt;/li&gt;
&lt;li&gt;包含特定关键字的线程要kill&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出现符合条件的线程时，会对当时的processlist, engine status，lock_wait 做一个快照，并邮件发出&lt;/li&gt;
&lt;li&gt;有试运行dry_run模式，即执行所有的检查过程但不真正kill&lt;/li&gt;
&lt;li&gt;支持只在时间窗口内运行，考虑到晚上一些长任务不检查&lt;/li&gt;
&lt;li&gt;密码加密&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://seanlook.com/categories/Python/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="python" scheme="http://seanlook.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>浅析MySQL事务隔离级别与锁 分享</title>
    <link href="http://seanlook.com/2016/08/30/mysql-ppt-trx_isolation-lock/"/>
    <id>http://seanlook.com/2016/08/30/mysql-ppt-trx_isolation-lock/</id>
    <published>2016-08-30T13:32:49.000Z</published>
    <updated>2016-08-30T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间在公司内部准备了一个分享，主题是关于 MySQL事务与锁，准备过程内容很多，也深入弄清楚了一些以前比较迷糊的地方，加上后面的讨论也就一个半小时。</p>
<p>主要涉及的是乐观锁与悲观锁，InnoDB多版本并发控制的实现，以及隔离级别与各种情况加锁分析，因为涉及的主要还是开发人员，所以不是很深奥。也算花了不少心血，分享一下。</p>
<p>slideshare: <a href="http://www.slideshare.net/ssuser5a0bc0/my-sql-seanlook" target="_blank" rel="external">http://www.slideshare.net/ssuser5a0bc0/my-sql-seanlook</a></p>


	<div class="row">
	  <iframe src="http://nagland.github.io/viewer/web/viewer.html?val=http://7q5fot.com1.z0.glb.clouddn.com/mysql-ppt-trx_isolation-lock-seanlook.pdf" style="width:100%; height:550px"></iframe>
	</div>



<hr>
<p>原文连接地址：<a href="http://seanlook.com/2016/08/30/mysql-ppt-trx_isolation-lock/">http://seanlook.com/2016/08/30/mysql-ppt-trx_isolation-lock/</a></p>
<hr>
<!--
<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" width="900" height="512" frameborder="0" allowfullscreen></iframe>
<p>–&gt;</p>
-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间在公司内部准备了一个分享，主题是关于 MySQL事务与锁，准备过程内容很多，也深入弄清楚了一些以前比较迷糊的地方，加上后面的讨论也就一个半小时。&lt;/p&gt;
&lt;p&gt;主要涉及的是乐观锁与悲观锁，InnoDB多版本并发控制的实现，以及隔离级别与各种情况加锁分析，因为涉及的主
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="事务" scheme="http://seanlook.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Advanced MySQL Query Tuning .pdf</title>
    <link href="http://seanlook.com/2016/06/11/mysql-advanced-query-tuning-percona/"/>
    <id>http://seanlook.com/2016/06/11/mysql-advanced-query-tuning-percona/</id>
    <published>2016-06-11T08:32:49.000Z</published>
    <updated>2016-06-11T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>端午在家无聊，又不想学习。于是在Youtube随便逛，看到一个很不错的分享，来自 Percona Database Performance。下面是演示稿：</p>
<p>slideshare: <a href="http://www.slideshare.net/ssuser5a0bc0/webinar-2013-advancedquerytuning" target="_blank" rel="external">http://www.slideshare.net/ssuser5a0bc0/webinar-2013-advancedquerytuning</a> </p>

	<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" style="width:100%;height:550px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen> </iframe> <div style="margin-bottom:5px">


<p>Youtube: <a href="https://www.youtube.com/watch?v=TPFibi2G_oo" target="_blank" rel="external">https://www.youtube.com/watch?v=TPFibi2G_oo</a></p>
<p>能 <em>条件</em> 的可以看看。</p>
<p>Percona webinars上有许多类似的分享，传送门： <a href="https://www.percona.com/resources/webinars" target="_blank" rel="external">https://www.percona.com/resources/webinars</a> ，不少是他们CEO Peter Zaitsev 亲自上马的。</p>
<hr>
<p>原文连接地址：<a href="http://seanlook.com/2016/06/11/mysql-advanced-query-tuning-percona/">http://seanlook.com/2016/06/11/mysql-advanced-query-tuning-percona/</a></p>
<hr>
<!--
<iframe src="https://www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT" width="900" height="512" frameborder="0" allowfullscreen></iframe>
<p>–&gt;</p>
--></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;端午在家无聊，又不想学习。于是在Youtube随便逛，看到一个很不错的分享，来自 Percona Database Performance。下面是演示稿：&lt;/p&gt;
&lt;p&gt;slideshare: &lt;a href=&quot;http://www.slideshare.net/ssuse
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="SQL优化" scheme="http://seanlook.com/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>使用pt-osc修改主键时注意</title>
    <link href="http://seanlook.com/2016/05/27/mysql-pt-osc-add-primarykey/"/>
    <id>http://seanlook.com/2016/05/27/mysql-pt-osc-add-primarykey/</id>
    <published>2016-05-27T08:32:49.000Z</published>
    <updated>2016-05-27T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 pt-online-schema-change 做在线ddl最添加普通索引、列，修改列类型、添加默认值等使用比较常规，但涉及到要修改的是主键时就有点棘手。在我修改线上实例过程中，有这样的需求，不妨先思考一下怎么做才好：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">原表上有个复合主键，现在要添加一个自增<span class="built_in">id</span>作为主键，如何进行</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>会涉及到以下修改动作：</p>
<ol>
<li>删除复合主键定义</li>
<li>添加新的自增主键</li>
<li>原复合主键字段，修改成唯一索引</li>
</ol>
<p>如果你够聪明，应该会把这三个操作放在同一个 alter table 命令执行。percona手册里有两个地方对修改主键进行了特殊注解：</p>
<blockquote>
<p>–alter<br>A notable exception is when a PRIMARY KEY or UNIQUE INDEX is being created from existing columns as part of the ALTER clause; in that case it will use these column(s) for the DELETE trigger.</p>
<p>–[no]check-alter</p>
<ul>
<li>DROP PRIMARY KEY<br>If –alter contain DROP PRIMARY KEY (case- and space-insensitive), a warning is printed and the tool exits unless –dry-run is specified. Altering the primary key can be dangerous, but the tool can handle it. The tool’s triggers, particularly the DELETE trigger, are most affected by altering the primary key because the tool prefers to use the primary key for its triggers. You should first run the tool with –dry-run and –print and verify that the triggers are correct.</li>
</ul>
</blockquote>
<p>由上一篇文章 <a href="http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/">pt-online-schema-change使用说明、限制与比较</a> 可知，pt-osc会在原表t1上创建 AFTER DELETE/UPDATE/INSERT 三个触发器，修改主键影响最大的就是 DELETE 触发器：新表t2上的主键字段在旧表t1上不存在，无法根据主键条件触发删除新表t2数据。<code>but the tool can handle it</code>，原因是pt-osc把触发器改成了下面的形式：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_del` AFTER DELETE ON `confluence`.`sbtest3` FOR EACH ROW DELETE IGNORE FROM `confluence`.`_sbtest3_new` </div><div class="line">WHERE `confluence`.`_sbtest3_new`.`id` &lt;=&gt; OLD.`id` <span class="literal">AND</span> `confluence`.`_sbtest3_new`.`k` &lt;=&gt; OLD.`k`</div><div class="line"></div><div class="line">注：sbtest3表上以(id,k)作为复合主键</div></pre></td></tr></table></figure></p>
<p>但是如果id或k列上没有索引，这个删除的代价非常高，所以一定要同时添加复合（唯一）索引 <code>(id,k)</code> .</p>
<p>而对于INSERT,UPDATE的触发器，依然是 <code>REPLACE INTO</code>语法，因为它采用的是先插入，如果违反主键或唯一约束，则根据主键或意义约束删除这条数据，再执行插入。（但是注意你不能依赖于新表的主键递增，因为如果原表有update，新表就会先插入这一条，导致id与原表记录所在顺序不一样）</p>
<p>所以如果使用pt-osc去修改删除主键，务必同时添加原主键为 UNIQUE KEY，否则很有可能导致性能问题：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ pt-online-schema-<span class="keyword">change</span> <span class="comment">--user=ecuser --password=ecuser --host=10.0.201.34  \</span></div><div class="line"><span class="comment">--alter "DROP PRIMARY KEY,add column pk int auto_increment primary key,add unique key uk_id_k(id,k)" \</span></div><div class="line">D=confluence,t=sbtest3 <span class="comment">--print --dry-run</span></div><div class="line"></div><div class="line"><span class="comment">--alter contains 'DROP PRIMARY KEY'.  Dropping and altering the primary key can be dangerous, </span></div><div class="line">especially <span class="keyword">if</span> the original <span class="keyword">table</span> does <span class="keyword">not</span> have other <span class="keyword">unique</span> indexes.  ==&gt;注意 dry-run的输出</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>,<span class="keyword">add</span> <span class="keyword">column</span> pk <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,<span class="keyword">add</span> <span class="keyword">unique</span> <span class="keyword">key</span> uk_id_k(<span class="keyword">id</span>,k)</div><div class="line">Altered <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> OK.</div><div class="line"><span class="keyword">Using</span> original <span class="keyword">table</span> <span class="keyword">index</span> PRIMARY <span class="keyword">for</span> the <span class="keyword">DELETE</span> <span class="keyword">trigger</span> instead <span class="keyword">of</span> <span class="keyword">new</span> <span class="keyword">table</span> <span class="keyword">index</span> PRIMARY because ==&gt; 使用原表主键值判断</div><div class="line">the <span class="keyword">new</span> <span class="keyword">table</span> <span class="keyword">index</span> uses <span class="keyword">column</span> pk which does <span class="keyword">not</span> exist <span class="keyword">in</span> the original table.</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_del`</span> <span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">DELETE</span> <span class="keyword">IGNORE</span> <span class="keyword">FROM</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> </div><div class="line"><span class="keyword">WHERE</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span>.<span class="string">`id`</span> &lt;=&gt; OLD.<span class="string">`id`</span> <span class="keyword">AND</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span>.<span class="string">`k`</span> &lt;=&gt; OLD.<span class="string">`k`</span></div></pre></td></tr></table></figure>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/27/mysql-pt-osc-add-primarykey/">http://seanlook.com/2016/05/27/mysql-pt-osc-add-primarykey/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 pt-online-schema-change 做在线ddl最添加普通索引、列，修改列类型、添加默认值等使用比较常规，但涉及到要修改的是主键时就有点棘手。在我修改线上实例过程中，有这样的需求，不妨先思考一下怎么做才好：&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;原表上有个复合主键，现在要添加一个自增&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;作为主键，如何进行&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="Percona-toolkit" scheme="http://seanlook.com/tags/Percona-toolkit/"/>
    
  </entry>
  
  <entry>
    <title>pt-online-schema-change使用说明、限制与比较</title>
    <link href="http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/"/>
    <id>http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/</id>
    <published>2016-05-27T08:32:49.000Z</published>
    <updated>2016-05-27T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果正在看这篇文章，相信你已经知道自己的需求了。</p>
<p>在 mysql 5.5 版本以前，修改表结构如添加索引、修改列，需要锁表，期间不能写入，对于大表这简直是灾难。从5.5特别是5.6里，情况有了好转，支持Online DDL，相关介绍见 <a href="http://seanlook.com/2016/05/24/mysql-online-ddl-concept">这篇文章</a>，而我在实际alter table过程中还是会引起 data meta lock 问题。pt-online-schema-change是Percona-toolkit一员，通过改进原生ddl的方式，达到不锁表在线修改表结构。</p>
<h2 id="1-pt-osc工作过程"><a href="#1-pt-osc工作过程" class="headerlink" title="1. pt-osc工作过程"></a>1. pt-osc工作过程</h2><ol>
<li>创建一个和要执行 alter 操作的表一样的新的空表结构(是alter之前的结构)</li>
<li>在新表执行alter table 语句（速度应该很快）</li>
<li>在原表中创建触发器3个触发器分别对应insert,update,delete操作</li>
<li>以一定块大小从原表拷贝数据到临时表，拷贝过程中通过原表上的触发器在原表进行的写操作都会更新到新建的临时表</li>
<li>Rename 原表到old表中，在把临时表Rename为原表</li>
<li>如果有参考该表的外键，根据alter-foreign-keys-method参数的值，检测外键相关的表，做相应设置的处理</li>
<li>默认最后将旧原表删除</li>
</ol>
<h2 id="2-常用选项说明"><a href="#2-常用选项说明" class="headerlink" title="2. 常用选项说明"></a>2. 常用选项说明</h2><p>只介绍部分常用的选项</p>
<ul>
<li><code>--host=xxx --user=xxx --password=xxx</code><br>连接实例信息，缩写<code>-h xxx -u xxx -p xxx</code>，密码可以使用参数<code>--ask-pass</code> 手动输入。</li>
<li><code>--alter</code><br>结构变更语句，不需要 <code>ALTER TABLE</code>关键字。与原始ddl一样可以指定多个更改，用逗号分隔。<ul>
<li>绝大部分情况下表上需要有主键或唯一索引，因为工具在运行当中为了保证新表也是最新的，需要旧表上创建 DELETE和UPDATE 触发器，同步到新表的时候有主键会更快。个别情况是，当alter操作就是在c1列上建立主键时，DELETE触发器将基于c1列。</li>
<li>子句不支持 rename 去给表重命名。 </li>
<li>alter命令原表就不支持给索引重命名，需要先drop再add，在pt-osc也一样。(mysql 5.7 支持 RENAME INDEX old_index_name TO new_index_name)<br>但给字段重命名，千万不要drop-add，整列数据会丢失，使用<code>change col1 col1_new type constraint</code>（保持类型和约束一致，否则相当于修改 column type，不能online）</li>
<li>子句如果是add column并且定义了not null，那么必须指定default值，否则会失败。</li>
<li>如果要删除外键（名 fk_foo），使用工具的时候外键名要加下划线，比如<code>--alter &quot;DROP FOREIGN KEY _fk_foo&quot;</code></li>
</ul>
</li>
</ul>
<ul>
<li><p><code>D=db_name,t=table_name</code><br>指定要ddl的数据库名和表名</p>
</li>
<li><p><code>--max-load</code><br>默认为<code>Threads_running=25</code>。每个chunk拷贝完后，会检查 <em>SHOW GLOBAL STATUS</em> 的内容，检查指标是否超过了指定的阈值。如果超过，则先暂停。这里可以用逗号分隔，指定多个条件，每个条件格式： <code>status指标=MAX_VALUE</code>或者<code>status指标:MAX_VALUE</code>。如果不指定MAX_VALUE，那么工具会这只其为当前值的120%。<br>因为拷贝行有可能会给部分行上锁，Threads_running 是判断当前数据库负载的绝佳指标。</p>
</li>
<li><p><code>--max-lag</code><br>默认1s。每个chunk拷贝完成后，会查看所有复制Slave的延迟情况（<code>Seconds_Behind_Master</code>）。要是延迟大于该值，则暂停复制数据，直到所有从的滞后小于这个值。<code>--check-interval</code>配合使用，指定出现从库滞后超过 max-lag，则该工具将睡眠多长时间，默认1s，再检查。如<code>--max-lag=5 --check-interval=2</code>。<br>熟悉percona-toolkit的人都知道<code>--recursion-method</code>可以用来指定从库dsn记录。另外，如果从库被停止，将会永远等待，直到从开始同步，并且延迟小于该值。</p>
</li>
<li><p><code>--chunk-time</code><br>默认0.5s，即拷贝数据行的时候，为了尽量保证0.5s内拷完一个chunk，动态调整chunk-size的大小，以适应服务器性能的变化。<br>也可以通过另外一个选项<code>--chunk-size</code>禁止动态调整，即每次固定拷贝 1k 行，如果指定则默认1000行，且比 chunk-time 优先生效</p>
<a id="more"></a></li>
<li><p><code>--set-vars</code><br>使用pt-osc进行ddl要开一个session去操作，<code>set-vars</code>可以在执行alter之前设定这些变量，比如默认会设置<code>--set-vars &quot;wait_timeout=10000,innodb_lock_wait_timeout=1,lock_wait_timeout=60&quot;</code>。<br>因为使用pt-osc之后ddl的速度会变慢，所以预计2.5h只能还不能改完，记得加大<code>wait_timeout</code>。</p>
</li>
<li><p><code>--dry-run</code><br>创建和修改新表，但不会创建触发器、复制数据、和替换原表。并不真正执行，可以看到生成的执行语句，了解其执行步骤与细节，和<code>--print</code>配合最佳。。</p>
</li>
<li><p><code>--execute</code><br>确定修改表，则指定该参数。真正执行alter。–dry-run与–execute必须指定一个，二者相互排斥</p>
</li>
</ul>
<h2 id="3-使用疑惑（限制）"><a href="#3-使用疑惑（限制）" class="headerlink" title="3. 使用疑惑（限制）"></a>3. 使用疑惑（限制）</h2><h3 id="3-1-原表上不能有触发器存在"><a href="#3-1-原表上不能有触发器存在" class="headerlink" title="3.1 原表上不能有触发器存在"></a>3.1 原表上不能有触发器存在</h3><p>这个很容易理解，pt-osc会在原表上创建3个触发器，而一个表上不能同时有2个相同类型的触发器，为简单通用起见，只能一棍子打死。<br>所以如果要让它支持有触发器存在的表也是可以实现的，思路就是：先找到原表触发器定义；重写原表触发器；最后阶段将原表触发器定义应用到新表。</p>
<h3 id="3-2-通过触发器写数据到临时新表，会不会出现数据不一致或异常"><a href="#3-2-通过触发器写数据到临时新表，会不会出现数据不一致或异常" class="headerlink" title="3.2 通过触发器写数据到临时新表，会不会出现数据不一致或异常"></a>3.2 通过触发器写数据到临时新表，会不会出现数据不一致或异常</h3><p>这其实是我的一个顾虑，因为如果update t1，触发update t2，但这条数据还没copy到t2，不就有异常了吗？后台通过打开general_log，看到它创建的触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    6165 Query     <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_del`</span> <span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> </div><div class="line">        <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">DELETE</span> <span class="keyword">IGNORE</span> <span class="keyword">FROM</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> <span class="keyword">WHERE</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span>.<span class="string">`id`</span> &lt;=&gt; OLD.<span class="string">`id`</span></div><div class="line">    <span class="number">6165</span> <span class="keyword">Query</span>     <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_upd`</span> <span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> </div><div class="line">        <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> (<span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span>) <span class="keyword">VALUES</span> (NEW.<span class="string">`id`</span>, NEW.<span class="string">`k`</span>, NEW.<span class="string">`c`</span>, NEW.<span class="string">`pad`</span>)</div><div class="line">    <span class="number">6165</span> <span class="keyword">Query</span>     <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`pt_osc_confluence_sbtest3_ins`</span> <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> </div><div class="line">        <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> (<span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span>) <span class="keyword">VALUES</span> (NEW.<span class="string">`id`</span>, NEW.<span class="string">`k`</span>, NEW.<span class="string">`c`</span>, NEW.<span class="string">`pad`</span>)</div><div class="line"></div><div class="line">并且copy操作是：</div><div class="line"></div><div class="line">    <span class="number">6165</span> <span class="keyword">Query</span>     <span class="keyword">INSERT</span> <span class="keyword">LOW_PRIORITY</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> <span class="string">`confluence`</span>.<span class="string">`_sbtest3_new`</span> (<span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span>) </div><div class="line">         <span class="keyword">SELECT</span> <span class="string">`id`</span>, <span class="string">`k`</span>, <span class="string">`c`</span>, <span class="string">`pad`</span> <span class="keyword">FROM</span> <span class="string">`confluence`</span>.<span class="string">`sbtest3`</span> <span class="keyword">FORCE</span> <span class="keyword">INDEX</span>(<span class="string">`PRIMARY`</span>) <span class="keyword">WHERE</span> ((<span class="string">`id`</span> &gt;= <span class="string">'4692805'</span>)) <span class="keyword">AND</span> ((<span class="string">`id`</span> &lt;= <span class="string">'4718680'</span>)) </div><div class="line">        <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span> <span class="comment">/*pt-online-schema-change 46459 copy nibble*/</span></div></pre></td></tr></table></figure></p>
<p>在原表上update，新临时表上是replace into整行数据，所以达到有则更新，无则插入。同时配合后面的 insert ignore，保证这条数据不会因为重复而失败。</p>
<h3 id="3-3-为什么外键那么特殊"><a href="#3-3-为什么外键那么特殊" class="headerlink" title="3.3 为什么外键那么特殊"></a>3.3 为什么外键那么特殊</h3><p>假设 <em>t1</em> 是要修改的表，<em>t2</em> 有外键依赖于 <em>t1</em>，<em>_t1_new</em> 是 alter <em>t1</em> 产生的新临时表。<br>这里的外键不是看t1上是否存在外键，而是作为子表的 t2。主要问题在 rename t1 时，t1“不存在”导致t2的外键认为参考失败，不允许rename。<br>pt-osc提供<code>--alter-foreign-keys-method</code>选项来决定怎么处理这种情况：</p>
<ul>
<li><code>rebuild_constraints</code>，优先采用这种方式<ul>
<li>它先通过 <em>alter table t2 drop fk1,add _fk1</em> 重建外键参考，指向新表 </li>
<li>再 <em>rename t1 t1_old, _t1_new t1</em> ，交换表名，不影响客户端</li>
<li>删除旧表 t1_old<br>但如果字表t2太大，以致alter操作可能耗时过长，有可能会强制选择 drop_swap。<br>涉及的主要方法在 <code>pt-online-schema-change</code> 文件的 <em>determine_alter_fk_method</em>, <em>rebuild_constraints</em>, <em>swap_tables</em>三个函数中。</li>
</ul>
</li>
<li><code>drop_swap</code>，<ul>
<li>禁用t2表外键约束检查 <code>FOREIGN_KEY_CHECKS=0</code></li>
<li>然后 drop t1 原表</li>
<li>再 <em>rename _t1_new t1</em><br>这种方式速度更快，也不会阻塞请求。但有风险，第一，drop表的瞬间到rename过程，原表t1是不存在的，遇到请求会报错；第二，如果因为bug或某种原因，旧表已删，新表rename失败，那就太晚了，但这种情况很少见。<br>我们的开发规范决定，即使表间存在外键参考关系，也不通过表定义强制约束。</li>
</ul>
</li>
</ul>
<h3 id="3-4-在使用之前需要对磁盘容量进行评估"><a href="#3-4-在使用之前需要对磁盘容量进行评估" class="headerlink" title="3.4 在使用之前需要对磁盘容量进行评估"></a>3.4 在使用之前需要对磁盘容量进行评估</h3><p>使用OSC会使增加一倍的空间，包括索引<br>而且在 Row Based Replication 下，还会写一份binlog。不要想当然使用<code>--set-vars</code>去设置 sql_log_bin=0，因为在这个session级别，alter语句也要在从库上执行，除非你对从库另有打算。</p>
<h2 id="4-使用-pt-osc原生-5-6-online-ddl相比，如何选择"><a href="#4-使用-pt-osc原生-5-6-online-ddl相比，如何选择" class="headerlink" title="4. 使用 pt-osc原生 5.6 online ddl相比，如何选择"></a>4. 使用 pt-osc原生 5.6 online ddl相比，如何选择</h2><ul>
<li>online ddl在必须copy table时成本较高，不宜采用</li>
<li>pt-osc工具在存在触发器时，不适用</li>
<li>修改索引、外键、列名时，优先采用online ddl，并指定 ALGORITHM=INPLACE</li>
<li>其它情况使用pt-osc，虽然存在copy data</li>
<li>pt-osc比online ddl要慢一倍左右，因为它是根据负载调整的</li>
<li>无论哪种方式都选择的业务低峰期执行</li>
<li>特殊情况需要利用主从特性，先alter从库，主备切换，再改原主库</li>
</ul>
<p>借助percona博客一张图说明一下：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/DDLFlow1.png" alt="DDL flow"></p>
<h2 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h2><ul>
<li><p><strong>添加新列</strong><br>完整输出过程</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">[root@ssd-<span class="number">34</span> sysbench]# pt-online-schema-change --user=user --password=password --host=<span class="number">10.0</span>.<span class="number">201.34</span>  --alter <span class="string">"ADD COLUMN f_id int default 0"</span> D=confluence,t=sbtest3 --print --execute</div><div class="line">No slaves found.  See --recursion-method <span class="keyword">if</span> host ssd-<span class="number">34</span> has slaves.</div><div class="line"><span class="literal">Not</span> checking slave lag because no slaves were found <span class="literal">and</span> --check-slave-lag was <span class="literal">not</span> specified.</div><div class="line"><span class="symbol">Operation, tries, wait:</span></div><div class="line">  analyze_table, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  copy_rows, <span class="number">10</span>, <span class="number">0.25</span></div><div class="line">  create_triggers, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  drop_triggers, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  swap_tables, <span class="number">10</span>, <span class="number">1</span></div><div class="line">  update_foreign_keys, <span class="number">10</span>, <span class="number">1</span></div><div class="line">Altering `confluence`.`sbtest3`...</div><div class="line">Creating new table...         ==&gt; 创建新表</div><div class="line">CREATE TABLE `confluence`.`_sbtest3_new` (</div><div class="line">  `id` int(<span class="number">10</span>) unsigned <span class="literal">NOT</span> NULL AUTO_INCREMENT,</div><div class="line">  `k` int(<span class="number">10</span>) unsigned <span class="literal">NOT</span> NULL DEFAULT '<span class="number">0</span>',</div><div class="line">  `c` char(<span class="number">120</span>) COLLATE utf8_bin <span class="literal">NOT</span> NULL DEFAULT '',</div><div class="line">  `pad` char(<span class="number">60</span>) COLLATE utf8_bin <span class="literal">NOT</span> NULL DEFAULT '',</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `k_3` (`k`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">5000001</span> DEFAULT CHARSET=utf8 COLLATE=utf8_bin MAX_ROWS=<span class="number">1000000</span></div><div class="line">Created new table confluence._sbtest3_new OK.</div><div class="line">Altering new table...         ==&gt; 使用ddl修改新表结构</div><div class="line">ALTER TABLE `confluence`.`_sbtest3_new` ADD COLUMN f_id int default <span class="number">0</span></div><div class="line">Altered `confluence`.`_sbtest3_new` OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">54</span>:<span class="number">23</span> Creating triggers...   ==&gt; 在旧表上创建<span class="number">3</span>个触发器</div><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_del` AFTER DELETE ON `confluence`.`sbtest3` FOR EACH ROW </div><div class="line">    DELETE IGNORE FROM `confluence`.`_sbtest3_new` WHERE `confluence`.`_sbtest3_new`.`id` &lt;=&gt; OLD.`id`</div><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_upd` AFTER UPDATE ON `confluence`.`sbtest3` FOR EACH ROW </div><div class="line">    REPLACE INTO `confluence`.`_sbtest3_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`)</div><div class="line">CREATE TRIGGER `pt_osc_confluence_sbtest3_ins` AFTER INSERT ON `confluence`.`sbtest3` FOR EACH ROW </div><div class="line">    REPLACE INTO `confluence`.`_sbtest3_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`)</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">54</span>:<span class="number">23</span> Created triggers OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">54</span>:<span class="number">23</span> Copying approximately <span class="number">4485573</span> rows...  ==&gt; 分块拷贝数据到新表</div><div class="line">INSERT LOW_PRIORITY IGNORE INTO `confluence`.`_sbtest3_new` (`id`, `k`, `c`, `pad`) </div><div class="line">  SELECT `id`, `k`, `c`, `pad` FROM `confluence`.`sbtest3` FORCE INDEX(`PRIMARY`) WHERE ((`id` &gt;= ?)) <span class="literal">AND</span> ((`id` &lt;= ?)) </div><div class="line">  LOCK IN SHARE MODE /*pt-online-schema-change <span class="number">44155</span> copy nibble*/</div><div class="line">SELECT /*!<span class="number">40001</span> SQL_NO_CACHE */ `id` FROM `confluence`.`sbtest3` FORCE INDEX(`PRIMARY`) WHERE ((`id` &gt;= ?)) ORDER BY `id` LIMIT ?, <span class="number">2</span> /*next chunk boundary*/</div><div class="line"><span class="symbol">Copying `confluence`.`sbtest3`:  36% 00:</span><span class="number">52</span> remain</div><div class="line"><span class="symbol">Copying `confluence`.`sbtest3`:  69% 00:</span><span class="number">26</span> remain</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Copied rows OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Analyzing new table...</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Swapping tables...  ==&gt; 交换新旧表</div><div class="line">RENAME TABLE `confluence`.`sbtest3` TO `confluence`.`_sbtest3_old`, `confluence`.`_sbtest3_new` TO `confluence`.`sbtest3`</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Swapped original <span class="literal">and</span> new tables OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">01</span> Dropping old table...  ==&gt; 删除旧表</div><div class="line">DROP TABLE <span class="keyword">IF</span> EXISTS `confluence`.`_sbtest3_old`</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">02</span> Dropped old table `confluence`.`_sbtest3_old` OK.</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">02</span> Dropping triggers...</div><div class="line">DROP TRIGGER <span class="keyword">IF</span> EXISTS `confluence`.`pt_osc_confluence_sbtest3_del`;</div><div class="line">DROP TRIGGER <span class="keyword">IF</span> EXISTS `confluence`.`pt_osc_confluence_sbtest3_upd`;</div><div class="line">DROP TRIGGER <span class="keyword">IF</span> EXISTS `confluence`.`pt_osc_confluence_sbtest3_ins`;</div><div class="line"><span class="number">2016</span>-<span class="number">05</span>-<span class="number">24</span>T20:<span class="number">56</span>:<span class="number">02</span> Dropped triggers OK.</div><div class="line">Successfully altered `confluence`.`sbtest3`.</div></pre></td></tr></table></figure>
</li>
<li><p><strong>修改列类型</strong></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pt-online-schema-change h=10.0.201.34,P=3306,u=jacky,p=xxx,D=confluence,t=sbtest3 \</div><div class="line">-<span class="ruby">-alter <span class="string">"CHANGE pad f_pad varchar(60) NOT NULL DEFAULT '' "</span> \</span></div><div class="line">-<span class="ruby">-print --dry-run</span></div><div class="line"></div><div class="line">pt-online-schema-change -ujacky -p xxx -h "10.0.201.34" D=confluence,t=sbtest3 \</div><div class="line">-<span class="ruby">-alter <span class="string">"CHANGE pad f_pad varchar(60) NOT NULL DEFAULT '' "</span> \</span></div><div class="line">-<span class="ruby">-execute</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>添加删除索引</strong><br>放后台执行</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">pt</span><span class="literal">-</span><span class="comment">online</span><span class="literal">-</span><span class="comment">schema</span><span class="literal">-</span><span class="comment">change</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=user</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ask</span><span class="literal">-</span><span class="comment">pass</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">34</span>  <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">alter</span> <span class="comment">"DROP</span> <span class="comment">KEY</span> <span class="comment">cid</span><span class="string">,</span> <span class="comment">ADD</span> <span class="comment">KEY</span> <span class="comment">idx_corpid_userid(f_corp_id</span><span class="string">,</span><span class="comment">f_user_id)</span> <span class="comment">"</span> <span class="comment">\</span></div><div class="line"><span class="comment">D=confluence</span><span class="string">,</span><span class="comment">t=sbtest3</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">print</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">execute</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>修改主键</strong></p>
</li>
</ul>
<p>在我的环境里有不少表设计之初没有自增id，而是采用复合主键，pt-osc 对删除、添加主键会特殊处理，详见 <a href="http://seanlook/2016/05/27/mysql-pt-osc-add-primarykey" target="_blank" rel="external">这里</a>。</p>
<h2 id="6-错误处理"><a href="#6-错误处理" class="headerlink" title="6. 错误处理"></a>6. 错误处理</h2><p><strong>1. 存在trigger </strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[zx@mysql-5 ~]$ pt-online-schema-<span class="keyword">change</span>  -u <span class="keyword">user</span> -p <span class="keyword">password</span> -h <span class="number">10.0</span><span class="number">.200</span><span class="number">.195</span> \</div><div class="line"><span class="comment">--alter="MODIFY COLUMN f_receiver  varchar(128)                                                      NOT NULL DEFAULT '' AFTER f_user_id" --dry-run D=db_name,t=table_name</span></div><div class="line">The <span class="keyword">table</span> <span class="string">`db_name`</span>.<span class="string">`table_name`</span> has triggers.  This tool needs <span class="keyword">to</span> <span class="keyword">create</span> its own <span class="keyword">triggers</span>, so the <span class="keyword">table</span> cannot already have triggers.</div></pre></td></tr></table></figure></p>
<p>表上存在触发器，不适用。</p>
<p><strong>2. no-version-check  </strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pt-online-schema-change -uuser -ppassword --alter <span class="string">"add key id_provice(f_provice)"</span> \</div><div class="line"><span class="keyword">D</span>=db_name,t=tb_name -<span class="keyword">h</span> rdsxxxxxx.mysql.rds.aliyuncs.com</div><div class="line">Can't <span class="keyword">use</span> <span class="keyword">an</span> undefined value <span class="keyword">as</span> <span class="keyword">an</span> ARRAY reference at /usr/bin/pt-online-schema-change <span class="keyword">line</span> 7335.</div></pre></td></tr></table></figure></p>
<p>这个错误在阿里云RDS上执行时出现的，我以为是我哪里语法写错了，但拿到原生5.6的版本上就没问题了，加上<code>--no-version-check</code>选项就好了，见 <a href="https://help.aliyun.com/knowledge_detail/13098164.html" target="_blank" rel="external">https://help.aliyun.com/knowledge_detail/13098164.html</a> ，没深究，应该是pt去验证mysql server版本的时候从rds拿到的信息不对，导致格式出错。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.percona.com/doc/percona-toolkit/2.2/pt-online-schema-change.html" target="_blank" rel="external">refman pt-online-schema-change</a></li>
<li><a href="https://help.aliyun.com/knowledge_detail/13098164.html" target="_blank" rel="external">RDS MySQL 如何使用 Percona Toolkit</a></li>
<li><a href="http://www.cnblogs.com/zhoujinyi/p/3491059.html" target="_blank" rel="external">percona-toolkit 之 【pt-online-schema-change】说明</a></li>
<li><a href="https://www.percona.com/blog/2014/11/18/avoiding-mysql-alter-table-downtime/" target="_blank" rel="external">Avoiding MySQL ALTER table downtime</a></li>
<li><a href="http://www.imcjd.com/?p=1081" target="_blank" rel="external">MySQL Online DDL和NoSQL Schemaless Design</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/">http://seanlook.com/2016/05/27/mysql-pt-online-schema-change/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果正在看这篇文章，相信你已经知道自己的需求了。&lt;/p&gt;
&lt;p&gt;在 mysql 5.5 版本以前，修改表结构如添加索引、修改列，需要锁表，期间不能写入，对于大表这简直是灾难。从5.5特别是5.6里，情况有了好转，支持Online DDL，相关介绍见 &lt;a href=&quot;http://seanlook.com/2016/05/24/mysql-online-ddl-concept&quot;&gt;这篇文章&lt;/a&gt;，而我在实际alter table过程中还是会引起 data meta lock 问题。pt-online-schema-change是Percona-toolkit一员，通过改进原生ddl的方式，达到不锁表在线修改表结构。&lt;/p&gt;
&lt;h2 id=&quot;1-pt-osc工作过程&quot;&gt;&lt;a href=&quot;#1-pt-osc工作过程&quot; class=&quot;headerlink&quot; title=&quot;1. pt-osc工作过程&quot;&gt;&lt;/a&gt;1. pt-osc工作过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建一个和要执行 alter 操作的表一样的新的空表结构(是alter之前的结构)&lt;/li&gt;
&lt;li&gt;在新表执行alter table 语句（速度应该很快）&lt;/li&gt;
&lt;li&gt;在原表中创建触发器3个触发器分别对应insert,update,delete操作&lt;/li&gt;
&lt;li&gt;以一定块大小从原表拷贝数据到临时表，拷贝过程中通过原表上的触发器在原表进行的写操作都会更新到新建的临时表&lt;/li&gt;
&lt;li&gt;Rename 原表到old表中，在把临时表Rename为原表&lt;/li&gt;
&lt;li&gt;如果有参考该表的外键，根据alter-foreign-keys-method参数的值，检测外键相关的表，做相应设置的处理&lt;/li&gt;
&lt;li&gt;默认最后将旧原表删除&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-常用选项说明&quot;&gt;&lt;a href=&quot;#2-常用选项说明&quot; class=&quot;headerlink&quot; title=&quot;2. 常用选项说明&quot;&gt;&lt;/a&gt;2. 常用选项说明&lt;/h2&gt;&lt;p&gt;只介绍部分常用的选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--host=xxx --user=xxx --password=xxx&lt;/code&gt;&lt;br&gt;连接实例信息，缩写&lt;code&gt;-h xxx -u xxx -p xxx&lt;/code&gt;，密码可以使用参数&lt;code&gt;--ask-pass&lt;/code&gt; 手动输入。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--alter&lt;/code&gt;&lt;br&gt;结构变更语句，不需要 &lt;code&gt;ALTER TABLE&lt;/code&gt;关键字。与原始ddl一样可以指定多个更改，用逗号分隔。&lt;ul&gt;
&lt;li&gt;绝大部分情况下表上需要有主键或唯一索引，因为工具在运行当中为了保证新表也是最新的，需要旧表上创建 DELETE和UPDATE 触发器，同步到新表的时候有主键会更快。个别情况是，当alter操作就是在c1列上建立主键时，DELETE触发器将基于c1列。&lt;/li&gt;
&lt;li&gt;子句不支持 rename 去给表重命名。 &lt;/li&gt;
&lt;li&gt;alter命令原表就不支持给索引重命名，需要先drop再add，在pt-osc也一样。(mysql 5.7 支持 RENAME INDEX old_index_name TO new_index_name)&lt;br&gt;但给字段重命名，千万不要drop-add，整列数据会丢失，使用&lt;code&gt;change col1 col1_new type constraint&lt;/code&gt;（保持类型和约束一致，否则相当于修改 column type，不能online）&lt;/li&gt;
&lt;li&gt;子句如果是add column并且定义了not null，那么必须指定default值，否则会失败。&lt;/li&gt;
&lt;li&gt;如果要删除外键（名 fk_foo），使用工具的时候外键名要加下划线，比如&lt;code&gt;--alter &amp;quot;DROP FOREIGN KEY _fk_foo&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;D=db_name,t=table_name&lt;/code&gt;&lt;br&gt;指定要ddl的数据库名和表名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--max-load&lt;/code&gt;&lt;br&gt;默认为&lt;code&gt;Threads_running=25&lt;/code&gt;。每个chunk拷贝完后，会检查 &lt;em&gt;SHOW GLOBAL STATUS&lt;/em&gt; 的内容，检查指标是否超过了指定的阈值。如果超过，则先暂停。这里可以用逗号分隔，指定多个条件，每个条件格式： &lt;code&gt;status指标=MAX_VALUE&lt;/code&gt;或者&lt;code&gt;status指标:MAX_VALUE&lt;/code&gt;。如果不指定MAX_VALUE，那么工具会这只其为当前值的120%。&lt;br&gt;因为拷贝行有可能会给部分行上锁，Threads_running 是判断当前数据库负载的绝佳指标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--max-lag&lt;/code&gt;&lt;br&gt;默认1s。每个chunk拷贝完成后，会查看所有复制Slave的延迟情况（&lt;code&gt;Seconds_Behind_Master&lt;/code&gt;）。要是延迟大于该值，则暂停复制数据，直到所有从的滞后小于这个值。&lt;code&gt;--check-interval&lt;/code&gt;配合使用，指定出现从库滞后超过 max-lag，则该工具将睡眠多长时间，默认1s，再检查。如&lt;code&gt;--max-lag=5 --check-interval=2&lt;/code&gt;。&lt;br&gt;熟悉percona-toolkit的人都知道&lt;code&gt;--recursion-method&lt;/code&gt;可以用来指定从库dsn记录。另外，如果从库被停止，将会永远等待，直到从开始同步，并且延迟小于该值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--chunk-time&lt;/code&gt;&lt;br&gt;默认0.5s，即拷贝数据行的时候，为了尽量保证0.5s内拷完一个chunk，动态调整chunk-size的大小，以适应服务器性能的变化。&lt;br&gt;也可以通过另外一个选项&lt;code&gt;--chunk-size&lt;/code&gt;禁止动态调整，即每次固定拷贝 1k 行，如果指定则默认1000行，且比 chunk-time 优先生效&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="Percona-toolkit" scheme="http://seanlook.com/tags/Percona-toolkit/"/>
    
  </entry>
  
  <entry>
    <title>mysql 5.6 原生Online DDL解析</title>
    <link href="http://seanlook.com/2016/05/24/mysql-online-ddl-concept/"/>
    <id>http://seanlook.com/2016/05/24/mysql-online-ddl-concept/</id>
    <published>2016-05-24T08:32:49.000Z</published>
    <updated>2016-05-24T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>做MySQL的都知道，数据库操作里面，DDL操作（比如CREATE,DROP,ALTER等）代价是非常高的，特别是在单表上千万的情况下，加个索引或改个列类型，就有可能堵塞整个表的读写。</p>
<p>然后 mysql 5.6 开始，大家期待的Online DDL出现了，可以实现修改表结构的同时，依然允许DML操作(select,insert,update,delete)。在这个特性出现以前，用的比较多的工具是<code>pt-online-schema-change</code>，比较请参考<a href="http://seanlook.com/2016/05/27/mysql-pt-online-schema-change">pt-online-schema-change使用说明、限制与比较</a>或 <a href="http://www.fromdual.ch/online-ddl_vs_pt-online-schema-change" target="_blank" rel="external">ONLINE DDL VS PT-ONLINE-SCHEMA-CHANGE</a> 。</p>
<h2 id="1-Online-DDL"><a href="#1-Online-DDL" class="headerlink" title="1. Online DDL"></a>1. Online DDL</h2><p>在 MySQL 5.1 （带InnoDB Plugin）和5.5中，有个新特性叫 Fast Index Creation（下称 FIC），就是在添加或者删除二级<strong>索引</strong>的时候，可以不用复制原表。对于之前的版本对于索引的添加删除这类DDL操作，MySQL数据库的操作过程为如下：</p>
<ol>
<li>首先新建Temp table，表结构是 ALTAR TABLE 新定义的结构</li>
<li>然后把原表中数据导入到这个Temp table</li>
<li>删除原表</li>
<li>最后把临时表rename为原来的表名</li>
</ol>
<p>为了保持数据的一致性，中间复制数据（Copy Table）全程锁表只读，如果有写请求进来将无法提供服务，连接数爆张。</p>
<p>引入FIC之后，创建二级索引时会对原表加上一个S锁，创建过程不需要重建表（no-rebuild）；删除InnoDB二级索引只需要更新内部视图，并标记这个索引的空间可用，去掉数据库元数据上该索引的定义即可。这个过程也只允许读操作，不能写入，但大大加快了修改索引的速度（不含主键索引，InnoDB IOT的特性决定了修改主键依然需要 Copy Table ）。</p>
<p>FIC只对索引的创建删除有效，MySQL 5.6 Online DDL把这种特性扩展到了添加列、删除列、修改列类型、列重命名、设置默认值等等，实际效果要看所使用的选项和操作类别来定。</p>
<h3 id="1-1-Online-DDL选项"><a href="#1-1-Online-DDL选项" class="headerlink" title="1.1 Online DDL选项"></a>1.1 Online DDL选项</h3><p>MySQL 在线DDL分为 <code>INPLACE</code> 和 <code>COPY</code> 两种方式，通过在ALTER语句的ALGORITHM参数指定。</p>
<ul>
<li><code>ALGORITHM=INPLACE</code>，可以避免重建表带来的IO和CPU消耗，保证ddl期间依然有良好的性能和并发。</li>
<li><code>ALGORITHM=COPY</code>，需要拷贝原始表，所以不允许并发DML写操作，可读。这种copy方式的效率还是不如 inplace ，因为前者需要记录undo和redo log，而且因为临时占用buffer pool引起短时间内性能受影响。</li>
</ul>
<p>上面只是 Online DDL 内部的实现方式，此外还有 LOCK 选项控制是否锁表，根据不同的DDL操作类型有不同的表现：默认mysql尽可能不去锁表，但是像修改主键这样的昂贵操作不得不选择锁表。</p>
<ul>
<li><code>LOCK=NONE</code>，即DDL期间允许并发读写涉及的表，比如为了保证 ALTER TABLE 时不影响用户注册或支付，可以明确指定，好处是如果不幸该 alter语句不支持对该表的继续写入，则会提示失败，而不会直接发到库上执行。<code>ALGORITHM=COPY</code>默认LOCK级别</li>
<li><code>LOCK=SHARED</code>，即DDL期间表上的写操作会被阻塞，但不影响读取。</li>
<li><code>LOCK=DEFAULT</code>，让mysql自己去判断lock的模式，原则是mysql尽可能不去锁表</li>
<li><code>LOCK=EXCLUSIVE</code>，即DDL期间该表不可用，堵塞任何读写请求。如果你想alter操作在最短的时间内完成，或者表短时间内不可用能接受，可以手动指定。</li>
</ul>
<p>但是有一点需要说明，无论任何模式下，online ddl开始之前都需要一个短时间排它锁(exclusive)来准备环境，所以alter命令发出后，会首先等待该表上的其它操作完成，在alter命令之后的请求会出现等待<code>waiting meta data lock</code>。同样在ddl结束之前，也要等待alter期间所有的事务完成，也会堵塞一小段时间。所以尽量在ALTER TABLE之前确保没有大事务在执行，否则一样出现连环锁表。</p>
<h3 id="1-2-考虑不同的DDL操作类别"><a href="#1-2-考虑不同的DDL操作类别" class="headerlink" title="1.2 考虑不同的DDL操作类别"></a>1.2 考虑不同的DDL操作类别</h3><p>从上面的介绍可以看出，不是5.6支持在线ddl就可以随心所欲的alter table，锁不锁表要看情况：</p>
<a id="more"></a>
<p>提示：下表根据官方 <a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-create-index-overview.html" target="_blank" rel="external">Summary of Online Status for DDL Operations</a> 整理挑选的常用操作。</p>
<ul>
<li><em>In-Place</em>为Yes是优选项，说明该操作支持INPLACE </li>
<li><em>Copies Table</em>为No是优选项，因为为Yes需要重建表。大部分情况与In-Place是相反的</li>
<li><em>Allows Concurrent DML?</em>为Yes是优选项，说明ddl期间表依然可读写，可以指定 LOCK=NONE（如果操作允许的话mysql自动就是NONE）</li>
<li><em>Allows Concurrent Query?</em>默认所有DDL操作期间都允许查询请求，放在这只是便于参考</li>
<li><em>Notes</em>会对前面几列Yes/No带<code>*</code>号的限制说明</li>
</ul>
<table>
<thead>
<tr>
<th>Operation</th>
<th>In-Place?</th>
<th>Copies Table?</th>
<th>Allows Concurrent DML?</th>
<th>Allows Concurrent Query?</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加索引</td>
<td>Yes*</td>
<td>No*</td>
<td>Yes</td>
<td>Yes</td>
<td>对全文索引的一些限制</td>
</tr>
<tr>
<td>删除索引</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>仅修改表的元数据</td>
</tr>
<tr>
<td>OPTIMIZE TABLE</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>从 5.6.17开始使用ALGORITHM=INPLACE，当然如果指定了<code>old_alter_table=1</code>或mysqld启动带<code>--skip-new</code>则将还是COPY模式。如果表上有全文索引只支持COPY</td>
</tr>
<tr>
<td>对一列设置默认值</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>仅修改表的元数据</td>
</tr>
<tr>
<td>对一列修改auto-increment 的值</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>仅修改表的元数据</td>
</tr>
<tr>
<td>添加 foreign key constraint</td>
<td>Yes*</td>
<td>No*</td>
<td>Yes</td>
<td>Yes</td>
<td>为了避免拷贝表，在约束创建时会禁用foreign_key_checks</td>
</tr>
<tr>
<td>删除 foreign key constraint</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>foreign_key_checks 不影响</td>
</tr>
<tr>
<td>改变列名</td>
<td>Yes*</td>
<td>No*</td>
<td>Yes*</td>
<td>Yes</td>
<td>为了允许DML并发, 如果保持相同数据类型，仅改变列名</td>
</tr>
<tr>
<td>添加列</td>
<td>Yes*</td>
<td>Yes*</td>
<td>Yes*</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作。当添加列是auto-increment，不允许DML并发</td>
</tr>
<tr>
<td>删除列</td>
<td>Yes</td>
<td>Yes*</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>修改列数据类型</td>
<td>No</td>
<td>Yes*</td>
<td>No</td>
<td>Yes</td>
<td>修改类型或添加长度，都会拷贝表，而且不允许更新操作</td>
</tr>
<tr>
<td>更改列顺序</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>修改ROW_FORMAT <br> 和KEY_BLOCK_SIZE</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>设置列属性NULL<br>或NOT NULL</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作</td>
</tr>
<tr>
<td>添加主键</td>
<td>Yes*</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>尽管允许 ALGORITHM=INPLACE ，但数据大幅重组，所以它仍然是一项昂贵的操作。<br> 如果列定义必须转化NOT NULL，则不允许INPLACE</td>
</tr>
<tr>
<td>删除并添加主键</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>在同一个 ALTER TABLE 语句删除就主键、添加新主键时，才允许inplace；数据大幅重组,所以它仍然是一项昂贵的操作。</td>
</tr>
<tr>
<td>删除主键</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>不允许并发DML，要拷贝表，而且如果没有在同一 ATLER TABLE 语句里同时添加主键则会收到限制</td>
</tr>
<tr>
<td>变更表字符集</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>如果新的字符集编码不同，重建表</td>
</tr>
</tbody>
</table>
<p>从表看出，In-Place为No，DML一定是No，说明<code>ALGORITHM=COPY</code>一定会发生拷贝表，只读。但<code>ALGORITHM=INPLACEE</code>也要可能发生拷贝表，但可以并发DML:</p>
<ul>
<li>添加、删除列，改变列顺序</li>
<li>添加或删除主键</li>
<li>改变行格式ROW_FORMAT和压缩块大小KEY_BLOCK_SIZE </li>
<li>改变列NULL或NOT NULL</li>
<li>优化表OPTIMIZE TABLE</li>
<li>强制 rebuild 该表</li>
</ul>
<p>不允许并发DML的情况有：修改列数据类型、删除主键、变更表字符集，即这些类型操作ddl是不能online的。</p>
<p>另外，更改主键索引与普通索引处理方式是不一样的，主键即聚集索引，体现了表数据在物理磁盘上的排列，包含了数据行本身，需要拷贝表；而普通索引通过包含主键列来定位数据，所以普通索引的创建只需要一次扫描主键即可，而且是在已有数据的表上建立二级索引，更紧凑，将来查询效率更高。</p>
<p>修改主键也就意味着要重建所有的普通索引。删除二级索引更简单，修改InnoDB系统表信息和数据字典，标记该所以不存在，标记所占用的表空间可以被新索引或数据行重新利用。</p>
<h3 id="1-3-在线DDL的限制"><a href="#1-3-在线DDL的限制" class="headerlink" title="1.3 在线DDL的限制"></a>1.3 在线DDL的限制</h3><ul>
<li>在alter table时，如果涉及到table copy操作，要确保<code>datadir</code>目录有足够的磁盘空间，能够放的下整张表，因为拷贝表的的操作是直接在数据目录下进行的。</li>
<li>添加索引无需table copy，但要确保<code>tmpdir</code>目录足够存下索引一列的数据（如果是组合索引，当前临时排序文件一合并到原表上就会删除）</li>
<li>在主从环境下，主库执行alter命令在完成之前是不会进入binlog记录事件，如果允许dml操作则不影响记录时间，所以期间不会导致延迟。然而，由于从库是单个SQL Thread按顺序应用relay log，轮到ALTER语句时直到执行完才能下一条，所以从库会在master ddl完成后开始产生延迟。（pt-osc可以控制延迟时间，所以这种场景下它更合适）</li>
<li>During each online DDL ALTER TABLE statement, regardless of the LOCK clause, there are brief periods at the beginning and end requiring an exclusive lock on the table (the same kind of lock specified by the LOCK=EXCLUSIVE clause). Thus, an online DDL operation might wait before starting if there is a long-running transaction performing inserts, updates, deletes, or SELECT … FOR UPDATE on that table; and an online DDL operation might wait before finishing if a similar long-running transaction was started while the ALTER TABLE was in progress.</li>
<li>在执行一个允许并发DML在线 ALTER TABLE时，结束之前这个线程会应用 <em>online log</em> 记录的增量修改，而这些修改是其它thread里产生的，所以有可能会遇到重复键值错误<em>(ERROR 1062 (23000): Duplicate entry)</em>。</li>
<li>涉及到table copy时，目前还没有机制限制暂停ddl，或者限制IO阀值<br>在MySQL 5.7.6开始能够通过 performance_schema 观察alter table的进度</li>
<li>一般来说，建议把多个alter语句合并在一起进行，避免多次table rebuild带来的消耗。但是也要注意分组，比如需要copy table和只需inplace就能完成的，应该分两个alter语句。</li>
<li>如果DDL执行时间很长，期间又产生了大量的dml操作，以至于超过了<code>innodb_online_alter_log_max_size</code>变量所指定的大小，会引起<em>DB_ONLINE_LOG_TOO_BIG </em>错误。默认为 128M，特别对于需要拷贝大表的alter操作，考虑临时加大该值，以此获得更大的日志缓存空间</li>
<li>执行完 <code>ALTER TABLE</code> 之后，最好 <code>ANALYZE TABLE tb1</code> 去更新索引统计信息</li>
</ul>
<h2 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2. 实现过程"></a>2. 实现过程</h2><p>online ddl主要包括3个阶段，prepare阶段，ddl执行阶段，commit阶段，rebuild方式比no-rebuild方式实质多了一个ddl执行阶段，prepare阶段和commit阶段类似。下面将主要介绍ddl执行过程中三个阶段的流程。</p>
<ul>
<li><p><strong>Prepare阶段</strong>:  </p>
<ol>
<li>创建新的临时frm文件(与InnoDB无关)</li>
<li>持有EXCLUSIVE-MDL锁，禁止读写</li>
<li>根据alter类型，确定执行方式(copy,online-rebuild,online-norebuild)<br>假如是Add Index，则选择online-norebuild即INPLACE方式</li>
<li>更新数据字典的内存对象</li>
<li>分配row_log对象记录增量(仅rebuild类型需要)</li>
<li>生成新的临时ibd文件(仅rebuild类型需要)</li>
</ol>
</li>
<li><p><strong>ddl执行阶段</strong>:  </p>
<ol>
<li>降级EXCLUSIVE-MDL锁，允许读写</li>
<li>扫描old_table的聚集索引每一条记录rec</li>
<li>遍历新表的聚集索引和二级索引，逐一处理</li>
<li>根据rec构造对应的索引项</li>
<li>将构造索引项插入sort_buffer块排序</li>
<li>将sort_buffer块更新到新的索引上</li>
<li>记录ddl执行过程中产生的增量(仅rebuild类型需要)</li>
<li>重放row_log中的操作到新索引上(no-rebuild数据是在原表上更新的)</li>
<li>重放row_log间产生dml操作append到row_log最后一个Block</li>
</ol>
</li>
</ul>
<ul>
<li><p><strong>commit阶段</strong>:  </p>
<ol>
<li>当前Block为row_log最后一个时，禁止读写，升级到EXCLUSIVE-MDL锁</li>
<li>重做row_log中最后一部分增量</li>
<li>更新innodb的数据字典表</li>
<li>提交事务(刷事务的redo日志)</li>
<li>修改统计信息</li>
<li>rename临时idb文件，frm文件</li>
<li>变更完成</li>
</ol>
</li>
</ul>
<p>这有一直导图挺直观的：<a href="http://blog.itpub.net/22664653/viewspace-2056953" target="_blank" rel="external">http://blog.itpub.net/22664653/viewspace-2056953</a> 。<br><strong>添加列</strong> 时由于需要copy table，row_log会重放到新表上（临时ibd文件），直到最后一个block，锁住原表禁止更新。</p>
<p>row_log记录了ddl变更过程中新产生的dml操作，并在ddl执行的最后将其应用到新的表中，保证数据完整性</p>
<h2 id="3-对比实验"><a href="#3-对比实验" class="headerlink" title="3. 对比实验"></a>3. 对比实验</h2><h3 id="3-1-添加二级索引"><a href="#3-1-添加二级索引" class="headerlink" title="3.1 添加二级索引"></a>3.1 添加二级索引</h3><p>我这里使用sysbench产生的表测试（500w数据）：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select version();</span></div><div class="line">+------------+</div><div class="line"><span class="section">| version()  |</span></div><div class="line">+------------+</div><div class="line"><span class="section">| 5.6.30-log |</span></div><div class="line">+------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; show create table sbtest1;</div><div class="line">CREATE TABLE <span class="code">`sbtest1`</span> (</div><div class="line"><span class="code">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span></div><div class="line"><span class="code">  `k` int(10) unsigned NOT NULL DEFAULT '0',</span></div><div class="line"><span class="code">  `c` char(120) COLLATE utf8_bin NOT NULL DEFAULT '',</span></div><div class="line"><span class="code">  `pad` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',</span></div><div class="line"><span class="code">  PRIMARY KEY (`id`),</span></div><div class="line"><span class="code">  KEY `k_1` (`k`)</span></div><div class="line">) ENGINE=InnoDB AUTO<span class="emphasis">_INCREMENT=5000001 DEFAULT CHARSET=utf8 COLLATE=utf8_</span>bin MAX<span class="emphasis">_ROWS=1000000</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="section">mysql&gt; show variables like "old_alter_table";</span></div><div class="line">+-----------------+-------+</div><div class="line"><span class="section">| Variable_name   | Value |</span></div><div class="line">+-----------------+-------+</div><div class="line"><span class="section">| old_alter_table | OFF   |</span></div><div class="line">+-----------------+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><strong>旧模式</strong>下，创建删除普通索引：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">*<span class="strong">*SESSION1:*</span>*</div><div class="line">mysql&gt; set old<span class="emphasis">_alter_</span>table=1;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 drop index idx<span class="emphasis">_k_</span>1;</div><div class="line">Query OK, 5000000 rows affected (44.79 sec)</div><div class="line">Records: 5000000  Duplicates: 0  Warnings: 0</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 add index idx<span class="emphasis">_k_</span>1(k);</div><div class="line">Query OK, 5000000 rows affected (1 min 11.29 sec)</div><div class="line">Records: 5000000  Duplicates: 0  Warnings: 0</div><div class="line"></div><div class="line"></div><div class="line">*<span class="strong">*SESSION2:*</span>*</div><div class="line"><span class="section">mysql&gt; select * from sbtest1 limit 1;</span></div><div class="line">+----+---------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line"><span class="section">| id | k       | c                                                                                                                       | pad                                                         |</span></div><div class="line">+----+---------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line"><span class="section">|  1 | 2481886 | 08566691963-88624...106334-50535565977 | 63188288836-9235114...351-49282961843 |</span></div><div class="line">+----+---------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; update sbtest1 set k=2481885 where id=1;</div><div class="line">Query OK, 1 row affected (45.16 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line"></div><div class="line"></div><div class="line">*<span class="strong">*SESSION3:*</span>*</div><div class="line"><span class="section">mysql&gt; show processlist;</span></div><div class="line">+--------+-----------------+-----------+------------+---------+--------+---------------------------------+-----------------------------------------+</div><div class="line"><span class="section">| Id     | User            | Host      | db         | Command | Time   | State                           | Info                                    |</span></div><div class="line">+--------+-----------------+-----------+------------+---------+--------+---------------------------------+-----------------------------------------+</div><div class="line">| 118652 | root            | localhost | confluence | Query   |     19 | copy to tmp table               | alter table sbtest1 add index k<span class="emphasis">_1(k)    |</span></div><div class="line">| 118666 | root            | localhost | confluence | Query   |      3 | Waiting for table metadata lock | update sbtest1 set k=2481885 where id=1 |</div><div class="line">| 118847 | root            | localhost | NULL       | Query   |      0 | init                            | show processlist                        |</div><div class="line">+--------+-----------------+-----------+------------+---------+--------+---------------------------------+-----------------------------------------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"></div><div class="line">同时在datadir目录下可以看到</div><div class="line">-rw-rw---- 1 mysql mysql 8.5K May 23 21:24 sbtest1.frm</div><div class="line">-rw-rw---- 1 mysql mysql 1.2G May 23 21:24 sbtest1.ibd</div><div class="line">-rw-rw---- 1 mysql mysql 8.5K May 23 20:48 #sql-1c6a<span class="emphasis">_1cf7c.frm</span></div><div class="line">-rw-rw---- 1 mysql mysql 638M May 23 20:48 #sql-1c6a_1cf7c.ibd</div></pre></td></tr></table></figure>
<p>传统ddl方式有 <em>copy to tmp table</em> 过程，dml更新操作期间被堵住45s：<code>Waiting for table metadata lock</code>。</p>
<p>下面改成<strong>Online DDL方式</strong><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; <span class="built_in">set</span> old_alter_table=<span class="number">0</span>;</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 drop index k_1;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line">索引秒删</div><div class="line"></div><div class="line">mysql&gt; alter table sbtest1 add index k_1(k);</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">13.99</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; update sbtest1 <span class="built_in">set</span> k=<span class="number">2481887</span> <span class="keyword">where</span> id=<span class="number">1</span>;</div><div class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</div><div class="line">Rows matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">**SESSION3**</div><div class="line">mysql&gt; show processlist;</div><div class="line">+--------+-----------------+-----------+------------+---------+--------+------------------------+--------------------------------------+</div><div class="line">| <span class="type">Id</span>     | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span>   | <span class="type">State</span>                  | <span class="type">Info</span>                                 |</div><div class="line"><span class="type">+--------+-----------------+-----------+------------+---------+--------+------------------------+--------------------------------------+</span></div><div class="line">| 118652 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |     <span class="type">10</span> | <span class="type">altering</span> table         | <span class="type">alter</span> table sbtest1 add index k_1(k) |</div><div class="line"><span class="type">| 118666</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Sleep</span>   |      <span class="type">9</span> |                        <span class="type">| NULL</span>                                 |</div><div class="line"><span class="type">| 118847</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |      <span class="type">0</span> | <span class="type">init</span>                   | <span class="type">show</span> processlist                     |</div><div class="line"><span class="type">+--------+-----------------+-----------+------------+---------+--------+------------------------+--------------------------------------+</span></div><div class="line">4 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<p>添加普通索引，并未出现阻塞update操作，而且速度更快。从 rows affected 可以看出有没有copy table。</p>
<p>但如果在alter之前有大事务在执行，<strong>会阻塞</strong>ddl以及后续的所有请求：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; select * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">before</span> alter';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">4.36</span> sec)</div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; alter table sbtest1 add index k_1(k);</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">16.28</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION3**</div><div class="line">mysql&gt; select * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">after</span> alter execution but not complete';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">5.89</span> sec)</div><div class="line"></div><div class="line">**SESSION4**</div><div class="line">mysql&gt; show processlist;</div><div class="line">+----+-----------------+-----------+------------+---------+------+---------------------------------+------------------------------------------------------------------------------------+</div><div class="line">| <span class="type">Id</span> | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span> | <span class="type">State</span>                           | <span class="type">Info</span>                                                                               |</div><div class="line"><span class="type">+----+-----------------+-----------+------------+---------+------+---------------------------------+------------------------------------------------------------------------------------+</span></div><div class="line">|  5 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">3</span> | <span class="type">Sending</span> data                    | <span class="type">select</span> * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">before</span> alter'                           |</div><div class="line"><span class="type">|  7</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |    <span class="type">0</span> | <span class="type">init</span>                            | <span class="type">show</span> processlist                                                                   |</div><div class="line"><span class="type">| 13</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">2</span> | <span class="type">Waiting</span> <span class="keyword">for</span> table metadata lock | <span class="type">alter</span> table sbtest1 add index k_1(k)                                               |</div><div class="line"><span class="type">| 14</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">1</span> | <span class="type">Waiting</span> <span class="keyword">for</span> table metadata lock | <span class="type">select</span> * from sbtest1 <span class="keyword">where</span> c='long select <span class="built_in">after</span> alter execution but not complete' |</div><div class="line"><span class="type">+----+-----------------+-----------+------------+---------+------+---------------------------------+------------------------------------------------------------------------------------+</span></div><div class="line">5 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<h3 id="3-2-添加列示例"><a href="#3-2-添加列示例" class="headerlink" title="3.2 添加列示例"></a>3.2 添加列示例</h3><p>添加新列是ddl操作里面相对较多的一类操作。从上文表中可以看到<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; ALTER TABLE `sbtest2` \</div><div class="line">       ADD COLUMN `f_new_col1` int(<span class="number">11</span>) NULL DEFAULT <span class="number">0</span>, \</div><div class="line">       ADD COLUMN `f_new_col2` varchar(<span class="number">32</span>) NULL DEFAULT '' AFTER `f_new_col1`;</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">1</span> min <span class="number">57.86</span> sec)</div><div class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; update sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>';</div><div class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">4.41</span> sec)</div><div class="line">Rows matched: <span class="number">0</span>  Changed: <span class="number">0</span>  Warnings: <span class="number">0</span></div><div class="line"></div><div class="line">**SESSION3**</div><div class="line">mysql&gt; select * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">3.44</span> sec)</div><div class="line"></div><div class="line">**SESSION4**</div><div class="line">mysql&gt; show processlist;</div><div class="line">+-----+-----------------+-----------+------------+---------+------+---------------------------+------------------------------------------------------------------------------------------------------+</div><div class="line">| <span class="type">Id</span>  | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span> | <span class="type">State</span>                     | <span class="type">Info</span>                                                                                                 |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------+------------------------------------------------------------------------------------------------------+</span></div><div class="line">|   5 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">4</span> | <span class="type">altering</span> table            | <span class="type">ALTER</span> TABLE `sbtest2`  ADD COLUMN `f_new_col1` int(<span class="number">11</span>) NULL DEFAULT <span class="number">0</span>, ADD COLUMN `f_new_col2` varch |</div><div class="line"><span class="type">|   7</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |    <span class="type">0</span> | <span class="type">init</span>                      | <span class="type">show</span> processlist                                                                                     |</div><div class="line"><span class="type">| 161</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">2</span> | <span class="type">Searching</span> rows <span class="keyword">for</span> update | <span class="type">update</span> sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>'                             |</div><div class="line"><span class="type">| 187</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">1</span> | <span class="type">Sending</span> data              | <span class="type">select</span> * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start'                                    |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------+------------------------------------------------------------------------------------------------------+</span></div><div class="line">5 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<p>看到，默认不加 ALGORITHM=INPLACE 就已经允许ddl期间并发DML操作。但是会有一个小临时文件产生：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-rw-rw----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 8<span class="selector-class">.6K</span> <span class="selector-tag">May</span> 23 21<span class="selector-pseudo">:42</span> <span class="selector-id">#sql-7055_5</span><span class="selector-class">.frm</span></div><div class="line"><span class="selector-tag">-rw-rw----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 112<span class="selector-tag">K</span> <span class="selector-tag">May</span> 23 21<span class="selector-pseudo">:42</span> <span class="selector-id">#sql-ib21-16847116</span><span class="selector-class">.ibd</span></div></pre></td></tr></table></figure></p>
<p>当指定copy时，就会锁表了（一般你不想这样做）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`sbtest2`</span> </div><div class="line">4DROIP <span class="keyword">COLUMN</span> <span class="string">`f_new_col1`</span>, algorithm=copy;</div></pre></td></tr></table></figure></p>
<h3 id="3-3-修改字段类型"><a href="#3-3-修改字段类型" class="headerlink" title="3.3 修改字段类型"></a>3.3 修改字段类型</h3><p>修改列类型与添加新列不一样，修改类型需要rebuild整个表：<br>(select ok, update waiting)<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">**SESSION1**</div><div class="line">mysql&gt; ALTER TABLE sbtest2 </div><div class="line">4   CHANGE f_new_col2 f_new_col2 varchar(<span class="number">50</span>) NULL DEFAULT '', algorithm=inplace ;</div><div class="line">ERROR <span class="number">1846</span> (<span class="number">0</span>A000): ALGORITHM=INPLACE is not supported. Reason: Cannot <span class="built_in">change</span> column type INPLACE. Try ALGORITHM=COPY.</div><div class="line">不支持INPLACE</div><div class="line"></div><div class="line">mysql&gt; ALTER TABLE sbtest2 </div><div class="line">4   CHANGE f_new_col2 f_new_col2 varchar(<span class="number">50</span>) NULL DEFAULT '';</div><div class="line"></div><div class="line">**SESSION2**</div><div class="line">mysql&gt; update sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>';</div><div class="line"></div><div class="line">mysql&gt; select * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start';</div><div class="line">Empty <span class="built_in">set</span> (<span class="number">3.79</span> sec)</div><div class="line"></div><div class="line">mysql&gt; show processlist;</div><div class="line">+-----+-----------------+-----------+------------+---------+------+---------------------------------+----------------------------------------------------------------------------------+</div><div class="line">| <span class="type">Id</span>  | <span class="type">User</span>            | <span class="type">Host</span>      | <span class="type">db</span>         | <span class="type">Command</span> | <span class="type">Time</span> | <span class="type">State</span>                           | <span class="type">Info</span>                                                                             |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------------+----------------------------------------------------------------------------------+</span></div><div class="line">|   5 | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">5</span> | <span class="type">copy</span> to tmp table               | <span class="type">ALTER</span> TABLE sbtest2 </div><div class="line">   CHANGE f_new_col2 f_new_col2 varchar(<span class="number">50</span>) NULL DEFAULT '' |</div><div class="line"><span class="type">|   7</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">NULL</span>       | <span class="type">Query</span>   |    <span class="type">0</span> | <span class="type">init</span>                            | <span class="type">show</span> processlist                                                                 |</div><div class="line"><span class="type">| 161</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">4</span> | <span class="type">Waiting</span> <span class="keyword">for</span> table metadata lock | <span class="type">update</span> sbtest2 <span class="built_in">set</span> c=<span class="string">"update when add colomun ddl start"</span> <span class="keyword">where</span> c='<span class="number">33333</span>'         |</div><div class="line"><span class="type">| 187</span> | <span class="type">root</span>            | <span class="type">localhost</span> | <span class="type">confluence</span> | <span class="type">Query</span>   |    <span class="type">3</span> | <span class="type">Sending</span> data                    | <span class="type">select</span> * from sbtest2 <span class="keyword">where</span> c='select when add colomun ddl start'                |</div><div class="line"><span class="type">+-----+-----------------+-----------+------------+---------+------+---------------------------------+----------------------------------------------------------------------------------+</span></div><div class="line">5 rows <span class="built_in">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p>
<h3 id="3-4-Waiting-for-table-metadata-lock"><a href="#3-4-Waiting-for-table-metadata-lock" class="headerlink" title="3.4 Waiting for table metadata lock"></a>3.4 Waiting for table metadata lock</h3><p>Online DDL看起来很美好，实验测试也正如预期，但几次在生产环境修改索引时（5000w的表），还是无法避免出现<strong>大量 *</strong>Waiting for table metadata lock* 锁等待，线程数持续增加并告警，导致长达十多分钟不可写。后来发现原来是版本升级的问题导致的，见<a href="">这里</a>。关于metadata lock介绍参考[这篇文章]。</p>
<h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul>
<li><a href="http://www.cnblogs.com/cchust/p/4639397.html" target="_blank" rel="external">MySQL online ddl原理</a></li>
<li><a href="http://www.cnblogs.com/gomysql/p/3776192.html" target="_blank" rel="external">MySQL 5.6 Online DDL</a></li>
<li><a href="http://mysqllover.com/?p=547" target="_blank" rel="external">[MySQL 5.6] MySQL 5.6 online ddl 使用、测试及关键函数栈</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-create-index-overview.html" target="_blank" rel="external">MySQL Manual Overview of Online DDL</a></li>
<li><a href="http://hedengcheng.com/?p=405" target="_blank" rel="external">MySQL InnoDB Add Index实现调研(一：Inplace Add Index)</a></li>
<li><a href="http://tencentdba.com/blog/mysql%E5%9C%A8%E7%BA%BF%E5%8A%A0%E5%AD%97%E6%AE%B5%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/" target="_blank" rel="external">tencentDBA 实现的在线加字段</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/24/mysql-online-ddl-concept/">http://seanlook.com/2016/05/24/mysql-online-ddl-concept/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做MySQL的都知道，数据库操作里面，DDL操作（比如CREATE,DROP,ALTER等）代价是非常高的，特别是在单表上千万的情况下，加个索引或改个列类型，就有可能堵塞整个表的读写。&lt;/p&gt;
&lt;p&gt;然后 mysql 5.6 开始，大家期待的Online DDL出现了，可以实现修改表结构的同时，依然允许DML操作(select,insert,update,delete)。在这个特性出现以前，用的比较多的工具是&lt;code&gt;pt-online-schema-change&lt;/code&gt;，比较请参考&lt;a href=&quot;http://seanlook.com/2016/05/27/mysql-pt-online-schema-change&quot;&gt;pt-online-schema-change使用说明、限制与比较&lt;/a&gt;或 &lt;a href=&quot;http://www.fromdual.ch/online-ddl_vs_pt-online-schema-change&quot;&gt;ONLINE DDL VS PT-ONLINE-SCHEMA-CHANGE&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;1-Online-DDL&quot;&gt;&lt;a href=&quot;#1-Online-DDL&quot; class=&quot;headerlink&quot; title=&quot;1. Online DDL&quot;&gt;&lt;/a&gt;1. Online DDL&lt;/h2&gt;&lt;p&gt;在 MySQL 5.1 （带InnoDB Plugin）和5.5中，有个新特性叫 Fast Index Creation（下称 FIC），就是在添加或者删除二级&lt;strong&gt;索引&lt;/strong&gt;的时候，可以不用复制原表。对于之前的版本对于索引的添加删除这类DDL操作，MySQL数据库的操作过程为如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先新建Temp table，表结构是 ALTAR TABLE 新定义的结构&lt;/li&gt;
&lt;li&gt;然后把原表中数据导入到这个Temp table&lt;/li&gt;
&lt;li&gt;删除原表&lt;/li&gt;
&lt;li&gt;最后把临时表rename为原来的表名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了保持数据的一致性，中间复制数据（Copy Table）全程锁表只读，如果有写请求进来将无法提供服务，连接数爆张。&lt;/p&gt;
&lt;p&gt;引入FIC之后，创建二级索引时会对原表加上一个S锁，创建过程不需要重建表（no-rebuild）；删除InnoDB二级索引只需要更新内部视图，并标记这个索引的空间可用，去掉数据库元数据上该索引的定义即可。这个过程也只允许读操作，不能写入，但大大加快了修改索引的速度（不含主键索引，InnoDB IOT的特性决定了修改主键依然需要 Copy Table ）。&lt;/p&gt;
&lt;p&gt;FIC只对索引的创建删除有效，MySQL 5.6 Online DDL把这种特性扩展到了添加列、删除列、修改列类型、列重命名、设置默认值等等，实际效果要看所使用的选项和操作类别来定。&lt;/p&gt;
&lt;h3 id=&quot;1-1-Online-DDL选项&quot;&gt;&lt;a href=&quot;#1-1-Online-DDL选项&quot; class=&quot;headerlink&quot; title=&quot;1.1 Online DDL选项&quot;&gt;&lt;/a&gt;1.1 Online DDL选项&lt;/h3&gt;&lt;p&gt;MySQL 在线DDL分为 &lt;code&gt;INPLACE&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 两种方式，通过在ALTER语句的ALGORITHM参数指定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALGORITHM=INPLACE&lt;/code&gt;，可以避免重建表带来的IO和CPU消耗，保证ddl期间依然有良好的性能和并发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ALGORITHM=COPY&lt;/code&gt;，需要拷贝原始表，所以不允许并发DML写操作，可读。这种copy方式的效率还是不如 inplace ，因为前者需要记录undo和redo log，而且因为临时占用buffer pool引起短时间内性能受影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面只是 Online DDL 内部的实现方式，此外还有 LOCK 选项控制是否锁表，根据不同的DDL操作类型有不同的表现：默认mysql尽可能不去锁表，但是像修改主键这样的昂贵操作不得不选择锁表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LOCK=NONE&lt;/code&gt;，即DDL期间允许并发读写涉及的表，比如为了保证 ALTER TABLE 时不影响用户注册或支付，可以明确指定，好处是如果不幸该 alter语句不支持对该表的继续写入，则会提示失败，而不会直接发到库上执行。&lt;code&gt;ALGORITHM=COPY&lt;/code&gt;默认LOCK级别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCK=SHARED&lt;/code&gt;，即DDL期间表上的写操作会被阻塞，但不影响读取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCK=DEFAULT&lt;/code&gt;，让mysql自己去判断lock的模式，原则是mysql尽可能不去锁表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCK=EXCLUSIVE&lt;/code&gt;，即DDL期间该表不可用，堵塞任何读写请求。如果你想alter操作在最短的时间内完成，或者表短时间内不可用能接受，可以手动指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是有一点需要说明，无论任何模式下，online ddl开始之前都需要一个短时间排它锁(exclusive)来准备环境，所以alter命令发出后，会首先等待该表上的其它操作完成，在alter命令之后的请求会出现等待&lt;code&gt;waiting meta data lock&lt;/code&gt;。同样在ddl结束之前，也要等待alter期间所有的事务完成，也会堵塞一小段时间。所以尽量在ALTER TABLE之前确保没有大事务在执行，否则一样出现连环锁表。&lt;/p&gt;
&lt;h3 id=&quot;1-2-考虑不同的DDL操作类别&quot;&gt;&lt;a href=&quot;#1-2-考虑不同的DDL操作类别&quot; class=&quot;headerlink&quot; title=&quot;1.2 考虑不同的DDL操作类别&quot;&gt;&lt;/a&gt;1.2 考虑不同的DDL操作类别&lt;/h3&gt;&lt;p&gt;从上面的介绍可以看出，不是5.6支持在线ddl就可以随心所欲的alter table，锁不锁表要看情况：&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="Percona-toolkit" scheme="http://seanlook.com/tags/Percona-toolkit/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB行格式对text/blob大变长字段的影响</title>
    <link href="http://seanlook.com/2016/05/18/mysql-blob-row_format/"/>
    <id>http://seanlook.com/2016/05/18/mysql-blob-row_format/</id>
    <published>2016-05-18T08:32:49.000Z</published>
    <updated>2016-05-18T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在排查现网Text与Blob类型，发现有不少，在《高性能MySQL(第3版)》看到对这两种变长数据类型的处理会涉及到在磁盘上创建临时表，性能开销比较大。于是把影响blob型数据存储方式了解了一下：row_format。<!-- 关于临时表的内容，请参考 --></p>
<h2 id="1-InnoDB的Antelop与Barracuda文件格式"><a href="#1-InnoDB的Antelop与Barracuda文件格式" class="headerlink" title="1. InnoDB的Antelop与Barracuda文件格式"></a>1. InnoDB的Antelop与Barracuda文件格式</h2><p>Innodb存储引擎保存记录，是以行的形式存放的（与之对应的是像Google BigTable这种列数据库）。在InnoDB 1.0.x版本之前，InnoDB 存储引擎提供了 <code>Compact</code> 和 <code>Redundant</code> 两种格式来存放行记录数据，这也是目前使用最多的一种格式。Redundant 格式是为兼容之前版本而保留的。</p>
<p>MySQL 5.1 中的 innodb_plugin 引入了新的<em>文件格式</em>：<code>Barracuda</code>（将以前的<em>行格式</em> compact 和 redundant 合称为<code>Antelope</code>），该文件格式拥有新的两种行格式：<code>compressed</code>和<code>dynamic</code>。</p>
<p>在 MySQL 5.6 版本中，默认还是 Compact 行格式，也是目前使用最多的一种 ROW FORMAT。用户可以通过命令 <code>SHOW TABLE STATUS LIKE&#39;table_name&#39;</code> 来查看当前表使用的行格式，其中 <em>row_format</em> 列表示当前所使用的行记录结构类型。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show variables like "innodb_file_format";</span></div><div class="line">+--------------------+-----------+</div><div class="line"><span class="section">| Variable_name      | Value     |</span></div><div class="line">+--------------------+-----------+</div><div class="line"><span class="section">| innodb_file_format | Barracuda |</span></div><div class="line">+--------------------+-----------+</div><div class="line">1 row in set</div><div class="line"></div><div class="line">mysql&gt; show table status like "tablename%"\G</div><div class="line"><span class="bullet">*************************** </span>1. row ***************************</div><div class="line"><span class="code">           Name: t_rf_compact</span></div><div class="line"><span class="code">         Engine: InnoDB</span></div><div class="line"><span class="code">        Version: 10</span></div><div class="line"><span class="code">     Row_format: Compact</span></div><div class="line"><span class="code">           Rows: 4</span></div><div class="line"><span class="code"> Avg_row_length: 36864</span></div><div class="line"><span class="code">    Data_length: 147456</span></div><div class="line">Max<span class="emphasis">_data_</span>length: 0</div><div class="line"><span class="code">   Index_length: 0</span></div><div class="line"><span class="code">      Data_free: 0</span></div><div class="line"><span class="code"> Auto_increment: 7</span></div><div class="line"><span class="code">    Create_time: 2016-05-14 20:52:58</span></div><div class="line"><span class="code">    Update_time: NULL</span></div><div class="line"><span class="code">     Check_time: NULL</span></div><div class="line"><span class="code">      Collation: utf8_general_ci</span></div><div class="line"><span class="code">       Checksum: NULL</span></div><div class="line"><span class="code"> Create_options: </span></div><div class="line"><span class="code">        Comment: </span></div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>在 msyql 5.7.9 及以后版本，默认行格式由<code>innodb_default_row_format</code>变量决定，它的默认值是<code>DYNAMIC</code>，也可以在 create table 的时候指定<code>ROW_FORMAT=DYNAMIC</code>。</p>
<a id="more"></a>
<p>注意，如果要修改现有表的行模式为<code>compressed</code>或<code>dynamic</code>，必须先将文件格式设置成Barracuda：<code>set global innodb_file_format=Barracuda;</code>，再用<code>ALTER TABLE tablename ROW_FORMAT=COMPRESSED;</code>去修改才能生效，否则修改无效却无提示：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE tablename ROW<span class="emphasis">_FORMAT=COMPRESSED;</span></div><div class="line">Query OK, 0 rows affected</div><div class="line">Records: 0  Duplicates: 0  Warnings: 2</div><div class="line"></div><div class="line">修改失败</div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                                               |</span></div><div class="line">+---------+------+-----------------------------------------------------------------------+</div><div class="line">| Warning | 1478 | InnoDB: ROW<span class="emphasis">_FORMAT=COMPRESSED requires innodb_</span>file<span class="emphasis">_format &gt; Antelope. |</span></div><div class="line">| Warning | 1478 | InnoDB: assuming ROW_FORMAT=COMPACT.                                  |</div><div class="line"><span class="code">+---------+</span>------<span class="code">+-----------------------------------------------------------------------+</span></div><div class="line">2 rows in set</div></pre></td></tr></table></figure>
<h2 id="2-对TEXT-BLOB这类大字段类型的影响"><a href="#2-对TEXT-BLOB这类大字段类型的影响" class="headerlink" title="2. 对TEXT/BLOB这类大字段类型的影响"></a>2. 对TEXT/BLOB这类大字段类型的影响</h2><h3 id="2-1-compact"><a href="#2-1-compact" class="headerlink" title="2.1 compact"></a>2.1 compact</h3><p>在 Antelope 两种行格式下，如果blob列值长度 &lt;= 768 bytes，就不会发生行溢出(page overflow)，内容都在数据页(B-tree Node)；如果列值长度 &gt; 768字节，那么前768字节依然在数据页，而剩余的则放在溢出页(off-page)，如下图：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-compact-768.png" alt=""></p>
<p>上面所讲的讲的blob或变长大字段类型包括blob,text,varchar，其中varchar列值长度大于某数N时也会存溢出页，在latin1字符集下N值可以这样计算：innodb的块大小默认为16kb，由于innodb存储引擎表为索引组织表，树底层的叶子节点为一双向链表，因此每个页中至少应该有两行记录，这就决定了innodb在存储一行数据的时候不能够超过8k，减去其它列值所占字节数，约等于N。</p>
<p>我们知道对于InnoDB来说，内存是极为珍贵的，如果把768字节长度的blob都放在数据页，虽然可以节省部分IO，但相对来说能缓存行数就变少，也就是能缓存的索引值变少了，降低了索引效率。</p>
<h3 id="2-2-dynamic"><a href="#2-2-dynamic" class="headerlink" title="2.2 dynamic"></a>2.2 dynamic</h3><p>Barracuda 的两种行格式对blob采用完全行溢出，即聚集索引记录（数据页）只保留20字节的指针，指向真实存放它的溢出段地址：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-barracuda-20-off-page.png" alt=""></p>
<p>dynamic行格式，列存储是否放到off-page页，主要取决于行大小，它会把行中最长的那一列放到off-page，直到数据页能存放下两行。TEXT/BLOB列 &lt;=40 bytes 时总是存放于数据页。这种方式可以避免compact那样把太多的大列值放到 B-tree Node，因为dynamic格式认为，只要大列值有部分数据放在off-page，那把整个值放入都放入off-page更有效。</p>
<p><strong>compressed</strong> 物理结构上与dynamic类似，但是对表的数据行使用zlib算法进行了压缩存储。在long blob列类型比较多的情况下用，可以降低off-page的使用，减少存储空间（一般40%左右），但要求更高的CPU，buffer pool里面可能会同时存储数据的压缩版和非压缩版，所以也多占用部分内存。这里 <a href="http://dev.mysql.com/doc/refman/5.6/en/innodb-compression-internals.html" target="_blank" rel="external">MySQL 5.6 Manual innodb-compression-internals</a> 讲的十分清楚。 </p>
<p>另外，由于<code>ROW_FORMAT=DYNAMIC</code> 和 <code>ROW_FORMAT=COMPRESSED</code> 是从 <code>ROW_FORMAT=COMPACT</code> 变化来的，所以他们处理 <code>CHAR</code>类型存储的方式和 COMPACT 一样。</p>
<h2 id="3-对blob型字段存取优化"><a href="#3-对blob型字段存取优化" class="headerlink" title="3. 对blob型字段存取优化"></a>3. 对blob型字段存取优化</h2><p>如果一个查询涉及BLOB值，又需要使用临时表——不管它多小——它都会立即在磁盘上创建临时表。这样效率很低，尤其是对小而快的查询，临时表可能是查询中最大的开销。</p>
<p>比如：创建一个带Text字段的compact表：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE <span class="code">`t_rf_compact`</span> (</div><div class="line"><span class="code">  `f_id` int(11) NOT NULL AUTO_INCREMENT,</span></div><div class="line"><span class="code">  `f_char` char(30) DEFAULT NULL,</span></div><div class="line"><span class="code">  `f_varchar` varchar(30) NOT NULL DEFAULT '',</span></div><div class="line"><span class="code">  `f_text` text NOT NULL,</span></div><div class="line"><span class="code">  PRIMARY KEY (`f_id`)</span></div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW<span class="emphasis">_FORMAT=COMPACT;</span></div><div class="line"></div><div class="line">mysql&gt; insert into t<span class="emphasis">_rf_</span>compact(f<span class="emphasis">_char,f_</span>varchar,f<span class="emphasis">_text) values('aa','中中',repeat('b',700));</span></div><div class="line">mysql&gt; insert into t_rf<span class="emphasis">_compact(f_</span>char,f<span class="emphasis">_varchar,f_</span>text) values(<span class="emphasis">'aa'</span>,<span class="emphasis">'文'</span>,repeat(<span class="emphasis">'c'</span>,60000));</div><div class="line">第二条数据会行溢出，前768字节放在Clustered Index数据页，剩余的放扩展存储空间</div><div class="line"></div><div class="line"><span class="section">mysql&gt; explain select t1.f_id from t_rf_compact t1,t_rf_compact t2 where t1.f_id=t2.f_id order by t1.f_id limit 1; </span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+-------------+</div><div class="line"><span class="section">| id | select_type | table | type   | possible_keys | key     | key_len | ref               | rows | Extra       |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+-------------+</div><div class="line">|  1 | SIMPLE      | t1    | index  | PRIMARY       | PRIMARY | 4       | NULL              |    6 | Using index |</div><div class="line"><span class="section">|  1 | SIMPLE      | t2    | eq_ref | PRIMARY       | PRIMARY | 4       | d_ec_crm2.t1.f_id |    1 | Using index |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+-------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"></div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 7     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 36    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select t1.f_id from t_rf_compact t1,t_rf_compact t2 where t1.f_id=t2.f_id order by t1.f_id limit 1;</span></div><div class="line">+------+</div><div class="line"><span class="section">| f_id |</span></div><div class="line">+------+</div><div class="line"><span class="section">|    1 |</span></div><div class="line">+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 7     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 36    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>没有临时表产生，所以磁盘临时表无变化。让它产生临时表：（但不涉及text列）</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; explain select t1.f_id from t_rf_compact t1,t_rf_compact t2 where t1.f_id=t2.f_id order by t2.f_id;</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+----------------------------------------------+</div><div class="line"><span class="section">| id | select_type | table | type   | possible_keys | key     | key_len | ref               | rows | Extra                                        |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+----------------------------------------------+</div><div class="line">|  1 | SIMPLE      | t1    | index  | PRIMARY       | PRIMARY | 4       | NULL              |    6 | Using index; Using temporary; Using filesort |</div><div class="line"><span class="section">|  1 | SIMPLE      | t2    | eq_ref | PRIMARY       | PRIMARY | 4       | d_ec_crm2.t1.f_id |    1 | Using index                                  |</span></div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+-------------------+------+----------------------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select t1.f<span class="emphasis">_id from t_</span>rf<span class="emphasis">_compact t1,t_</span>rf<span class="emphasis">_compact t2 where t1.f_</span>id=t2.f<span class="emphasis">_id order by t2.f_</span>id;</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 7     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 37    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>虽然有<code>Using temporary</code>，但内存临时表还是够用，磁盘临时表还是无变化。返回TEXT列（也会使用临时表排序）：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select t1.f<span class="emphasis">_text from t_</span>rf<span class="emphasis">_compact t1,t_</span>rf<span class="emphasis">_compact t2 where t1.f_</span>id=t2.f<span class="emphasis">_id order by t2.f_</span>id;</div><div class="line"><span class="section">mysql&gt; show status like "%tmp%tables";</span></div><div class="line">+-------------------------+-------+</div><div class="line"><span class="section">| Variable_name           | Value |</span></div><div class="line">+-------------------------+-------+</div><div class="line">| Created<span class="emphasis">_tmp_</span>disk<span class="emphasis">_tables | 8     |</span></div><div class="line">| Created_tmp<span class="emphasis">_tables      | 38    |</span></div><div class="line">+-------------------------+-------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p><code>Created_tmp_disk_tables</code>磁盘临时表有增加，与上面结论相符：只有有TEXT/BLOB列参与，如果用到临时表，不管它多小，都会创建在磁盘上，从而带来性能消耗。</p>
<p>注：磁盘临时表存储引擎一定是 MyISAM，与<code>select @@default_tmp_storage_engine;</code>（5.6.3开始）看到的<em>InnoDB</em>无关，它是控制<em>CREATE TEMPORARY TABLE</em>时的默认引擎。在 5.7.5 开始<code>internal_tmp_disk_storage_engine</code>选项可以定义磁盘临时表的引擎类型。关于临时表与内存表可以参考 <a href="http://imysql.com/2015/07/11/mysql-faq-how-using-temp-table.shtml" target="_blank" rel="external">[MySQL FAQ]系列 — 什么情况下会用到临时表 -老叶</a> 。</p>
<p>有两种办法来减轻这种不利的情况：通过 <code>SUBSTRING()</code> 函数把值转换为 VARCHAR，或者让磁盘临时表更快一些。</p>
<p>让磁盘临时表运行更快的方式是，把它们放在基于内存的文件系统tmpfs，tmpfs文件系统为了降低开销不会刷新内存数据到磁盘，读写速度也很快，而临时表也不需要持久存放。mysql的 tmpdir 参数控制临时文件存放位置，建议如果使用的话要监控空间使用率。另外如果BLOB列非常大或多，可以考虑调大InnoDB日志缓存大小<code>innodb_log_buffer_size</code>。</p>
<p>如果使用BLOB这类变长大字段类型，需要以下后果考虑：</p>
<blockquote>
<ul>
<li>大字段在InnoDB里可能浪费大量空间。例如，若存储字段值只是比行的要求多了一个字节，也会使用整个页面来存储剩下的字节，浪费了页面的大部分空间。同样的，如果有一个值只是稍微超过了32个页的大小，实际上就需要使用96个页面。</li>
<li>扩展存储禁用了自适应哈希，因为需要完整的比较列的整个长度，才能发现是不是正确的数据（哈希帮助InnoDB非常快速的找到“猜测的位置”，但是必须检查“猜测的位置”是不是正确）。因为自适应哈希是完全的内存结构，并且直接指向Buffer Pool中访问“最”频繁的页面，但对于扩展存储空间却无法使用Adaptive Hash。</li>
<li>太长的值可能使得在查询中作为WHERE条件不能使用索引，因而执行很慢。在应用WHERE条件之前，MySQL需要把所有的列读出来，所以可能导致MySQL要求InnoDB读取很多扩展存储，然后检查WHERE条件，丢弃所有不需要的数据。查询不需要的列绝对不是好主意，在这种特殊的场景下尤其需要避免这样做。如果发现查询正遇到这个限制带来的问题，可以尝试通过覆盖索引来解决部分问题。</li>
<li>如果一张表里有很多大字段，最好是把它们组合起来单独存到一个列里面，比如说用XML文档格式存储。这让所有的大字段共享一个扩展存储空间，这比每个字段用自己的页要好。</li>
<li>有时候可以把大字段用COMPRESS()压缩后再存为BLOB，或者在发送到MySQL前在应用程序中进行压缩，这可以获得显著的空间优势和性能收益。<br>—— 《高性能MySQL(第3版)》 P368</li>
</ul>
</blockquote>
<p>对上面的解读就是：</p>
<ul>
<li>如果预期长度范围varchar就满足，就避免使用TEXT</li>
<li>对于字段非常大的列可以在应用程序里压缩后再存到mysql，如果列值很长请考虑用单独的表存放</li>
<li>一张表有多个类blob字段，把它们组合起来如<code>&lt;TEXT&gt;&lt;f_big_col1&gt;long..&lt;/f_big_col1&gt; &lt;f_content&gt;long..&lt;/f_content&gt;&lt;/TEXT&gt;</code>，再压缩存储。但要考虑是否使用全文索引，是否需要前缀索引。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.opskumu.com/mysql-blob.html" target="_blank" rel="external">MySQL 大字段溢出导致数据回写失败</a></li>
<li><a href="http://hidba.org/?p=551" target="_blank" rel="external">innodb使用大字段text，blob的一些优化建议 -玄惭</a></li>
<li><a href="http://imysql.com/2014/09/28/mysql-optimization-case-blob-stored-in-innodb-optimization.shtml" target="_blank" rel="external">[MySQL优化案例]系列 — 优化InnoDB表BLOB列的存储效率 -老叶</a></li>
<li><a href="http://blog.chinaunix.net/uid-24485075-id-3523032.html" target="_blank" rel="external">InnoDB 数据表压缩原理与限制 </a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/innodb-row-format-dynamic.html" target="_blank" rel="external">MySQL Manual DYNAMIC and COMPRESSED Row Formats </a></li>
<li>《MySQL技术内幕·InnoDB存储引擎》 P</li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/18/mysql-blob-row_format/">http://seanlook.com/2016/05/18/mysql-blob-row_format/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在排查现网Text与Blob类型，发现有不少，在《高性能MySQL(第3版)》看到对这两种变长数据类型的处理会涉及到在磁盘上创建临时表，性能开销比较大。于是把影响blob型数据存储方式了解了一下：row_format。&lt;!-- 关于临时表的内容，请参考 --&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-InnoDB的Antelop与Barracuda文件格式&quot;&gt;&lt;a href=&quot;#1-InnoDB的Antelop与Barracuda文件格式&quot; class=&quot;headerlink&quot; title=&quot;1. InnoDB的Antelop与Barracuda文件格式&quot;&gt;&lt;/a&gt;1. InnoDB的Antelop与Barracuda文件格式&lt;/h2&gt;&lt;p&gt;Innodb存储引擎保存记录，是以行的形式存放的（与之对应的是像Google BigTable这种列数据库）。在InnoDB 1.0.x版本之前，InnoDB 存储引擎提供了 &lt;code&gt;Compact&lt;/code&gt; 和 &lt;code&gt;Redundant&lt;/code&gt; 两种格式来存放行记录数据，这也是目前使用最多的一种格式。Redundant 格式是为兼容之前版本而保留的。&lt;/p&gt;
&lt;p&gt;MySQL 5.1 中的 innodb_plugin 引入了新的&lt;em&gt;文件格式&lt;/em&gt;：&lt;code&gt;Barracuda&lt;/code&gt;（将以前的&lt;em&gt;行格式&lt;/em&gt; compact 和 redundant 合称为&lt;code&gt;Antelope&lt;/code&gt;），该文件格式拥有新的两种行格式：&lt;code&gt;compressed&lt;/code&gt;和&lt;code&gt;dynamic&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 MySQL 5.6 版本中，默认还是 Compact 行格式，也是目前使用最多的一种 ROW FORMAT。用户可以通过命令 &lt;code&gt;SHOW TABLE STATUS LIKE&amp;#39;table_name&amp;#39;&lt;/code&gt; 来查看当前表使用的行格式，其中 &lt;em&gt;row_format&lt;/em&gt; 列表示当前所使用的行记录结构类型。&lt;/p&gt;
&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;mysql&amp;gt; show variables like &quot;innodb_file_format&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+--------------------+-----------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| Variable_name      | Value     |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+--------------------+-----------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| innodb_file_format | Barracuda |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+--------------------+-----------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show table status like &quot;tablename%&quot;\G&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;*************************** &lt;/span&gt;1. row ***************************&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;           Name: t_rf_compact&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;         Engine: InnoDB&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        Version: 10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;     Row_format: Compact&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;           Rows: 4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt; Avg_row_length: 36864&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    Data_length: 147456&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Max&lt;span class=&quot;emphasis&quot;&gt;_data_&lt;/span&gt;length: 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;   Index_length: 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;      Data_free: 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt; Auto_increment: 7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    Create_time: 2016-05-14 20:52:58&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    Update_time: NULL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;     Check_time: NULL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;      Collation: utf8_general_ci&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;       Checksum: NULL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt; Create_options: &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        Comment: &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set (0.00 sec)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 msyql 5.7.9 及以后版本，默认行格式由&lt;code&gt;innodb_default_row_format&lt;/code&gt;变量决定，它的默认值是&lt;code&gt;DYNAMIC&lt;/code&gt;，也可以在 create table 的时候指定&lt;code&gt;ROW_FORMAT=DYNAMIC&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="schema设计" scheme="http://seanlook.com/tags/schema%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库开发规范-EC</title>
    <link href="http://seanlook.com/2016/05/11/mysql-dev-principle-ec/"/>
    <id>http://seanlook.com/2016/05/11/mysql-dev-principle-ec/</id>
    <published>2016-05-11T08:32:49.000Z</published>
    <updated>2016-05-11T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<!-- 

http://highdb.com/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/
http://blog.csdn.net/xlgen157387/article/details/48086607
http://www.iteye.com/topic/1141229
-->
<p>最近一段时间一边在线上抓取SQL来优化，一边在整理这个开发规范，尽量减少新的问题SQL进入生产库。今天也是对公司的开发做了一次培训，PPT就不放上来了，里面有十来个生产SQL的案例。因为规范大部分还是具有通用性，所以也借鉴了像去哪儿和赶集的规范，但实际在撰写本文的过程中，每一条规范的背后无不是在工作中有参照的反面例子的。如果时间可以的话，会抽出一部分或分析其原理，或用案例证明。</p>
<h2 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h2><ol>
<li><h3 id="库名、表名、字段名必须使用小写字母，并采用下划线分割"><a href="#库名、表名、字段名必须使用小写字母，并采用下划线分割" class="headerlink" title="库名、表名、字段名必须使用小写字母，并采用下划线分割"></a>库名、表名、字段名必须使用小写字母，并采用下划线分割</h3><ul>
<li>MySQL有配置参数lower_case_table_names=1，即库表名以小写存储，大小写不敏感。如果是0，则库表名以实际情况存储，大小写敏感；如果是2，以实际情况存储，但以小写比较。</li>
<li>如果大小写混合使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。</li>
<li>字段名显示区分大小写，但实际使⽤时不区分，即不可以建立两个名字一样但大小写不一样的字段。</li>
<li>为了统一规范， 库名、表名、字段名使用小写字母。</li>
</ul>
</li>
<li><h3 id="库名以-d-开头，表名以-t-开头，字段名以-f-开头"><a href="#库名以-d-开头，表名以-t-开头，字段名以-f-开头" class="headerlink" title="库名以 d 开头，表名以 t 开头，字段名以 f_ 开头"></a>库名以 d<em> 开头，表名以 t</em> 开头，字段名以 f_ 开头</h3><ul>
<li>比如表 <code>t_crm_relation</code>，中间的 crm 代表业务模块名</li>
<li>视图以<code>view_</code>开头，事件以<code>event_</code>开头，触发器以<code>trig_</code>开头，存储过程以<code>proc_</code>开头，函数以<code>func_</code>开头</li>
<li>普通索引以<code>idx_col1_col2</code>命名，唯一索引以<code>uk_col1_col2</code>命名（可去掉f_公共部分）。如 idx_companyid_corpid_contacttime(f_company_id,f_corp_id,f_contact_time)</li>
</ul>
</li>
<li><h3 id="库名、表名、字段名禁止超过32个字符，需见名知意"><a href="#库名、表名、字段名禁止超过32个字符，需见名知意" class="headerlink" title="库名、表名、字段名禁止超过32个字符，需见名知意"></a>库名、表名、字段名禁止超过32个字符，需见名知意</h3><p>库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，禁止超过32个字符</p>
</li>
<li><h3 id="临时库、表名须以tmp加日期为后缀"><a href="#临时库、表名须以tmp加日期为后缀" class="headerlink" title="临时库、表名须以tmp加日期为后缀"></a>临时库、表名须以tmp加日期为后缀</h3><p>如 t_crm_relation_tmp0425。备份表也类似，形如 <code>_bak20160425</code> 。</p>
</li>
<li><h3 id="按日期时间分表须符合-YYYY-MM-DD-格式"><a href="#按日期时间分表须符合-YYYY-MM-DD-格式" class="headerlink" title="按日期时间分表须符合_YYYY[MM][DD]格式"></a>按日期时间分表须符合_YYYY[MM][DD]格式</h3><p>这也是为将来有可能分表做准备的，比如<code>t_crm_ec_record_201403</code>，但像 t_crm_contact_at201506就打破了这种规范。<br>不具有时间特性的，直接以 <code>t_tbname_001</code> 这样的方式命名。</p>
</li>
</ol>
<h2 id="2-库表基础规范"><a href="#2-库表基础规范" class="headerlink" title="2. 库表基础规范"></a>2. 库表基础规范</h2><ol>
<li><h3 id="使用Innodb存储引擎"><a href="#使用Innodb存储引擎" class="headerlink" title="使用Innodb存储引擎"></a>使用Innodb存储引擎</h3><p>5.5版本开始mysql默认存储引擎就是InnoDB，5.7版本开始，系统表都放弃MyISAM了。</p>
</li>
<li><h3 id="表字符集统一使用UTF8"><a href="#表字符集统一使用UTF8" class="headerlink" title="表字符集统一使用UTF8"></a>表字符集统一使用UTF8</h3><ul>
<li>UTF8字符集存储汉字占用3个字节，存储英文字符占用一个字节</li>
<li>校对字符集使用默认的 utf8_general_ci</li>
<li>连接的客户端也使用utf8，建立连接时指定charset或<code>SET NAMES UTF8;</code>。（对于已经在项目中长期使用latin1的，救不了了）</li>
<li>如果遇到EMOJ等表情符号的存储需求，可申请使用UTF8MB4字符集</li>
</ul>
</li>
<li><h3 id="所有表都要添加注释"><a href="#所有表都要添加注释" class="headerlink" title="所有表都要添加注释"></a>所有表都要添加注释</h3><ul>
<li>尽量给字段也添加注释</li>
<li>类status型需指明主要值的含义，如”0-离线，1-在线”</li>
</ul>
</li>
<li><h3 id="控制单表字段数量"><a href="#控制单表字段数量" class="headerlink" title="控制单表字段数量"></a>控制单表字段数量</h3><ul>
<li>单表字段数上限30左右，再多的话考虑垂直分表，一是冷热数据分离，二是大字段分离，三是常在一起做条件和返回列的不分离。</li>
<li>表字段控制少而精，可以提高IO效率，内存缓存更多有效数据，从而提高响应速度和并发能力，后续 alter table 也更快。</li>
</ul>
</li>
<li><h3 id="所有表都必须要显式指定主键"><a href="#所有表都必须要显式指定主键" class="headerlink" title="所有表都必须要显式指定主键"></a>所有表都必须要显式指定主键</h3><ul>
<li>主键尽量采用自增方式，InnoDB表实际是一棵索引组织表，顺序存储可以提高存取效率，充分利用磁盘空间。还有对一些复杂查询可能需要自连接来优化时需要用到。</li>
<li>需要全局唯一主键时，使用外部发号器ticket server（建设中）</li>
<li>如果没有主键或唯一索引，update/delete是通过所有字段来定位操作的行，相当于每行就是一次全表扫描</li>
<li>少数情况可以使用联合唯一主键，需与DBA协商</li>
</ul>
</li>
<li><h3 id="不强制使用外键参考"><a href="#不强制使用外键参考" class="headerlink" title="不强制使用外键参考"></a>不强制使用外键参考</h3><p>即使2个表的字段有明确的外键参考关系，也不使用 FOREIGN KEY ，因为新纪录会去主键表做校验，影响性能。</p>
</li>
<li><h3 id="适度使用存储过程、视图，禁止使用触发器、事件"><a href="#适度使用存储过程、视图，禁止使用触发器、事件" class="headerlink" title="适度使用存储过程、视图，禁止使用触发器、事件"></a>适度使用存储过程、视图，禁止使用触发器、事件</h3></li>
</ol>
<a id="more"></a>
<ul>
<li>存储过程（procedure）虽然可以简化业务端代码，在传统企业写复杂逻辑时可能会用到，而在互联网企业变更是很频繁的，在分库分表的情况下要升级一个存储过程相当麻烦。又因为它是不记录log的，所以也不方便debug性能问题。如果使用过程，一定考虑如果执行失败的情况。<ul>
<li>使用视图一定程度上也是为了降低代码里SQL的复杂度，但有时候为了视图的通用性会损失性能（比如返回不必要的字段）。</li>
</ul>
</li>
<li>触发器（trigger）也是同样，但也不应该通过它去约束数据的强一致性，mysql只支持“基于行的触发”，也就是说，触发器始终是针对一条记录的，而不是针对整个sql语句的，如果变更的数据集非常大的话，效率会很低。掩盖一条sql背后的工作，一旦出现问题将是灾难性的，但又很难快速分析和定位。再者需要ddl时无法使用pt-osc工具。放在transaction执行。</li>
<li>事件（event）也是一种偷懒的表现，目前已经遇到数次由于定时任务执行失败影响业务的情况，而且mysql无法对它做失败预警。建立专门的 job scheduler 平台。</li>
</ul>
<ol>
<li><h3 id="单表数据量控制在5000w以内"><a href="#单表数据量控制在5000w以内" class="headerlink" title="单表数据量控制在5000w以内"></a>单表数据量控制在5000w以内</h3></li>
<li><h3 id="数据库中不允许存储明文密码"><a href="#数据库中不允许存储明文密码" class="headerlink" title="数据库中不允许存储明文密码"></a>数据库中不允许存储明文密码</h3></li>
</ol>
<h2 id="3-字段规范"><a href="#3-字段规范" class="headerlink" title="3. 字段规范"></a>3. 字段规范</h2><ol>
<li><h3 id="char、varchar、text等字符串类型定义"><a href="#char、varchar、text等字符串类型定义" class="headerlink" title="char、varchar、text等字符串类型定义"></a>char、varchar、text等字符串类型定义</h3><ul>
<li>对于长度基本固定的列，如果该列恰好更新又特别频繁，适合char</li>
<li>varchar虽然存储变长字符串，但不可太小也不可太大。UTF8最多能存21844个汉字，或65532个英文</li>
<li>varbinary(M)保存的是二进制字符串，它保存的是字节而不是字符，所以没有字符集的概念，M长度0-255（字节）。只用于排序或比较时大小写敏感的类型，不包括密码存储</li>
<li>TEXT类型与VARCHAR都类似，存储可变长度，最大限制也是2^16，但是它20bytes以后的内容是在数据页以外的空间存储（row_format=dynamic），对它的使用需要多一次寻址，没有默认值。<br>一般用于存放容量平均都很大、操作没有其它字段那样频繁的值。<br>网上部分文章说要避免使用text和blob，要知道如果纯用varchar可能会导致行溢出，效果差不多，但因为每行占用字节数过多，会导致buffer_pool能缓存的数据行、页下降。另外text和blob上面一般不会去建索引，而是利用sphinx之类的第三方全文搜索引擎，如果确实要创建（前缀）索引，那就会影响性能。凡事看具体场景。<br>另外尽可能把text/blob拆到另一个表中</li>
<li>BLOB可以看出varbinary的扩展版本，内容以二进制字符串存储，无字符集，区分大小写，有一种经常提但不用的场景：不要在数据库里存储图片。</li>
</ul>
</li>
<li><h3 id="int、tinyint、decimal等数字类型定义"><a href="#int、tinyint、decimal等数字类型定义" class="headerlink" title="int、tinyint、decimal等数字类型定义"></a>int、tinyint、decimal等数字类型定义</h3><ul>
<li>使用tinyint来代替 enum和boolean<br>ENUM类型在需要修改或增加枚举值时，需要在线DDL，成本较高；ENUM列值如果含有数字类型，可能会引起默认值混淆<br>tinyint使用1个字节，一般用于status,type,flag的列</li>
<li>建议使用 UNSIGNED 存储非负数值<br>相比不使用 unsigned，可以扩大一倍使用数值范围</li>
<li>int使用固定4个字节存储，int(11)与int(4)只是显示宽度的区别</li>
<li>使用Decimal 代替float/double存储精确浮点数<br>对于货币、金额这样的类型，使用decimal，如 decimal(9,2)。float默认只能能精确到6位有效数字</li>
</ul>
</li>
<li><h3 id="timestamp与datetime选择"><a href="#timestamp与datetime选择" class="headerlink" title="timestamp与datetime选择"></a>timestamp与datetime选择</h3><ul>
<li>datetime 和 timestamp类型所占的存储空间不同，前者8个字节，后者4个字节，这样造成的后果是两者能表示的时间范围不同。前者范围为1000-01-01 00:00:00 ~ 9999-12-31 23:59:59，后者范围为 1970-01-01 08:00:01 到 2038-01-19 11:14:07 。所以 TIMESTAMP 支持的范围比 DATATIME 要小。</li>
<li>timestamp可以在insert/update行时，自动更新时间字段（如 f_set_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP），但一个表只能有一个这样的定义。</li>
<li>timestamp显示与时区有关，内部总是以 UTC 毫秒 来存的。还受到严格模式的限制</li>
<li>优先使用timestamp，datetime也没问题</li>
<li>where条件里不要对时间列上使用时间函数</li>
</ul>
</li>
<li><h3 id="建议字段都定义为NOT-NULL"><a href="#建议字段都定义为NOT-NULL" class="headerlink" title="建议字段都定义为NOT NULL"></a>建议字段都定义为NOT NULL</h3><ul>
<li>如果是索引字段，一定要定义为not null 。因为null值会影响cordinate统计，影响优化器对索引的选择</li>
<li>如果不能保证insert时一定有值过来，定义时使用default ‘’ ，或 0</li>
</ul>
</li>
<li><h3 id="同一意义的字段定义必须相同"><a href="#同一意义的字段定义必须相同" class="headerlink" title="同一意义的字段定义必须相同"></a>同一意义的字段定义必须相同</h3><p> 比如不同表中都有 f_user_id 字段，那么它的类型、字段长度要设计成一样</p>
</li>
</ol>
<h2 id="4-索引规范"><a href="#4-索引规范" class="headerlink" title="4. 索引规范"></a>4. 索引规范</h2><ol>
<li><h3 id="任何新的select-update-delete上线，都要先explain，看索引使用情况"><a href="#任何新的select-update-delete上线，都要先explain，看索引使用情况" class="headerlink" title="任何新的select,update,delete上线，都要先explain，看索引使用情况"></a>任何新的select,update,delete上线，都要先explain，看索引使用情况</h3><p>尽量避免extra列出现：Using File Sort，Using Temporary，rows超过1000的要谨慎上线。<br>explain解读</p>
<ul>
<li><code>type</code>：ALL, index,  range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）</li>
<li><code>possible_keys</code>：指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用</li>
<li><code>key</code>：表示MySQL实际决定使用的键（索引）<br>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX</li>
<li><code>ref</code>：表示选择 <code>key</code> 列上的索引，哪些列或常量被用于查找索引列上的值</li>
<li><code>rows</code>：根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</li>
<li><code>Extra</code><ul>
<li><code>Using temporary</code>：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询</li>
<li><code>Using filesort</code>：MySQL中无法利用索引完成的排序操作称为“文件排序”</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><h3 id="索引个数限制"><a href="#索引个数限制" class="headerlink" title="索引个数限制"></a>索引个数限制</h3><ul>
<li>索引是双刃剑，会增加维护负担，增大IO压力，索引占用空间是成倍增加的</li>
<li>单张表的索引数量控制在5个以内，或不超过表字段个数的20%。若单张表多个字段在查询需求上都要单独用到索引，需要经过DBA评估。</li>
</ul>
</li>
<li><h3 id="避免冗余索引"><a href="#避免冗余索引" class="headerlink" title="避免冗余索引"></a>避免冗余索引</h3><ul>
<li>InnoDB表是一棵索引组织表，主键是和数据放在一起的聚集索引，普通索引最终指向的是主键地址，所以把主键做最后一列是多余的。如f_crm_id作为主键，联合索引(f_user_id,f_crm_id)上的f_crm_id就完全多余</li>
<li>(a,b,c)、(a,b)，后者为冗余索引。可以利用前缀索引来达到加速目的，减轻维护负担</li>
</ul>
</li>
<li><h3 id="没有特殊要求，使用自增id作为主键"><a href="#没有特殊要求，使用自增id作为主键" class="headerlink" title="没有特殊要求，使用自增id作为主键"></a>没有特殊要求，使用自增id作为主键</h3><ul>
<li>主键是一种聚集索引，顺序写入。组合唯一索引作为主键的话，是随机写入，适合写少读多的表</li>
<li>主键不允许更新</li>
</ul>
</li>
<li><h3 id="索引尽量建在选择性高的列上"><a href="#索引尽量建在选择性高的列上" class="headerlink" title="索引尽量建在选择性高的列上"></a>索引尽量建在选择性高的列上</h3><ul>
<li>不在低基数列上建立索引，例如性别、类型。但有一种情况，idx_feedbackid_type (f_feedback_id,f_type)，如果经常用 f_type=1 比较，而且能过滤掉90%行，那这个组合索引就值得创建。有时候同样的查询语句，由于条件取值不同导致使用不同的索引，也是这个道理。</li>
<li>索引选择性计算方法（基数 ÷ 数据行数）<br>Selectivity = Cardinality / Total Rows = select count(distinct col1)/count(*) from tbname，越接近1说明col1上使用索引的过滤效果越好</li>
<li>走索引扫描行数超过30%时，改全表扫描</li>
</ul>
</li>
<li><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><ul>
<li>mysql使用联合索引时，从左向右匹配，遇到断开或者范围查询时，无法用到后续的索引列<br>比如索引idx_c1_c2_c3 (c1,c2,c3)，相当于创建了(c1)、(c1,c2)、(c1,c2,c3)三个索引，where条件包含上面三种情况的字段比较则可以用到索引，但像 where c1=a and c3=c 只能用到c1列的索引，像 c2=b and c3=c等情况就完全用不到这个索引</li>
<li>遇到范围查询(&gt;、&lt;、between、like)也会停止索引匹配，比如 c1=a and c2 &gt; 2 and c3=c，只有c1,c2列上的比较能用到索引，(c1,c2,c3)排列的索引才可能会都用上</li>
<li>where条件里面字段的顺序与索引顺序无关，mysql优化器会自动调整顺序</li>
</ul>
</li>
<li><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><ul>
<li>对超过30个字符长度的列创建索引时，考虑使用前缀索引，如 idx_cs_guid2 (f_cs_guid(26))表示截取前26个字符做索引，既可以提高查找效率，也可以节省空间</li>
<li>前缀索引也有它的缺点是，如果在该列上 ORDER BY 或 GROUP BY 时无法使用索引，也不能把它们用作覆盖索引(Covering Index)</li>
<li>如果在varbinary或blob这种以二进制存储的列上建立前缀索引，要考虑字符集，括号里表示的是字节数</li>
</ul>
</li>
<li><h3 id="合理使用覆盖索引减少IO"><a href="#合理使用覆盖索引减少IO" class="headerlink" title="合理使用覆盖索引减少IO"></a>合理使用覆盖索引减少IO</h3><p>INNODB存储引擎中，secondary index(非主键索引，又称为辅助索引、二级索引)没有直接存储行地址，而是存储主键值。<br>如果用户需要查询secondary index中所不包含的数据列，则需要先通过secondary index查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。覆盖索引则可以在一个索引中获取所有需要的数据列，从而避免回表进行二次查找，节省IO因此效率较高。<br>例如SELECT email，uid FROM user_email WHERE uid=xx，如果uid不是主键，适当时候可以将索引添加为index(uid，email)，以获得性能提升。</p>
</li>
<li><h3 id="尽量不要在频繁更新的列上创建索引"><a href="#尽量不要在频繁更新的列上创建索引" class="headerlink" title="尽量不要在频繁更新的列上创建索引"></a>尽量不要在频繁更新的列上创建索引</h3><p>如不在定义了 ON UPDATE CURRENT_STAMP 的列上创建索引，维护成本太高（好在mysql有insert buffer，会合并索引的插入）</p>
</li>
</ol>
<h2 id="5-SQL设计"><a href="#5-SQL设计" class="headerlink" title="5. SQL设计"></a>5. SQL设计</h2><ol>
<li><h3 id="杜绝直接-SELECT-读取全部字段"><a href="#杜绝直接-SELECT-读取全部字段" class="headerlink" title="杜绝直接 SELECT * 读取全部字段"></a>杜绝直接 SELECT * 读取全部字段</h3><p> 即使需要所有字段，减少网络带宽消耗，能有效利用覆盖索引，表结构变更对程序基本无影响</p>
</li>
<li><h3 id="能确定返回结果只有一条时，使用-limit-1"><a href="#能确定返回结果只有一条时，使用-limit-1" class="headerlink" title="能确定返回结果只有一条时，使用 limit 1"></a>能确定返回结果只有一条时，使用 limit 1</h3><p><strong>在保证数据不会有误的前提下</strong>，能确定结果集数量时，多使用limit，尽快的返回结果。</p>
</li>
<li><h3 id="小心隐式类型转换"><a href="#小心隐式类型转换" class="headerlink" title="小心隐式类型转换"></a>小心隐式类型转换</h3><ul>
<li><p>转换规则</p>
<blockquote>
<p>a. 两个参数至少有一个是 NULL 时，比较的结果也是 NULL，例外是使用 &lt;=&gt; 对两个 NULL 做比较时会返回 1，这两种情况都不需要做类型转换<br>b. 两个参数都是字符串，会按照字符串来比较，不做类型转换<br>c. 两个参数都是整数，按照整数来比较，不做类型转换<br>d. 十六进制的值和非数字做比较时，会被当做二进制串<br>e. 有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为 timestamp<br>f. 有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较<br>g. 所有其他情况下，两个参数都会被转换为浮点数再进行比较。</p>
</blockquote>
</li>
<li><p>如果一个索引建立在string类型上，如果这个字段和一个int类型的值比较，符合第 g 条。如f_phone定义的类型是varchar，但where使用f_phone in (098890)，两个参数都会被当成成浮点型。发生这个隐式转换并不是最糟的，最糟的是string转换后的float，mysql无法使用索引，这才导致了性能问题。如果是 f_user_id = ‘1234567’ 的情况，符合第 b 条,直接把数字当字符串比较。</p>
</li>
</ul>
</li>
<li><h3 id="禁止在where条件列上使用函数"><a href="#禁止在where条件列上使用函数" class="headerlink" title="禁止在where条件列上使用函数"></a>禁止在where条件列上使用函数</h3><ul>
<li>会导致索引失效，如lower(email)，f_qq % 4。可放到右边的常量上计算</li>
<li>返回小结果集不是很大的情况下，可以对返回列使用函数，简化程序开发</li>
</ul>
</li>
<li><h3 id="使用like模糊匹配，-不要放首位"><a href="#使用like模糊匹配，-不要放首位" class="headerlink" title="使用like模糊匹配，%不要放首位"></a>使用like模糊匹配，%不要放首位</h3><p>会导致索引失效，有这种搜索需求是，考虑其它方案，如sphinx全文搜索</p>
</li>
<li><h3 id="涉及到复杂sql时，务必先参考已有索引设计，先explain"><a href="#涉及到复杂sql时，务必先参考已有索引设计，先explain" class="headerlink" title="涉及到复杂sql时，务必先参考已有索引设计，先explain"></a>涉及到复杂sql时，务必先参考已有索引设计，先explain</h3><ul>
<li>简单SQL拆分，不以代码处理复杂为由。</li>
<li>比如 OR 条件： f_phone=’10000’ or f_mobile=’10000’，两个字段各自有索引，但只能用到其中一个。可以拆分成2个sql，或者union all。</li>
<li>先explain的好处是可以为了利用索引，增加更多查询限制条件</li>
</ul>
</li>
<li><h3 id="使用join时，where条件尽量使用充分利用同一表上的索引"><a href="#使用join时，where条件尽量使用充分利用同一表上的索引" class="headerlink" title="使用join时，where条件尽量使用充分利用同一表上的索引"></a>使用join时，where条件尽量使用充分利用同一表上的索引</h3><ul>
<li>如 select t1.a,t2.b * from t1,t2 and t1.a=t2.a and t1.b=123 and t2.c= 4 ，如果t1.c与t2.c字段相同，那么t1上的索引(b,c)就只用到b了。此时如果把where条件中的t2.c=4改成t1.c=4，那么可以用到完整的索引</li>
<li>这种情况可能会在字段冗余设计（反范式）时出现</li>
<li>正确选取inner join和left join</li>
</ul>
</li>
<li><h3 id="少用子查询，改用join"><a href="#少用子查询，改用join" class="headerlink" title="少用子查询，改用join"></a>少用子查询，改用join</h3><p>小于5.6版本时，子查询效率很低，不像Oracle那样先计算子查询后外层查询。5.6版本开始得到优化</p>
</li>
<li><h3 id="考虑使用union-all，少使用union，注意考虑去重"><a href="#考虑使用union-all，少使用union，注意考虑去重" class="headerlink" title="考虑使用union all，少使用union，注意考虑去重"></a>考虑使用union all，少使用union，注意考虑去重</h3><ul>
<li>union all不去重，而少了排序操作，速度相对比union要快，如果没有去重的需求，优先使用union all</li>
<li>如果UNION结果中有使用limit，在2个子SQL可能有许多返回值的情况下，各自加上limit。如果还有order by，请找DBA。</li>
</ul>
</li>
<li><h3 id="IN的内容尽量不超过200个"><a href="#IN的内容尽量不超过200个" class="headerlink" title="IN的内容尽量不超过200个"></a>IN的内容尽量不超过200个</h3><p>超过500个值使用批量的方式，否则一次执行会影响数据库的并发能力，因为单SQL只能且一直占用单CPU，而且可能导致主从复制延迟</p>
</li>
<li><h3 id="拒绝大事务"><a href="#拒绝大事务" class="headerlink" title="拒绝大事务"></a>拒绝大事务</h3><p>比如在一个事务里进行多个select，多个update，如果是高频事务，会严重影响MySQL并发能力，因为事务持有的锁等资源只在事务rollback/commit时才能释放。但同时也要权衡数据写入的一致性。</p>
</li>
<li><h3 id="避免使用is-null-is-not-null这样的比较"><a href="#避免使用is-null-is-not-null这样的比较" class="headerlink" title="避免使用is null, is not null这样的比较"></a>避免使用is null, is not null这样的比较</h3></li>
<li><h3 id="order-by-limit"><a href="#order-by-limit" class="headerlink" title="order by .. limit"></a>order by .. limit</h3><p>这种查询更多的是通过索引去优化，但order by的字段有讲究，比如主键id与f_time都是顺序递增，那就可以考虑order by id而非 f_time 。</p>
</li>
<li><h3 id="c1-lt-a-order-by-c2"><a href="#c1-lt-a-order-by-c2" class="headerlink" title="c1 &lt; a order by c2"></a>c1 &lt; a order by c2</h3><p>与上面不同的是，order by之前有个范围查询，由前面的内容可知，用不到类似(c1,c2)的索引，但是可以利用(c2,c1)索引。另外还可以改写成join的方式实现。</p>
</li>
<li><h3 id="分页优化"><a href="#分页优化" class="headerlink" title="分页优化"></a>分页优化</h3><p>建议使用合理的分页方式以提高分页效率，大页情况下不使用跳跃式分页<br>假如有类似下面分页语句:<br>SELECT <em> FROM table1 ORDER BY ftime DESC LIMIT 10000,10;<br>这种分页方式会导致大量的io，因为MySQL使用的是提前读取策略。<br>推荐分页方式：<br>SELECT </em> FROM table1  WHERE ftime &lt; last_time ORDER BY ftime DESC LIMIT 10<br>即传入上一次分页的界值</p>
<p>SELECT * FROM table as t1 inner JOIN (SELECT id FROM table ORDER BY time LIMIT 10000，10) as t2 ON t1.id=t2.id</p>
</li>
<li><h3 id="count计数"><a href="#count计数" class="headerlink" title="count计数"></a>count计数</h3><ul>
<li>首先count(<em>)、count(1)、count(col1)是有区别的，count(</em>)表示整个结果集有多少条记录，count(1)表示结果集里以primary key统计数量，绝大多数情况下count(<em>)与count(1)效果一样的，但count(col1)表示的是结果集里 col1 列 NOT null 的记录数。优先采用count(</em>)</li>
<li>大数据量count是消耗资源的操作，甚至会拖慢整个库，查询性能问题无法解决的，应从产品设计上进行重构。例如当频繁需要count的查询，考虑使用汇总表</li>
<li>遇到distinct的情况，group by方式可能效率更高。</li>
</ul>
</li>
<li><h3 id="delete-update语句改成select再explain"><a href="#delete-update语句改成select再explain" class="headerlink" title="delete,update语句改成select再explain"></a>delete,update语句改成select再explain</h3><p>select最多导致数据库慢，写操作才是锁表的罪魁祸首</p>
</li>
<li><h3 id="减少与数据库交互的次数，尽量采用批量SQL语句"><a href="#减少与数据库交互的次数，尽量采用批量SQL语句" class="headerlink" title="减少与数据库交互的次数，尽量采用批量SQL语句"></a>减少与数据库交互的次数，尽量采用批量SQL语句</h3><ul>
<li><code>INSERT ... ON DUPLICATE KEY UPDATE ...</code>，插入行后会导致在一个UNIQUE索引或PRIMARY KEY中出现重复值，则执行旧行UPDATE，如果不重复则直接插入，影响1行。</li>
<li><code>REPLACE INTO</code>类似，但它是冲突时删除旧行。<code>INSERT IGNORE</code>相反，保留旧行，丢弃要插入的新行。</li>
<li>INSERT INTO VALUES(),(),()，合并插入。</li>
</ul>
</li>
<li><h3 id="杜绝危险SQL"><a href="#杜绝危险SQL" class="headerlink" title="杜绝危险SQL"></a>杜绝危险SQL</h3><ul>
<li>去掉where 1=1 这样无意义或恒真的条件，如果遇到update/delete或遭到sql注入就恐怖了</li>
<li>SQL中不允许出现DDL语句。一般也不给予create/alter这类权限，但阿里云RDS只区分读写用户</li>
</ul>
</li>
</ol>
<h2 id="6-行为规范"><a href="#6-行为规范" class="headerlink" title="6. 行为规范"></a>6. 行为规范</h2><ul>
<li>不允许在DBA不知情的情况下导现网数据</li>
<li>大批量更新，如修复数据，避开高峰期，并通知DBA。直接执行sql的由运维或DBA同事操作</li>
<li>及时处理已下线业务的SQL</li>
<li>复杂sql上线审核<br>因为目前还没有SQL审查机制，复杂sql如多表join,count,group by，主动上报DBA评估。</li>
<li>重要项目的数据库方案选型和设计必须提前通知DBA参与</li>
</ul>
<h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><ul>
<li><a href="http://wangwei007.blog.51cto.com/68019/1709769" target="_blank" rel="external">互联网MySQL开发规范</a> 这个基本也是《去哪儿MySQL开发规范.pdf》版本</li>
<li>MySQL数据库开发的三十六条军规<em>石展</em>完整.pdf</li>
<li><a href="http://imysql.com/2015/07/23/something-important-about-mysql-design-reference.shtml" target="_blank" rel="external">老叶观点：MySQL开发规范之我见</a></li>
<li><a href="http://blog.csdn.net/xlgen157387/article/details/48086607" target="_blank" rel="external">MySQL开发规范与使用技巧总结</a></li>
<li><a href="http://highdb.com/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/" target="_blank" rel="external">http://highdb.com/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/05/11/mysql-dev-principle-ec/">http://seanlook.com/2016/05/11/mysql-dev-principle-ec/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;!-- 

http://highdb.com/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/
http://blog.csdn.net/xlgen157387/article/details/48086607
http://www.iteye.com/topic/1141229
--&gt;
&lt;p&gt;最近一段时间一边在线上抓取SQL来优化，一边在整理这个开发规范，尽量减少新的问题SQL进入生产库。今天也是对公司的开发做了一次培训，PPT就不放上来了，里面有十来个生产SQL的案例。因为规范大部分还是具有通用性，所以也借鉴了像去哪儿和赶集的规范，但实际在撰写本文的过程中，每一条规范的背后无不是在工作中有参照的反面例子的。如果时间可以的话，会抽出一部分或分析其原理，或用案例证明。&lt;/p&gt;
&lt;h2 id=&quot;1-命名规范&quot;&gt;&lt;a href=&quot;#1-命名规范&quot; class=&quot;headerlink&quot; title=&quot;1. 命名规范&quot;&gt;&lt;/a&gt;1. 命名规范&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;库名、表名、字段名必须使用小写字母，并采用下划线分割&quot;&gt;&lt;a href=&quot;#库名、表名、字段名必须使用小写字母，并采用下划线分割&quot; class=&quot;headerlink&quot; title=&quot;库名、表名、字段名必须使用小写字母，并采用下划线分割&quot;&gt;&lt;/a&gt;库名、表名、字段名必须使用小写字母，并采用下划线分割&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MySQL有配置参数lower_case_table_names=1，即库表名以小写存储，大小写不敏感。如果是0，则库表名以实际情况存储，大小写敏感；如果是2，以实际情况存储，但以小写比较。&lt;/li&gt;
&lt;li&gt;如果大小写混合使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。&lt;/li&gt;
&lt;li&gt;字段名显示区分大小写，但实际使⽤时不区分，即不可以建立两个名字一样但大小写不一样的字段。&lt;/li&gt;
&lt;li&gt;为了统一规范， 库名、表名、字段名使用小写字母。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;库名以-d-开头，表名以-t-开头，字段名以-f-开头&quot;&gt;&lt;a href=&quot;#库名以-d-开头，表名以-t-开头，字段名以-f-开头&quot; class=&quot;headerlink&quot; title=&quot;库名以 d 开头，表名以 t 开头，字段名以 f_ 开头&quot;&gt;&lt;/a&gt;库名以 d&lt;em&gt; 开头，表名以 t&lt;/em&gt; 开头，字段名以 f_ 开头&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;比如表 &lt;code&gt;t_crm_relation&lt;/code&gt;，中间的 crm 代表业务模块名&lt;/li&gt;
&lt;li&gt;视图以&lt;code&gt;view_&lt;/code&gt;开头，事件以&lt;code&gt;event_&lt;/code&gt;开头，触发器以&lt;code&gt;trig_&lt;/code&gt;开头，存储过程以&lt;code&gt;proc_&lt;/code&gt;开头，函数以&lt;code&gt;func_&lt;/code&gt;开头&lt;/li&gt;
&lt;li&gt;普通索引以&lt;code&gt;idx_col1_col2&lt;/code&gt;命名，唯一索引以&lt;code&gt;uk_col1_col2&lt;/code&gt;命名（可去掉f_公共部分）。如 idx_companyid_corpid_contacttime(f_company_id,f_corp_id,f_contact_time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;库名、表名、字段名禁止超过32个字符，需见名知意&quot;&gt;&lt;a href=&quot;#库名、表名、字段名禁止超过32个字符，需见名知意&quot; class=&quot;headerlink&quot; title=&quot;库名、表名、字段名禁止超过32个字符，需见名知意&quot;&gt;&lt;/a&gt;库名、表名、字段名禁止超过32个字符，需见名知意&lt;/h3&gt;&lt;p&gt;库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，禁止超过32个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;临时库、表名须以tmp加日期为后缀&quot;&gt;&lt;a href=&quot;#临时库、表名须以tmp加日期为后缀&quot; class=&quot;headerlink&quot; title=&quot;临时库、表名须以tmp加日期为后缀&quot;&gt;&lt;/a&gt;临时库、表名须以tmp加日期为后缀&lt;/h3&gt;&lt;p&gt;如 t_crm_relation_tmp0425。备份表也类似，形如 &lt;code&gt;_bak20160425&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;按日期时间分表须符合-YYYY-MM-DD-格式&quot;&gt;&lt;a href=&quot;#按日期时间分表须符合-YYYY-MM-DD-格式&quot; class=&quot;headerlink&quot; title=&quot;按日期时间分表须符合_YYYY[MM][DD]格式&quot;&gt;&lt;/a&gt;按日期时间分表须符合_YYYY[MM][DD]格式&lt;/h3&gt;&lt;p&gt;这也是为将来有可能分表做准备的，比如&lt;code&gt;t_crm_ec_record_201403&lt;/code&gt;，但像 t_crm_contact_at201506就打破了这种规范。&lt;br&gt;不具有时间特性的，直接以 &lt;code&gt;t_tbname_001&lt;/code&gt; 这样的方式命名。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-库表基础规范&quot;&gt;&lt;a href=&quot;#2-库表基础规范&quot; class=&quot;headerlink&quot; title=&quot;2. 库表基础规范&quot;&gt;&lt;/a&gt;2. 库表基础规范&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;使用Innodb存储引擎&quot;&gt;&lt;a href=&quot;#使用Innodb存储引擎&quot; class=&quot;headerlink&quot; title=&quot;使用Innodb存储引擎&quot;&gt;&lt;/a&gt;使用Innodb存储引擎&lt;/h3&gt;&lt;p&gt;5.5版本开始mysql默认存储引擎就是InnoDB，5.7版本开始，系统表都放弃MyISAM了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;表字符集统一使用UTF8&quot;&gt;&lt;a href=&quot;#表字符集统一使用UTF8&quot; class=&quot;headerlink&quot; title=&quot;表字符集统一使用UTF8&quot;&gt;&lt;/a&gt;表字符集统一使用UTF8&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UTF8字符集存储汉字占用3个字节，存储英文字符占用一个字节&lt;/li&gt;
&lt;li&gt;校对字符集使用默认的 utf8_general_ci&lt;/li&gt;
&lt;li&gt;连接的客户端也使用utf8，建立连接时指定charset或&lt;code&gt;SET NAMES UTF8;&lt;/code&gt;。（对于已经在项目中长期使用latin1的，救不了了）&lt;/li&gt;
&lt;li&gt;如果遇到EMOJ等表情符号的存储需求，可申请使用UTF8MB4字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;所有表都要添加注释&quot;&gt;&lt;a href=&quot;#所有表都要添加注释&quot; class=&quot;headerlink&quot; title=&quot;所有表都要添加注释&quot;&gt;&lt;/a&gt;所有表都要添加注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽量给字段也添加注释&lt;/li&gt;
&lt;li&gt;类status型需指明主要值的含义，如”0-离线，1-在线”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;控制单表字段数量&quot;&gt;&lt;a href=&quot;#控制单表字段数量&quot; class=&quot;headerlink&quot; title=&quot;控制单表字段数量&quot;&gt;&lt;/a&gt;控制单表字段数量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单表字段数上限30左右，再多的话考虑垂直分表，一是冷热数据分离，二是大字段分离，三是常在一起做条件和返回列的不分离。&lt;/li&gt;
&lt;li&gt;表字段控制少而精，可以提高IO效率，内存缓存更多有效数据，从而提高响应速度和并发能力，后续 alter table 也更快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;所有表都必须要显式指定主键&quot;&gt;&lt;a href=&quot;#所有表都必须要显式指定主键&quot; class=&quot;headerlink&quot; title=&quot;所有表都必须要显式指定主键&quot;&gt;&lt;/a&gt;所有表都必须要显式指定主键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主键尽量采用自增方式，InnoDB表实际是一棵索引组织表，顺序存储可以提高存取效率，充分利用磁盘空间。还有对一些复杂查询可能需要自连接来优化时需要用到。&lt;/li&gt;
&lt;li&gt;需要全局唯一主键时，使用外部发号器ticket server（建设中）&lt;/li&gt;
&lt;li&gt;如果没有主键或唯一索引，update/delete是通过所有字段来定位操作的行，相当于每行就是一次全表扫描&lt;/li&gt;
&lt;li&gt;少数情况可以使用联合唯一主键，需与DBA协商&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;不强制使用外键参考&quot;&gt;&lt;a href=&quot;#不强制使用外键参考&quot; class=&quot;headerlink&quot; title=&quot;不强制使用外键参考&quot;&gt;&lt;/a&gt;不强制使用外键参考&lt;/h3&gt;&lt;p&gt;即使2个表的字段有明确的外键参考关系，也不使用 FOREIGN KEY ，因为新纪录会去主键表做校验，影响性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;适度使用存储过程、视图，禁止使用触发器、事件&quot;&gt;&lt;a href=&quot;#适度使用存储过程、视图，禁止使用触发器、事件&quot; class=&quot;headerlink&quot; title=&quot;适度使用存储过程、视图，禁止使用触发器、事件&quot;&gt;&lt;/a&gt;适度使用存储过程、视图，禁止使用触发器、事件&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="规范" scheme="http://seanlook.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>小心MySQL的隐式类型转换陷阱</title>
    <link href="http://seanlook.com/2016/05/05/mysql-type-conversion/"/>
    <id>http://seanlook.com/2016/05/05/mysql-type-conversion/</id>
    <published>2016-05-05T08:32:49.000Z</published>
    <updated>2016-05-05T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-隐式类型转换实例"><a href="#1-隐式类型转换实例" class="headerlink" title="1. 隐式类型转换实例"></a>1. 隐式类型转换实例</h2><p>今天生产库上突然出现MySQL线程数告警，IOPS很高，实例会话里面出现许多类似下面的sql：(修改了相关字段和值)</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT f_col3_id,f_qq1_id FROM d_dbname.t_tb1 WHERE f_col1_id=<span class="number">1226391</span> and f_col2_id=<span class="number">1244378</span> and </div><div class="line">f_qq1_id in (<span class="number">12345</span>,<span class="number">23456</span>,<span class="number">34567</span>,<span class="number">45678</span>,<span class="number">56789</span>,<span class="number">67890</span>,<span class="number">78901</span>,<span class="number">89012</span>,<span class="number">90123</span>,<span class="number">901231</span>,<span class="number">901232</span>,<span class="number">901233</span>)</div></pre></td></tr></table></figure>
<p>用 explain 看了下扫描行数和索引选择情况： </p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt;explain SELECT f<span class="emphasis">_col3_</span>id,f<span class="emphasis">_qq1_</span>id FROM d<span class="emphasis">_dbname.t_</span>tb1 WHERE f<span class="emphasis">_col1_</span>id=1226391 </div><div class="line"><span class="section">and f_col2_id=1244378 and f_qq1_id in (12345,23456,34567,45678,56789,67890,78901,89012,90123,901231,901232,901233);</span></div><div class="line">+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+</div><div class="line"><span class="section">| id   | select_type   | table   | type   | possible_keys                  | key           | key_len    | ref    | rows   | Extra                              |</span></div><div class="line">+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+</div><div class="line"><span class="section">| 1    | SIMPLE        | t_tb1   | ref    | uid_type_frid,idx_corpid_qq1id | uid_type_frid | 8          | const  | 1386   | Using index condition; Using where |</span></div><div class="line">+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+</div><div class="line">共返回 1 行记录,花费 11.52 ms.</div></pre></td></tr></table></figure>
<p>t_tb1 表上有个索引<code>uid_type_frid(f_col2_id,f_type)</code>、<code>idx_corp_id_qq1id(f_col1_id,f_qq1_id)</code>，而且如果选择后者时，f_qq1_id的过滤效果应该很佳，但却选择了前者。当使用 hint <code>use index(idx_corp_id_qq1id)</code>时：<br><a id="more"></a><br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mysql&gt;explain extended SELECT f_col3_id,f_qq1_id FROM d_dbname.t_tb1  use index(idx_corpid_qq1id) WHERE f_col1_id=<span class="number">1226391</span> <span class="literal">and</span> f_col2_id=<span class="number">1244378</span> <span class="literal">and</span> f_qq1_id in (<span class="number">12345</span>,<span class="number">23456</span>,<span class="number">34567</span>,<span class="number">45678</span>,<span class="number">56789</span>,<span class="number">67890</span>,<span class="number">78901</span>,<span class="number">89012</span>,<span class="number">90123</span>,<span class="number">901231</span>,<span class="number">901232</span>,<span class="number">901233</span>)<span class="comment">;</span></div><div class="line">+------+---------------+--------+--------+---------------------+------------------+------------+----------+-------------+------------------------------------+</div><div class="line">| id   | select_type   | table  | type   | possible_keys       | key              | key_len    | ref      | rows        | Extra                              |</div><div class="line">+------+---------------+--------+--------+---------------------+------------------+------------+----------+-------------+------------------------------------+</div><div class="line">| <span class="number">1</span>    | SIMPLE        | t_tb1  | ref    | idx_corpid_qq1id    | idx_corpid_qq1id | <span class="number">8</span>          | const    | <span class="number">2375752</span>     | Using index condition<span class="comment">; Using where |</span></div><div class="line">+---- -+---------------+--------+--------+---------------------+------------------+------------+----------+-------------+------------------------------------+</div><div class="line">共返回 <span class="number">1</span> 行记录,花费 <span class="number">17.48</span> ms.</div><div class="line"></div><div class="line">mysql&gt;show warnings<span class="comment">;</span></div><div class="line">+-----------------+----------------+-----------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level           | Code           | Message                                                                                                               |</div><div class="line">+-----------------+----------------+-----------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Warning         |           <span class="number">1739</span> | Cannot use range access on index 'idx_corpid_qq1id' due to type <span class="literal">or</span> collation conversion on field 'f_qq1_id'           |</div><div class="line">| Note            |           <span class="number">1003</span> | /* select#<span class="number">1</span> */ select `d_dbname`.`t_tb1`.`f_col3_id` AS `f_col3_id`,`d_dbname`.`t_tb1`.`f_qq1_id` AS `f_qq1_id` from `d_dbname`.`t_tb1` USE INDEX (`idx_corpid_qq1id`) where |</div><div class="line">|                 |                |  ((`d_dbname`.`t_tb1`.`f_col2_id` = <span class="number">1244378</span>) <span class="literal">and</span> (`d_dbname`.`t_tb1`.`f_col1_id` = <span class="number">1226391</span>) <span class="literal">and</span> (`d_dbname`.`t_tb1`.`f_qq1_id` in |</div><div class="line">|                 |                | (<span class="number">12345</span>,<span class="number">23456</span>,<span class="number">34567</span>,<span class="number">45678</span>,<span class="number">56789</span>,<span class="number">67890</span>,<span class="number">78901</span>,<span class="number">89012</span>,<span class="number">90123</span>,<span class="number">901231</span>,<span class="number">901232</span>,<span class="number">901233</span>)))                                        |</div><div class="line">+-----------------+----------------+-----------------------------------------------------------------------------------------------------------------------+</div><div class="line">共返回 <span class="number">2</span> 行记录,花费 <span class="number">10.81</span> ms.</div></pre></td></tr></table></figure></p>
<p>rows列达到200w行，但问题也发现了：select_type应该是 range 才对，key_len看出来只用到了<code>idx_corpid_qq1id</code>索引的第一列。上面explain使用了 <code>extended</code>，所以<code>show warnings;</code>可以很明确的看到 f_qq1_id 出现了隐式类型转换：f_qq1_id是varchar，而后面的比较值是整型。</p>
<p>解决该问题就是避免出现隐式类型转换(implicit type conversion)带来的不可控：把f_qq1_id in的内容写成字符串：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt;explain SELECT f<span class="emphasis">_col3_</span>id,f<span class="emphasis">_qq1_</span>id FROM d<span class="emphasis">_dbname.t_</span>tb1 WHERE f<span class="emphasis">_col1_</span>id=1226391 and f<span class="emphasis">_col2_</span>id=1244378 and </div><div class="line"><span class="section">f_qq1_id in ('12345','23456','34567','45678','56789','67890','78901','89012','90123','901231');</span></div><div class="line">+-------+---------------+--------+---------+--------------------------------+------------------+-------------+---------+---------+------------------------------------+</div><div class="line"><span class="section">| id    | select_type   | table  | type    | possible_keys                  | key              | key_len     | ref     | rows    | Extra                              |</span></div><div class="line">+-------+---------------+--------+---------+--------------------------------+------------------+-------------+---------+---------+------------------------------------+</div><div class="line"><span class="section">| 1     | SIMPLE        | t_tb1  | range   | uid_type_frid,idx_corpid_qq1id | idx_corpid_qq1id | 70          |         | 40      | Using index condition; Using where |</span></div><div class="line">+-------+---------------+--------+---------+--------------------------------+------------------+-------------+---------+---------+------------------------------------+</div><div class="line">共返回 1 行记录,花费 12.41 ms.</div></pre></td></tr></table></figure>
<p>扫描行数从1386减少为40。</p>
<p>类似的还出现过一例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>)  <span class="keyword">FROM</span> d_dbname.t_tb2 <span class="keyword">where</span> f_col1_id= <span class="string">'1931231'</span>  <span class="keyword">AND</span> f_phone <span class="keyword">in</span>(<span class="number">098890</span>);</div><div class="line"></div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: '1512-98464356'</div></pre></td></tr></table></figure>
<p>优化后直接从扫描rows 100w行降为1。</p>
<p>借这个机会，系统的来看一下mysql中的隐式类型转换。</p>
<h2 id="2-mysql隐式转换规则"><a href="#2-mysql隐式转换规则" class="headerlink" title="2. mysql隐式转换规则"></a>2. mysql隐式转换规则</h2><h3 id="2-1-规则"><a href="#2-1-规则" class="headerlink" title="2.1 规则"></a>2.1 规则</h3><p>下面来分析一下<a href="http://dev.mysql.com/doc/refman/5.7/en/type-conversion.html" target="_blank" rel="external">隐式转换的规则</a>：</p>
<blockquote>
<p>a. 两个参数至少有一个是 NULL 时，比较的结果也是 NULL，例外是使用 &lt;=&gt; 对两个 NULL 做比较时会返回 1，这两种情况都不需要做类型转换<br>b. 两个参数都是字符串，会按照字符串来比较，不做类型转换<br>c. 两个参数都是整数，按照整数来比较，不做类型转换<br>d. 十六进制的值和非数字做比较时，会被当做二进制串<br>e. 有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为 timestamp<br>f. 有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较<br>g. 所有其他情况下，两个参数都会被转换为浮点数再进行比较</p>
</blockquote>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select 11 + '11', 11 + 'aa', 'a1' + 'bb', 11 + '0.01a';  </span></div><div class="line">+-----------+-----------+-------------+--------------+</div><div class="line"><span class="section">| 11 + '11' | 11 + 'aa' | 'a1' + 'bb' | 11 + '0.01a' |</span></div><div class="line">+-----------+-----------+-------------+--------------+</div><div class="line"><span class="section">|        22 |        11 |           0 |        11.01 |</span></div><div class="line">+-----------+-----------+-------------+--------------+</div><div class="line">1 row in set, 4 warnings (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-------------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                   |</span></div><div class="line">+---------+------+-------------------------------------------+</div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: <span class="emphasis">'aa'</span>    |</div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: <span class="emphasis">'a1'</span>    |</div><div class="line">| Warning | 1292 | Truncated incorrect DOUBLE value: <span class="emphasis">'bb'</span>    |</div><div class="line"><span class="section">| Warning | 1292 | Truncated incorrect DOUBLE value: '0.01a' |</span></div><div class="line">+---------+------+-------------------------------------------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"></div><div class="line"></div><div class="line"><span class="section">mysql&gt; select '11a' = 11, '11.0' = 11, '11.0' = '11', NULL = 1;</span></div><div class="line">+------------+-------------+---------------+----------+</div><div class="line"><span class="section">| '11a' = 11 | '11.0' = 11 | '11.0' = '11' | NULL = 1 |</span></div><div class="line">+------------+-------------+---------------+----------+</div><div class="line"><span class="section">|          1 |           1 |             0 |     NULL |</span></div><div class="line">+------------+-------------+---------------+----------+</div><div class="line">1 row in set, 1 warning (0.01 sec)</div></pre></td></tr></table></figure>
<p>上面可以看出<code>11 + &#39;aa&#39;</code>，由于操作符两边的类型不一样且符合第g条，<code>aa</code>要被转换成浮点型小数，然而转换失败（字母被截断），可以认为转成了 0，整数<code>11</code>被转成浮点型还是它自己，所以<code>11 + &#39;aa&#39; = 11</code>。</p>
<p><code>0.01a</code>转成double型也是被截断成<code>0.01</code>，所以<code>11 + &#39;0.01a&#39; = 11.01</code>。</p>
<p>等式比较也说明了这一点，<code>&#39;11a&#39;</code>和<code>&#39;11.0&#39;</code>转换后都等于 <code>11</code>，这也正是文章开头实例为什么没走索引的原因： varchar型的f_qq1_id，转换成浮点型比较时，等于 12345 的情况有无数种如12345a、12345.b等待，MySQL优化器无法确定索引是否更有效，所以选择了其它方案。</p>
<p>但并不是只要出现隐式类型转换，就会引起上面类似的性能问题，最终是要看转换后能否有效选择索引。像<code>f_id = &#39;654321&#39;</code>、<code>f_mtime between &#39;2016-05-01 00:00:00&#39; and &#39;2016-05-04 23:59:59&#39;</code>就不会影响索引选择，因为前者f_id是整型，即使与后面的字符串型数字转换成double比较，依然能根据double确定f_id的值，索引依然有效。后者是因为符合第e条，只是右边的常量做了转换。</p>
<p>开发人员可能都只要存在这么一个隐式类型转换的坑，但却又经常不注意，所以干脆无需记住那么多规则，该什么类型就与什么类型比较。</p>
<h3 id="2-2-隐式类型转换的安全问题"><a href="#2-2-隐式类型转换的安全问题" class="headerlink" title="2.2 隐式类型转换的安全问题"></a>2.2 隐式类型转换的安全问题</h3><p>implicit type conversion 不仅可能引起性能问题，还有可能产生安全问题。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; desc t_account;</span></div><div class="line">+-----------+-------------+------+-----+---------+----------------+</div><div class="line"><span class="section">| Field     | Type        | Null | Key | Default | Extra          |</span></div><div class="line">+-----------+-------------+------+-----+---------+----------------+</div><div class="line">| fid       | int(11)     | NO   | PRI | NULL    | auto<span class="emphasis">_increment |</span></div><div class="line">| fname     | varchar(20) | YES  |     | NULL    |                |</div><div class="line">| fpassword | varchar(50) | YES  |     | NULL    |                |</div><div class="line">+-----------+-------------+------+-----+---------+----------------+</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from t_account;</span></div><div class="line">+-----+-----------+-------------+</div><div class="line"><span class="section">| fid | fname     | fpassword   |</span></div><div class="line">+-----+-----------+-------------+</div><div class="line">|   1 | xiaoming  | p<span class="emphasis">_xiaoming  |</span></div><div class="line">|   2 | xiaoming1 | p_xiaoming1 |</div><div class="line"><span class="code">+-----+</span>-----------<span class="code">+-------------+</span></div><div class="line"></div><div class="line">假如应用前端没有WAF防护，那么下面的sql很容易注入：</div><div class="line">mysql&gt; select * from t<span class="emphasis">_account where fname='A' ;</span></div><div class="line"></div><div class="line">fname传入  A' OR 1=<span class="emphasis">'1  </span></div><div class="line"></div><div class="line">mysql&gt; select * from t<span class="emphasis">_account where fname='A' OR 1='1';</span></div></pre></td></tr></table></figure></p>
<p>攻击者更聪明一点： fname传入 <code>A&#39;+&#39;B</code>  ，fpassword传入 <code>ccc&#39;+0</code> ：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select * from t_account where fname='A'+'B' and fpassword='ccc'+0;</span></div><div class="line">+-----+-----------+-------------+</div><div class="line"><span class="section">| fid | fname     | fpassword   |</span></div><div class="line">+-----+-----------+-------------+</div><div class="line">|   1 | xiaoming  | p<span class="emphasis">_xiaoming  |</span></div><div class="line">|   2 | xiaoming1 | p_xiaoming1 |</div><div class="line"><span class="code">+-----+</span>-----------<span class="code">+-------------+</span></div><div class="line">2 rows in set, 7 warnings (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://yq.aliyun.com/articles/39477" target="_blank" rel="external">MySQL隐式转化整理</a></li>
<li><a href="http://blog.itpub.net/22418990/viewspace-1302080/" target="_blank" rel="external">WHRER条件里的数据类型必须和字段数据类型一致</a></li>
<li><a href="https://vagosec.org/2013/04/mysql-implicit-type-conversion/" target="_blank" rel="external">Implicit type conversion in MySQL</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/05/05/mysql-type-conversion/">http://seanlook.com/2016/05/05/mysql-type-conversion/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-隐式类型转换实例&quot;&gt;&lt;a href=&quot;#1-隐式类型转换实例&quot; class=&quot;headerlink&quot; title=&quot;1. 隐式类型转换实例&quot;&gt;&lt;/a&gt;1. 隐式类型转换实例&lt;/h2&gt;&lt;p&gt;今天生产库上突然出现MySQL线程数告警，IOPS很高，实例会话里面出现许多类似下面的sql：(修改了相关字段和值)&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;SELECT f_col3_id,f_qq1_id FROM d_dbname.t_tb1 WHERE f_col1_id=&lt;span class=&quot;number&quot;&gt;1226391&lt;/span&gt; and f_col2_id=&lt;span class=&quot;number&quot;&gt;1244378&lt;/span&gt; and &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f_qq1_id in (&lt;span class=&quot;number&quot;&gt;12345&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;23456&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;34567&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;45678&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;56789&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;67890&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;78901&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;89012&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;90123&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;901231&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;901232&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;901233&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用 explain 看了下扫描行数和索引选择情况： &lt;/p&gt;
&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt;explain SELECT f&lt;span class=&quot;emphasis&quot;&gt;_col3_&lt;/span&gt;id,f&lt;span class=&quot;emphasis&quot;&gt;_qq1_&lt;/span&gt;id FROM d&lt;span class=&quot;emphasis&quot;&gt;_dbname.t_&lt;/span&gt;tb1 WHERE f&lt;span class=&quot;emphasis&quot;&gt;_col1_&lt;/span&gt;id=1226391 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;and f_col2_id=1244378 and f_qq1_id in (12345,23456,34567,45678,56789,67890,78901,89012,90123,901231,901232,901233);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| id   | select_type   | table   | type   | possible_keys                  | key           | key_len    | ref    | rows   | Extra                              |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| 1    | SIMPLE        | t_tb1   | ref    | uid_type_frid,idx_corpid_qq1id | uid_type_frid | 8          | const  | 1386   | Using index condition; Using where |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------+---------------+---------+--------+--------------------------------+---------------+------------+--------+--------+------------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;共返回 1 行记录,花费 11.52 ms.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;t_tb1 表上有个索引&lt;code&gt;uid_type_frid(f_col2_id,f_type)&lt;/code&gt;、&lt;code&gt;idx_corp_id_qq1id(f_col1_id,f_qq1_id)&lt;/code&gt;，而且如果选择后者时，f_qq1_id的过滤效果应该很佳，但却选择了前者。当使用 hint &lt;code&gt;use index(idx_corp_id_qq1id)&lt;/code&gt;时：&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="schema设计" scheme="http://seanlook.com/tags/schema%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数字类型int与tinyint、float与decimal如何选择</title>
    <link href="http://seanlook.com/2016/04/29/mysql-numeric-int-float/"/>
    <id>http://seanlook.com/2016/04/29/mysql-numeric-int-float/</id>
    <published>2016-04-29T08:32:49.000Z</published>
    <updated>2016-04-29T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在准备给开发做一个mysql数据库开发规范方面培训，一步一步来，结合在生产环境发现的数据库方面的问题，从几个常用的数据类型说起。</p>
<h2 id="int、tinyint与bigint"><a href="#int、tinyint与bigint" class="headerlink" title="int、tinyint与bigint"></a>int、tinyint与bigint</h2><p>它们都是（精确）整型数据类型，但是占用字节数和表达的范围不同。首先没有这个表就说不过去了：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Storage</th>
<th>Minimum Value</th>
<th>Maximum Value</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>(Bytes)</td>
<td>(Signed/Unsigned)</td>
<td>(Signed/Unsigned)</td>
</tr>
<tr>
<td>TINYINT</td>
<td>1</td>
<td>-128</td>
<td>127</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>-32768</td>
<td>32767</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>-8388608</td>
<td>8388607</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>16777215</td>
</tr>
<tr>
<td>INT</td>
<td>4</td>
<td>-2147483648</td>
<td>2147483647</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>-9223372036854775808</td>
<td>9223372036854775807</td>
</tr>
<tr>
<td></td>
<td></td>
<td>0</td>
<td>18446744073709551615</td>
</tr>
</tbody>
</table>
<p>只需要知道对应类型占多少字节就能推算出范围了，比如int占 4 bytes,即4*8=32bits，大约10位数字，也能理解为什么int默认显示位数是11。</p>
<p>遇到比较多的是tinyint和bigint，tinyint一般用于存放status,type这种数值小的数据，不够用时可能会用smallint。bigint一般用于自增主键。</p>
<p>为了避免数据库被过度设计，布尔、枚举类型也采用tinyint。</p>
<p>还有一点也是经常被提到的关于 int(M) 中M的理解，int型数据无论是int(4)还是int(11)，都已经占用了 4 bytes 存储空间，M表示的只是显示宽度(display width, max value 255)，并不是定义int的长度。</p>
<p>例如：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE `tc_integer` (</div><div class="line">  `f_id` bigint(20) PRIMARY KEY AUTO_INCREMENT,</div><div class="line">  `f_type` tinyint,</div><div class="line">  `f_flag` tinyint(1),</div><div class="line">  `f_num` smallint(5) unsigned ZEROFILL</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line">mysql&gt; desc tc_integer;</div><div class="line">+----------------+-------------------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> Field          </span>|<span class="string"> Type                          </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra          </span>|</div><div class="line">+----------------+-------------------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> f_id           </span>|<span class="string"> bigint(20)                    </span>|<span class="string"> NO   </span>|<span class="string"> PRI </span>|<span class="string"> NULL    </span>|<span class="string"> auto_increment </span>|</div><div class="line">|<span class="string"> f_type         </span>|<span class="string"> tinyint(4)                    </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> f_flag         </span>|<span class="string"> tinyint(1)                    </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> f_num          </span>|<span class="string"> smallint(5) unsigned zerofill </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</div><div class="line">+----------------+-------------------------------+------+-----+---------+----------------+</div><div class="line">4 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>插入几条数据看一下：<br><a id="more"></a></p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into tc<span class="emphasis">_integer values(1, 1, 1, 1);</span></div><div class="line">Query OK, 1 row affected (0.02 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_integer values(9223372036854775808, 127, 127, 65535);</span></div><div class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                       |</span></div><div class="line">+---------+------+-----------------------------------------------+</div><div class="line"><span class="section">| Warning | 1264 | Out of range value for column 'f_id' at row 1 |</span></div><div class="line">+---------+------+-----------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select i.*, length(i.f_flag) as len_flag from tc_integer i;</span></div><div class="line">+---------------------+--------------+---------------+----------------+----------+</div><div class="line"><span class="section">| f_id                | f_type       | f_flag        | f_num          | len_flag |</span></div><div class="line">+---------------------+--------------+---------------+----------------+----------+</div><div class="line">|                   1 |            1 |             1 |          00001 |        1 |</div><div class="line"><span class="section">| 9223372036854775807 |          127 |           127 |          65535 |        3 |</span></div><div class="line">+---------------------+--------------+---------------+----------------+----------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from tc_integer where f_num=' 01' and f_num=1 and f_num=f_flag;</span></div><div class="line">+------+--------------+---------------+----------------+</div><div class="line"><span class="section">| f_id | f_type       | f_flag        | f_num          |</span></div><div class="line">+------+--------------+---------------+----------------+</div><div class="line"><span class="section">|    1 |            1 |             1 |          00001 |</span></div><div class="line">+------+--------------+---------------+----------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>上面的实验说明了几个问题：</p>
<ul>
<li>f_id列插入比最大值还大的数，出现warnings，并且最终的值自动变成 9223372036854775807 。这个坑曾经在迁移到阿里RDS时遇到过，他们的迁移工具是java写的，结果我们的主键值大于java INTEGER里面的最大限制，导致 duplicate key问题。</li>
<li>f_flag的显示宽度为1，但并不影响更多位数的显示。也证实了tinyint(1)并不像char(1)那样限制存储长度</li>
<li>f_num定义成无符号的zerofill类型，能存储的最大数值是65535，而signed才是32767。（当列上使用zerofill时，unsigned会自动加上）</li>
<li>zerofill的作用是在显示检索结果的时候，左边用0补齐到display width，实际存储时不补0的，仅作为返回结果meta data的一部分。查询的条件值忽略0和空格</li>
<li>length()在numeric类型中作用于char_length()一样，因为字节数已经固定了。</li>
</ul>
<p>zerofill的使用可能会在复杂join时因为了解不够深入而带来问题，所以最终的结论也很简单：除非极端的特殊需要，尽量不用zerofill，建表时这类int无需指定 (11) 这样的显示宽度。</p>
<h2 id="float与decimal"><a href="#float与decimal" class="headerlink" title="float与decimal"></a>float与decimal</h2><p>MySQL使用<code>DECIMAL</code>类型去存储对精度要求比较高的数值，比如金额，也叫定点数，decimal在mysql内存是以<del>字符串</del>二进制存储的。声明语法是<code>DECIMAL(M,D)</code>，<del>占用字节 M+2 bytes</del>。M是数字最大位数（精度precision），范围1-65；D是小数点右侧数字个数（标度scale），范围0-30，但不得超过M。</p>
<p>占用字节数计算方法 —— 小数和整数分别计算，每9位数占4字节，剩余部分如下表换算：</p>
<table>
<thead>
<tr>
<th>Leftover Digits</th>
<th>Number of Bytes</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1–2</td>
<td>1</td>
</tr>
<tr>
<td>3–4</td>
<td>2</td>
</tr>
<tr>
<td>5–6</td>
<td>3</td>
</tr>
<tr>
<td>7–9</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>比如<code>DECIMAL(18,9)</code>，整数部分和小数部分各9位，所以各占4字节，共8bytes<br>再比如<code>DECIMAL(20,6)</code>，整数14位，需要4字节存9位，还需3字节存5位；小数6位，需3字节。共10bytes<br>（感谢 consatan 在评论区提出文中错误）</p>
<p>比如定义<code>DECIMAL(7,3)</code>：</p>
<ul>
<li>能存的数值范围是 -9999.999 ~ 9999.999，占用4个字节</li>
<li>123.12 -&gt; 123.120，因为小数点后未满3位，补0</li>
<li>123.1245 -&gt; 123.125，小数点只留3位，多余的自动四舍五入截断</li>
<li>12345.12 -&gt; 保存失败，因为小数点未满3位，补0变成12345.120，超过了7位。严格模式下报错，非严格模式存成9999.999</li>
</ul>
<p>MySQL使用<code>FLOAT</code>和<code>DOUBLE</code>来表示近似数值类型，这是因为十进制0.1在电脑里用二进制是无法精确表示的，<a href="https://segmentfault.com/a/1190000004112565" target="_blank" rel="external">只能尽可能的接近</a>。</p>
<p>单精度浮点数float占4字节，float标准语法允许通过<code>FLOAT(M)</code>的形式指定精度，但是这个精度值M只是决定存储大小： 0-23与默认不指定效果相同，24-53就变成双精度的<code>DOUBLE</code>了。</p>
<p>float还有非MySQL自己实现的<em>非标准</em>语法<code>FLOAT(M,D)</code>，代表最多存储M个数字长度，其中小数点后数字个数为D。效果与 DECIMAL(M,D)很相似。</p>
<p>double 和 float 的区别是double精度高，有效数字16位（float精度7位）。但double消耗内存是float的两倍，占8字节，double的运算速度比float慢得多。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">msyql&gt; create table tc_float(fid int primary <span class="type">key</span> auto_increment,f_float <span class="type">float</span>, f_float10 <span class="type">float</span>(<span class="number">10</span>), f_float25 <span class="type">float</span>(<span class="number">25</span>), f_float7_3 <span class="type">float</span>(<span class="number">7</span>,<span class="number">3</span>), f_float9_2 <span class="type">float</span>(<span class="number">9</span>,<span class="number">2</span>), f_float30_3 <span class="type">float</span>(<span class="number">30</span>,<span class="number">3</span>), f_decimal9_2 decimal(<span class="number">9</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">mysql&gt; insert into tc_float(f_float,f_float10,f_float25) values(<span class="number">123456</span>,<span class="number">123456</span>,<span class="number">123456</span>);</div><div class="line">mysql&gt; insert into tc_float(f_float,f_float10,f_float25) values(<span class="number">1234567.89</span>,<span class="number">12345.67</span>,<span class="number">1234567.89</span>);</div><div class="line">mysql&gt; select * from tc_float;</div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line">| fid | f_float  | f_float10 | f_float25  | f_float7_3 | f_float9_2 | f_float30_3 | f_decimal9_2 |</div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line">|   <span class="number">1</span> |   <span class="number">123456</span> |    <span class="number">123456</span> |     <span class="number">123456</span> | NULL       | NULL       | NULL        | NULL         |</div><div class="line">|   <span class="number">2</span> |  <span class="number">1234570</span> |   <span class="number">12345.7</span> | <span class="number">1234567.89</span> | NULL       | NULL       | NULL        | NULL         |</div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div></pre></td></tr></table></figure>
<ul>
<li>可以看到float与float(10)是没区别的，float默认能精确到6位有效数字</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into tc<span class="emphasis">_float(f_</span>float9<span class="emphasis">_2,f_</span>decimal9<span class="emphasis">_2) values(123456.78,123456.78);</span></div><div class="line">mysql&gt; insert into tc_float(f<span class="emphasis">_float9_</span>2,f<span class="emphasis">_decimal9_</span>2) values(1234567.1,1234567.125);</div><div class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+-------+------+---------------------------------------------------+</div><div class="line"><span class="section">| Level | Code | Message                                           |</span></div><div class="line">+-------+------+---------------------------------------------------+</div><div class="line"><span class="section">| Note  | 1265 | Data truncated for column 'f_decimal9_2' at row 1 |</span></div><div class="line">+-------+------+---------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from tc_float;</span></div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line"><span class="section">| fid | f_float  | f_float10 | f_float25  | f_float7_3 | f_float9_2 | f_float30_3 | f_decimal9_2 |</span></div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line">|   6 | NULL     | NULL      | NULL       | NULL       |  123456.78 | NULL        |    123456.78 |</div><div class="line"><span class="section">|   9 | NULL     | NULL      | NULL       | NULL       | 1234567.12 | NULL        |   1234567.13 |</span></div><div class="line">+-----+----------+-----------+------------+------------+------------+-------------+--------------+</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_float(f_</span>float7<span class="emphasis">_3) values(12345.1);</span></div><div class="line">ERROR 1264 (22003): Out of range value for column 'f_float7<span class="emphasis">_3' at row 1</span></div></pre></td></tr></table></figure>
<ul>
<li>float(9,2)与decimal(9,2)是很像的，并没有前面提到24位一下6位有效数字的限制</li>
<li>他们俩之间的差别就在精度上，f_float9_2本应该是 1234567.10，结果小数点变成 .12 。f_decimal9_2因为标度为2，所以 .125 四舍五入成 .13</li>
<li>将 12345.1 插入f_float7_3列，因为转成标度3时 12345.100，整个位数大于7，所以 out of range 了</li>
</ul>
<p>另外在编程中应尽量避免做浮点数的比较，否则可能会导致一些潜在的问题。</p>
<p>坚决不允许使用float去存money，使用decimal更加稳妥，但使用decimal做除法依旧会产生浮点型，所以特殊情况请考虑使用整型，货币单位使用 分 ，或者除法在最后进行。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.path8.net/tn/archives/951" target="_blank" rel="external">MySQL各数据类型的区别</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/out-of-range-and-overflow.html" target="_blank" rel="external">MySQL manual Out-of-Range and Overflow Handling</a></li>
<li><a href="http://www.intechgrity.com/mysql-datatypes-working-with-fraction-and-decimal-dec/" target="_blank" rel="external">MySQL FLOAT vs DEC: working with fraction and decimal</a></li>
<li><a href="http://www.noelherrick.com/blog/always-use-decimal-for-money" target="_blank" rel="external">Never use floats for money</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/04/29/mysql-numeric-int-float/">http://seanlook.com/2016/04/29/mysql-numeric-int-float/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在准备给开发做一个mysql数据库开发规范方面培训，一步一步来，结合在生产环境发现的数据库方面的问题，从几个常用的数据类型说起。&lt;/p&gt;
&lt;h2 id=&quot;int、tinyint与bigint&quot;&gt;&lt;a href=&quot;#int、tinyint与bigint&quot; class=&quot;headerlink&quot; title=&quot;int、tinyint与bigint&quot;&gt;&lt;/a&gt;int、tinyint与bigint&lt;/h2&gt;&lt;p&gt;它们都是（精确）整型数据类型，但是占用字节数和表达的范围不同。首先没有这个表就说不过去了：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Storage&lt;/th&gt;
&lt;th&gt;Minimum Value&lt;/th&gt;
&lt;th&gt;Maximum Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(Bytes)&lt;/td&gt;
&lt;td&gt;(Signed/Unsigned)&lt;/td&gt;
&lt;td&gt;(Signed/Unsigned)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TINYINT&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-128&lt;/td&gt;
&lt;td&gt;127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMALLINT&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-32768&lt;/td&gt;
&lt;td&gt;32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MEDIUMINT&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-8388608&lt;/td&gt;
&lt;td&gt;8388607&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;16777215&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INT&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-2147483648&lt;/td&gt;
&lt;td&gt;2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BIGINT&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;-9223372036854775808&lt;/td&gt;
&lt;td&gt;9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;18446744073709551615&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;只需要知道对应类型占多少字节就能推算出范围了，比如int占 4 bytes,即4*8=32bits，大约10位数字，也能理解为什么int默认显示位数是11。&lt;/p&gt;
&lt;p&gt;遇到比较多的是tinyint和bigint，tinyint一般用于存放status,type这种数值小的数据，不够用时可能会用smallint。bigint一般用于自增主键。&lt;/p&gt;
&lt;p&gt;为了避免数据库被过度设计，布尔、枚举类型也采用tinyint。&lt;/p&gt;
&lt;p&gt;还有一点也是经常被提到的关于 int(M) 中M的理解，int型数据无论是int(4)还是int(11)，都已经占用了 4 bytes 存储空间，M表示的只是显示宽度(display width, max value 255)，并不是定义int的长度。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; CREATE TABLE `tc_integer` (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `f_id` bigint(20) PRIMARY KEY AUTO_INCREMENT,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `f_type` tinyint,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `f_flag` tinyint(1),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `f_num` smallint(5) unsigned ZEROFILL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) ENGINE=InnoDB DEFAULT CHARSET=utf8;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; desc tc_integer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+----------------+-------------------------------+------+-----+---------+----------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;span class=&quot;string&quot;&gt; Field          &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; Type                          &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; Null &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; Key &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; Default &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; Extra          &lt;/span&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+----------------+-------------------------------+------+-----+---------+----------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;span class=&quot;string&quot;&gt; f_id           &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; bigint(20)                    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; NO   &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; PRI &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; NULL    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; auto_increment &lt;/span&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;span class=&quot;string&quot;&gt; f_type         &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; tinyint(4)                    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; YES  &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; NULL    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                &lt;/span&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;span class=&quot;string&quot;&gt; f_flag         &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; tinyint(1)                    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; YES  &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; NULL    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                &lt;/span&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;span class=&quot;string&quot;&gt; f_num          &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; smallint(5) unsigned zerofill &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; YES  &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; NULL    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                &lt;/span&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+----------------+-------------------------------+------+-----+---------+----------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4 rows in set (0.01 sec)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;插入几条数据看一下：&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="schema设计" scheme="http://seanlook.com/tags/schema%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>MySQL字符数据类型char与varchar的区别</title>
    <link href="http://seanlook.com/2016/04/28/mysql-char-varchar-set/"/>
    <id>http://seanlook.com/2016/04/28/mysql-char-varchar-set/</id>
    <published>2016-04-28T08:32:49.000Z</published>
    <updated>2016-04-28T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据类型差不多是接触mysql一开始就了解的内容，最近遇到几个现象如varchar自动转mediumtext，blob存储性能的问题，不得不回头明确一下关于MySQL常用数据类型的选择。</p>
<p><a href="http://dev.mysql.com/doc/refman/5.6/en/char.html" target="_blank" rel="external">mysql手册这里</a> 已经讲的很清楚了。它们都是定义字符串型字段时常用的类型，但它们存储和检索的方式有不同，最大长度和尾部的空格是否保留也有差别。</p>
<p><code>char</code>类型是使用固定长度空间进行存储，范围0-255。比如<code>CHAR(30)</code>能放30个字节，存放abcd时，尾部会以空格补齐，实际占用空间 30bytes 。检索它的时候尾部空格会被去除。</p>
<p>char善于存储经常改变的值，或者长度相对固定的值，比如type、ip地址或md5之类的数据，不容易产生碎片。关于它的效率可以参考<a href="http://bbs.chinaunix.net/thread-1696053-1-1.html" target="_blank" rel="external">这里</a>。</p>
<p><code>varchar</code>类型保存可变长度字符串，范围0-65535（但受到单行最大64kb的限制）。比如用<code>varchar(30)</code>去存放abcd，实际使用5个字节，因为还需要使用额外1个字节来标识字串长度（0-255使用1个字节，超过255需要2个字节）。</p>
<p>varchar善于存储值的长短不一的列，也是用的最多的一种类型，节省磁盘空间。update时varchar列时，如果新数据比原数据大，数据库需要重新开辟空间，这一点会有性能略有损耗，但innodb引擎下查询效率比char高一点。这也是innodb官方推荐的类型。</p>
<p>如果存储时真实长度超过了char或者varchar定义的最大长度呢？</p>
<ul>
<li>在SQL严格模式下，无论char还是varchar，如果尾部要被截断的是非空格，会提示错误，即插入失败</li>
<li>在SQL非严格模式下，无论char还是varchar，如果尾部要被截断的是非空格，会提示warning，但可以成功</li>
<li>如果尾部要被截断的是空格，无论SQL所处模式，varchar都可以插入成功但提示warning；char也可以插入成功，并且无任何提示</li>
</ul>
<p>这里特意提到SQL的严格模式，是因为在工作中也遇到过一些坑，参考<a href="">MySQL的sql_mode严格模式注意点</a>。</p>
<p>贴上官方的一个表格：</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>CHAR(4)</th>
<th>Storage Required</th>
<th>VARCHAR(4)</th>
<th>Storage Required</th>
</tr>
</thead>
<tbody>
<tr>
<td>‘’</td>
<td>‘    ‘</td>
<td>4 bytes</td>
<td>‘’</td>
<td>1 byte</td>
</tr>
<tr>
<td>‘ab’</td>
<td>‘ab  ‘</td>
<td>4 bytes</td>
<td>‘ab’</td>
<td>3 bytes</td>
</tr>
<tr>
<td>‘abcd’</td>
<td>‘abcd’</td>
<td>4 bytes</td>
<td>‘abcd’</td>
<td>5 bytes</td>
</tr>
<tr>
<td>‘abcdefgh’</td>
<td>‘abcd’</td>
<td>4 bytes</td>
<td>‘abcd’</td>
<td>5 bytes</td>
</tr>
</tbody>
</table>
<p>另外，mysql字段值比较时默认是不区分大小写的，这是由于他们的校对规则（一般是 utf8_general_ci）决定的，按字符比较，所以查询时 值尾部 的空格也是被忽略的，除非建表时对列指定 <code>BINARY</code> （校对字符集变成utf8_bin）或者<code>select * from vc where binary v=&#39;ab  &#39;;</code>，就会按字节比较，即比较时区分大小写和尾部空格。</p>
<p>需要注意的是，使用varchar不能因为长度可变就随意分大空间，比如90个字节能放够的列定义成varchar(200)，因为开辟内存时是以200字节进行的，遇到需要filesort或tmp table作业可能会带来不利影响。</p>
<a id="more"></a>
<p>最后研究一下字符集对存储长度影响，以 <code>create table tc_utf8(c1 int primary key auto_increment, c2 char(30), c3 varchar(N)) charset=utf8;</code> 为例：</p>
<p>字符集为utf8，于是中文每个字符占3个字节，英文还是1个字节，所以N最大为 (65535-1-2-4-30<em>3)/3 = 21812，即最多能存放21812个英文、数字、汉字。其中65535是单行最大限制，减1是NULL标识位，减2的是头部的2个字节标识长度，减30</em>3的原因是char(30)占用90个字节，最后除以3还是因为utf8最长用3个字节表示一个字符。</p>
<p>但有人会说，utf8的英文字符只需要1个字节表示，并不占用3个字节，在存ASCII字符的情况下N是不是可以更大呢。答案是否定的，因为定义表的时候mysql事先并不知道c3要存的是英文还在中文，只能以最大来计。mysql也是以这种方式来确保行最大65535bytes限制：数据行只要出现一个ascii字符（如英文字母、数字），就永远达不到65535，数据行全中文则刚好满。</p>
<p>还有一种特殊情况：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show variables like "char%";</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line"><span class="section">| Variable_name            | Value                      |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character<span class="emphasis">_set_</span>client     | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>connection | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>database   | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>filesystem | binary                     |</div><div class="line">| character<span class="emphasis">_set_</span>results    | utf8                       |</div><div class="line">| character<span class="emphasis">_set_</span>server     | latin1                     |</div><div class="line">| character<span class="emphasis">_set_</span>system     | utf8                       |</div><div class="line"><span class="section">| character_sets_dir       | /usr/share/mysql/charsets/ |</span></div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows in set (0.12 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select @@sql_mode;</span></div><div class="line">+------------------------+</div><div class="line"><span class="section">| @@sql_mode             |</span></div><div class="line">+------------------------+</div><div class="line"><span class="section">| NO_ENGINE_SUBSTITUTION |</span></div><div class="line">+------------------------+</div><div class="line">1 rows in set (0.13 sec)</div><div class="line"></div><div class="line">mysql&gt; create table tc<span class="emphasis">_utf8_</span>21812(c1 int primary key auto<span class="emphasis">_increment, c2 char(30), c3 varchar(21812)) charset=utf8;</span></div><div class="line">Query OK, 0 rows affected (0.10 sec)</div><div class="line"></div><div class="line">mysql&gt; create table tc<span class="emphasis">_utf8_</span>21813(c1 int primary key auto<span class="emphasis">_increment, c2 char(30), c3 varchar(21845)) charset=utf8;</span></div><div class="line">Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. This includes storage overhead, check the manual. You have to change some columns to TEXT or BLOBs</div><div class="line"></div><div class="line">mysql&gt; create table tc<span class="emphasis">_utf8_</span>21846(c1 int primary key auto<span class="emphasis">_increment, c2 char(30), c3 varchar(21846)) charset=utf8;</span></div><div class="line">Query OK, 0 rows affected, 1 warnings (0.10 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+-------+------+---------------------------------------------+</div><div class="line"><span class="section">| Level | Code | Message                                     |</span></div><div class="line">+-------+------+---------------------------------------------+</div><div class="line"><span class="section">| Note  | 1246 | Converting column 'c3' from VARCHAR to TEXT |</span></div><div class="line">+-------+------+---------------------------------------------+</div><div class="line">1 rows in set (0.14 sec)</div></pre></td></tr></table></figure>
<p>即在非严格模式下，因为N=21813 &gt; 21812，所以报 Row size too large 错误。但N=21846 &gt; (65535/3)时，只是出现warnings，varchar自动变成了mediumtext 类型。</p>
<p>细心的朋友可能注意到上面开始我看了一下字符集 <code>show variabels like &quot;char%&quot;;</code>，因为接下来要说明另外一个问题：客户端字符集与database不一样的情况。</p>
<p>我们回到 N&lt;=21812 的正常情况：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tc_utf8`</span> (</div><div class="line">  <span class="string">`c1`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`c2`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`c3`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`c1`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p>插入一些数据：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set names utf8;</div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('en_</span>30',repeat(<span class="emphasis">'a'</span>,30));</div><div class="line">Query OK, 1 rows affected (17.87 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('en_</span>31',repeat(<span class="emphasis">'b'</span>,31));</div><div class="line">Query OK, 1 rows affected, 1 warnings (0.10 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Warning | 1265 | Data truncated for column 'c3' at row 1 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line">1 rows in set (0.14 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>30',repeat(<span class="emphasis">'中'</span>,30));</div><div class="line">Query OK, 1 rows affected (0.18 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>31',repeat(<span class="emphasis">'文'</span>,31));</div><div class="line">Query OK, 1 rows affected, 1 warnings (0.09 sec)</div><div class="line"></div><div class="line">意料之中，汉字同样被截断</div><div class="line"></div><div class="line"><span class="section">ysql&gt; select c2,c3,length(c3),char_length(c3) from tc_utf8;</span></div><div class="line">+-------+------------+-----------------+------------------------------------------------------------------------+</div><div class="line"><span class="section">| c2    | length(c3) | char_length(c3) | c3                                                                     |</span></div><div class="line">+-------+------------+-----------------+------------------------------------------------------------------------+</div><div class="line">| en<span class="emphasis">_30 |         30 |              30 | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                                         |</span></div><div class="line">| en_31 |         30 |              30 | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb                                         |</div><div class="line">| zh<span class="emphasis">_30 |         90 |              30 | 中中中中中中中中中中中中中中中中中中中中中中中中中中中中中中 |</span></div><div class="line">| zh_31 |         90 |              30 | 文文文文文文文文文文文文文文文文文文文文文文文文文文文文文文 |</div><div class="line"><span class="code">+-------+</span>------------<span class="code">+-----------------+</span>------------------------------------------------------------------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>上面的en_30代表insert的时候存入<em>30</em>个<em>英文</em>字符。可以看到30个a占用30个字节，30个汉字占用90个字节，大于30的会被截断，证实了文章一开头的说法。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set names latin1;</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>30<span class="emphasis">_latin1',repeat('中',30));</span></div><div class="line">Query OK, 1 rows affected, 1 warnings (0.10 sec)</div><div class="line"></div><div class="line"><span class="section">mysql&gt; show warnings;</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Level   | Code | Message                                 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line"><span class="section">| Warning | 1265 | Data truncated for column 'c3' at row 1 |</span></div><div class="line">+---------+------+-----------------------------------------+</div><div class="line">1 rows in set (0.14 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>10<span class="emphasis">_latin1',repeat('中',10));</span></div><div class="line">Query OK, 1 rows affected (0.10 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>10<span class="emphasis">_latin1',repeat('文',10));</span></div><div class="line">Query OK, 1 rows affected (0.11 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into tc<span class="emphasis">_utf8(c2,c3) values('zh_</span>11<span class="emphasis">_latin1',repeat('文',11));</span></div><div class="line">Query OK, 1 rows affected, 1 warnings (0.12 sec)</div><div class="line"></div><div class="line">截断</div></pre></td></tr></table></figure>
<p>上面的实验显示，db table是utf8，但客户端连接时使用latin1，在非严格模式下 varchar(30) <strong>只能存10</strong>个汉字，多余的尾部被截断了</p>
<p>我们来看一下占用字节的情况：（2,3行的乱码是意料之中的）</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select c1,c2,c3,length(c3),char_length(c3) from tc_utf8;</div><div class="line">+----+--------------+--------------------------------+------------+-----------------+</div><div class="line">|<span class="string"> c1 </span>|<span class="string"> c2           </span>|<span class="string"> c3                             </span>|<span class="string"> length(c3) </span>|<span class="string"> char_length(c3) </span>|</div><div class="line">+----+--------------+--------------------------------+------------+-----------------+</div><div class="line">|<span class="string"> 1  </span>|<span class="string"> en_30        </span>|<span class="string"> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa </span>|<span class="string"> 30         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 2  </span>|<span class="string"> en_31        </span>|<span class="string"> bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb </span>|<span class="string"> 30         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 3  </span>|<span class="string"> zh_30        </span>|<span class="string"> ?????????????????????????????? </span>|<span class="string"> 90         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 4  </span>|<span class="string"> zh_31        </span>|<span class="string"> ?????????????????????????????? </span>|<span class="string"> 90         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 5  </span>|<span class="string"> zh_30_latin1 </span>|<span class="string"> 中中中中中中中中中中 </span>|<span class="string"> 60         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 6  </span>|<span class="string"> zh_10_latin1 </span>|<span class="string"> 中中中中中中中中中中 </span>|<span class="string"> 60         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 7  </span>|<span class="string"> zh_10_latin1 </span>|<span class="string"> 文文文文文文文文文文 </span>|<span class="string"> 80         </span>|<span class="string"> 30              </span>|</div><div class="line">|<span class="string"> 9  </span>|<span class="string"> zh_11_latin1 </span>|<span class="string"> 文文文文文文文文文文 </span>|<span class="string"> 80         </span>|<span class="string"> 30              </span>|</div><div class="line">+----+--------------+--------------------------------+------------+-----------------+</div><div class="line">8 rows in set (0.14 sec)</div></pre></td></tr></table></figure>
<p>看到char_length函数算出的中、英文字符个数都是30，但一个“中”占6字节，一个“文”占8字节，是不是很诧异，这中间有数次的编码转换过程，有兴趣 可以参考 <a href="http://mysql.rjweb.org/doc.php/charcoll" target="_blank" rel="external">http://mysql.rjweb.org/doc.php/charcoll</a> ，是可以模拟出来的。</p>
<p>在严格模式下就没这么复杂了，所以尽量使用 STRICT_TRANS_TABLES ，避免意外的情况带入生产环境。早期设计的时候就要保持客户端与数据库字符集一致。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/char.html" target="_blank" rel="external">MySQL manual:The CHAR and VARCHAR Types</a></li>
<li><a href="http://get.ftqq.com/723.get" target="_blank" rel="external">MySQL字符集指南–进阶篇V0.7</a></li>
<li><a href="http://mysql.rjweb.org/doc.php/charcoll" target="_blank" rel="external">MySQL字符集与校对规则</a></li>
<li><a href="http://www.mysqltutorial.org/mysql-string-length/" target="_blank" rel="external">MySQL String Length</a></li>
<li><a href="http://sunny90.com/a/database/2014/0819/24.html" target="_blank" rel="external">http://sunny90.com/a/database/2014/0819/24.html</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/04/28/mysql-char-varchar-set/">http://seanlook.com/2016/04/28/mysql-char-varchar-set/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据类型差不多是接触mysql一开始就了解的内容，最近遇到几个现象如varchar自动转mediumtext，blob存储性能的问题，不得不回头明确一下关于MySQL常用数据类型的选择。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/char.html&quot;&gt;mysql手册这里&lt;/a&gt; 已经讲的很清楚了。它们都是定义字符串型字段时常用的类型，但它们存储和检索的方式有不同，最大长度和尾部的空格是否保留也有差别。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt;类型是使用固定长度空间进行存储，范围0-255。比如&lt;code&gt;CHAR(30)&lt;/code&gt;能放30个字节，存放abcd时，尾部会以空格补齐，实际占用空间 30bytes 。检索它的时候尾部空格会被去除。&lt;/p&gt;
&lt;p&gt;char善于存储经常改变的值，或者长度相对固定的值，比如type、ip地址或md5之类的数据，不容易产生碎片。关于它的效率可以参考&lt;a href=&quot;http://bbs.chinaunix.net/thread-1696053-1-1.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;varchar&lt;/code&gt;类型保存可变长度字符串，范围0-65535（但受到单行最大64kb的限制）。比如用&lt;code&gt;varchar(30)&lt;/code&gt;去存放abcd，实际使用5个字节，因为还需要使用额外1个字节来标识字串长度（0-255使用1个字节，超过255需要2个字节）。&lt;/p&gt;
&lt;p&gt;varchar善于存储值的长短不一的列，也是用的最多的一种类型，节省磁盘空间。update时varchar列时，如果新数据比原数据大，数据库需要重新开辟空间，这一点会有性能略有损耗，但innodb引擎下查询效率比char高一点。这也是innodb官方推荐的类型。&lt;/p&gt;
&lt;p&gt;如果存储时真实长度超过了char或者varchar定义的最大长度呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在SQL严格模式下，无论char还是varchar，如果尾部要被截断的是非空格，会提示错误，即插入失败&lt;/li&gt;
&lt;li&gt;在SQL非严格模式下，无论char还是varchar，如果尾部要被截断的是非空格，会提示warning，但可以成功&lt;/li&gt;
&lt;li&gt;如果尾部要被截断的是空格，无论SQL所处模式，varchar都可以插入成功但提示warning；char也可以插入成功，并且无任何提示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里特意提到SQL的严格模式，是因为在工作中也遇到过一些坑，参考&lt;a href=&quot;&quot;&gt;MySQL的sql_mode严格模式注意点&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;贴上官方的一个表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;CHAR(4)&lt;/th&gt;
&lt;th&gt;Storage Required&lt;/th&gt;
&lt;th&gt;VARCHAR(4)&lt;/th&gt;
&lt;th&gt;Storage Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;‘’&lt;/td&gt;
&lt;td&gt;‘    ‘&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;‘’&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘ab’&lt;/td&gt;
&lt;td&gt;‘ab  ‘&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;‘ab’&lt;/td&gt;
&lt;td&gt;3 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘abcd’&lt;/td&gt;
&lt;td&gt;‘abcd’&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;‘abcd’&lt;/td&gt;
&lt;td&gt;5 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘abcdefgh’&lt;/td&gt;
&lt;td&gt;‘abcd’&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;‘abcd’&lt;/td&gt;
&lt;td&gt;5 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外，mysql字段值比较时默认是不区分大小写的，这是由于他们的校对规则（一般是 utf8_general_ci）决定的，按字符比较，所以查询时 值尾部 的空格也是被忽略的，除非建表时对列指定 &lt;code&gt;BINARY&lt;/code&gt; （校对字符集变成utf8_bin）或者&lt;code&gt;select * from vc where binary v=&amp;#39;ab  &amp;#39;;&lt;/code&gt;，就会按字节比较，即比较时区分大小写和尾部空格。&lt;/p&gt;
&lt;p&gt;需要注意的是，使用varchar不能因为长度可变就随意分大空间，比如90个字节能放够的列定义成varchar(200)，因为开辟内存时是以200字节进行的，遇到需要filesort或tmp table作业可能会带来不利影响。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="schema设计" scheme="http://seanlook.com/tags/schema%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>MySQL sql_mode 说明（及处理一起 sql_mode 引发的问题）</title>
    <link href="http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/"/>
    <id>http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/</id>
    <published>2016-04-22T08:32:49.000Z</published>
    <updated>2016-04-22T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-MySQL莫名变成了-Strict-SQL-Mode"><a href="#1-MySQL莫名变成了-Strict-SQL-Mode" class="headerlink" title="1. MySQL莫名变成了 Strict SQL Mode"></a>1. MySQL莫名变成了 Strict SQL Mode</h2><p>最近测试组那边反应数据库部分写入失败，app层提示是插入成功，但表里面里面没有产生数据，而两个写入操作的另外一个表有数据。因为 insert 失败在数据库层面是看不出来的，于是找php的同事看下错误信息：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="literal">Err</span>] <span class="number">1364</span> - Field `f_company_id` doesn<span class="symbol">'t</span> have a <span class="keyword">default</span> value</div></pre></td></tr></table></figure>
<p>很明显2个 insert 操作，第一条成功，第二条失败了，但因为没有控制在一个事务当中，导致app里面依然提示成功，这是客户入库操作，心想如果线上也有这个问题得是多大的代价。</p>
<p>不说开发的问题，好端端的mysql怎么突然就部分表写入失败呢？根据上面的问题很快能猜到是 sql_mode 问题： NOT NULL 列没有默认值但代码里也没给值，在非严格模式下，int列默认为0，string列默认为’’了，所以不成问题；但在严格模式下，是直接返回失败的。</p>
<p>一看，果然：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show variables like "sql_mode";</span></div><div class="line">+---------------+--------------------------------------------+</div><div class="line"><span class="section">| Variable_name | Value                                      |</span></div><div class="line">+---------------+--------------------------------------------+</div><div class="line"><span class="section">| sql_mode      | STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION |</span></div><div class="line">+---------------+--------------------------------------------+</div></pre></td></tr></table></figure></p>
<p>但是一直是没问题的的，就突然出现了，有谁会去改 sql_mode 呢，生产环境产生这个问题的风险有多大？所以必须揪出来。</p>
<p>先 <code>set global sql_mode=&#39;&#39;</code> ，让他们用着先（文后会给解决问题根本的办法），同时打开general_log看是哪一个用户有类似设置 sql_mode 命令：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1134456 </span>Query   SET autocommit=<span class="number">1</span></div><div class="line"><span class="symbol">1134456 </span>Query   Set sql_mode=<span class="comment">'NO_ENGINE_SUBSITUTION,STRICT_TRANS_TABLES'</span></div><div class="line"><span class="symbol">1134457 </span>Connect ecuser@<span class="number">10.0.200.173</span> <span class="keyword">on</span></div><div class="line"><span class="symbol">1134457 </span>Query   /* mysql-connector-java-<span class="number">5.1.35</span> ...</div></pre></td></tr></table></figure></p>
<p>看出是java组那边哪个框架建立连接的时候使用设置了sql_mode，但这是session级别的，不影响php那边用户的连接。</p>
<a id="more"></a>
<p>那会是什么原因在 set global 之后又变回strict模式呢，于是想到 mysqld_safe 启动实际是一个保护进程，在mysqld异常停止之后会拉起来，会不会中间有异常导致 mysqld 重启，致使 global 失效？看了mysql错误日志，才想到前些天断过电，所以决定直接改 <code>/etc/my.cnf</code>配置：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION</div></pre></td></tr></table></figure></p>
<p>重启myqld之后，还是<code>STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION</code>，很少遇到my.cnf里面配置不生效的情况。无独有偶，在 stackoverflow上找到同样的问题 <a href="http://stackoverflow.com/questions/28849293/how-to-make-sql-mode-no-engine-substitution-permanent-in-mysql-my-cnf" target="_blank" rel="external">how-to-make-sql-mode-no-engine-substitution-permanent-in-mysql-my-cnf</a> ，原因很简单，sql_mode这个选项被其它地方的配置覆盖了。</p>
<p><strong>了解一下mysql配置文件的加载顺序：</strong></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysqld --<span class="keyword">help</span> --<span class="keyword">verbose</span>|<span class="keyword">grep</span> -A1 -B1 <span class="keyword">cnf</span></div><div class="line">Default <span class="keyword">options</span> are <span class="keyword">read</span> from the following <span class="keyword">files</span> in the given order:</div><div class="line">/etc/my.<span class="keyword">cnf</span> /etc/mysql/my.<span class="keyword">cnf</span> /usr/etc/my.<span class="keyword">cnf</span> ~/.my.<span class="keyword">cnf</span></div></pre></td></tr></table></figure>
<p>mysql按照上面的顺序加载配置文件，后面的配置项会覆盖前面的。最后终于在 <code>/usr/my.cnf</code> 找到有一条<code>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</code>，把这个文件删掉，/etc/my.cnf 里面的就生效了。</p>
<p>但是目前没能整明白的是，mysql运行这么长时间怎么突然在<code>/usr</code> （MYSQL_BASE）下多个my.cnf，也不像人为创建的。其它实例也没这样的问题。</p>
<p>类似还出现过一例：存储过程里把 ‘’ 传给int型的，严格模式是不允许，而非严格模式只是一个warning。（命令行执行完语句后，<code>show warnings</code> 可看见）</p>
<p>那么解决这类问题的终极（推荐）办法其实是，考虑到数据的兼容性和准确性，MySQL就应该运行在严格模式下！无论开发环境还是生产环境，否则代码移植到线上可能产生隐藏的问题。</p>
<p>sql_mode 问题可以很简单，也可以很复杂。曾经在一个交流群里看到有人提到，主从sql_mode设置不一致导致复制异常，这里自己正好全面了解一下几个常用的值，方便以后排除问题多个方向。</p>
<h2 id="2-sql-mode-常用值说明"><a href="#2-sql-mode-常用值说明" class="headerlink" title="2. sql_mode 常用值说明"></a>2. sql_mode 常用值说明</h2><p>官方手册专门有一节介绍 <a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html</a> 。 SQL Mode 定义了两个方面：MySQL应支持的SQL语法，以及应该在数据上执行何种确认检查。</p>
<ul>
<li><p>SQL语法支持类</p>
<ul>
<li><p><code>ONLY_FULL_GROUP_BY</code><br>对于GROUP BY聚合操作，如果在SELECT中的列、HAVING或者ORDER BY子句的列，没有在GROUP BY中出现，那么这个SQL是不合法的。是可以理解的，因为不在 group by 的列查出来展示会有矛盾。<br>在5.7中默认启用，所以在实施5.6升级到5.7的过程需要注意：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> Expression <span class="string">#1</span> <span class="keyword">of</span> <span class="keyword">SELECT</span> list <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">clause <span class="keyword">and</span> contains nonaggregated column</div><div class="line"><span class="string">'1066export.ebay_order_items.TransactionID'</span> which</div><div class="line"><span class="keyword">is</span> <span class="keyword">not</span> functionally dependent <span class="keyword">on</span> columns <span class="keyword">in</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">clause; this <span class="keyword">is</span> incompatible <span class="keyword">with</span> sql_mode=only_full_group_by</div></pre></td></tr></table></figure>
</li>
<li><p><code>ANSI_QUOTES</code><br>启用 ANSI_QUOTES 后，不能用双引号来引用字符串，因为它被解释为识别符，作用与 ` 一样。<br>设置它以后，<code>update t set f1=&quot;&quot; ...</code>，会报 Unknown column ‘’ in ‘field list 这样的语法错误。</p>
</li>
<li><code>PIPES_AS_CONCAT</code><br>将 <code>||</code> 视为字符串的连接操作符而非 或 运算符，这和Oracle数据库是一样的，也和字符串的拼接函数 CONCAT() 相类似</li>
<li><code>NO_TABLE_OPTIONS</code><br>使用 <code>SHOW CREATE TABLE</code> 时不会输出MySQL特有的语法部分，如 <code>ENGINE</code> ，这个在使用 mysqldump 跨DB种类迁移的时候需要考虑。</li>
<li><code>NO_AUTO_CREATE_USER</code><br>字面意思不自动创建用户。在给MySQL用户授权时，我们习惯使用 <code>GRANT ... ON ... TO dbuser</code> 顺道一起创建用户。设置该选项后就与oracle操作类似，授权之前必须先建立用户。5.7.7开始也默认了。  </li>
</ul>
</li>
<li><p>数据检查类</p>
<ul>
<li><code>NO_ZERO_DATE</code><br>认为日期 ‘0000-00-00’ 非法，与是否设置后面的严格模式有关。<br>1.如果设置了严格模式，则 NO_ZERO_DATE 自然满足。但如果是 INSERT IGNORE 或 UPDATE IGNORE，’0000-00-00’依然允许且只显示warning<br>2.如果在非严格模式下，设置了<code>NO_ZERO_DATE</code>，效果与上面一样，’0000-00-00’允许但显示warning；如果没有设置<code>NO_ZERO_DATE</code>，no warning，当做完全合法的值。<br>3.<code>NO_ZERO_IN_DATE</code>情况与上面类似，不同的是控制日期和天，是否可为 0 ，即 <code>2010-01-00</code> 是否合法。  </li>
<li><code>NO_ENGINE_SUBSTITUTION</code><br>使用 <code>ALTER TABLE</code>或<code>CREATE TABLE</code> 指定 ENGINE 时， 需要的存储引擎被禁用或未编译，该如何处理。启用<code>NO_ENGINE_SUBSTITUTION</code>时，那么直接抛出错误；不设置此值时，CREATE用默认的存储引擎替代，ATLER不进行更改，并抛出一个 warning .</li>
<li><code>STRICT_TRANS_TABLES</code><br>设置它，表示启用严格模式。<br>注意 <code>STRICT_TRANS_TABLES</code> 不是几种策略的组合，单独指 <code>INSERT</code>、<code>UPDATE</code>出现少值或无效值该如何处理:<br>1.前面提到的把 ‘’ 传给int，严格模式下非法，若启用非严格模式则变成0，产生一个warning<br>2.Out Of Range，变成插入最大边界值<br>3.A value is missing when a new row to be inserted does not contain a value for a non-NULL column that has no explicit DEFAULT clause in its definition</li>
</ul>
</li>
</ul>
<p>上面并没有囊括所有的 SQL Mode，选了几个代表性的，详细还是 <a href="https://mariadb.com/kb/en/mariadb/sql_mode/" target="_blank" rel="external">看手册</a>。</p>
<p>sql_mode一般来说很少去关注它，没有遇到实际问题之前不会去启停上面的条目。我们常设置的 sql_mode 是 <code>ANSI</code>、<code>STRICT_TRANS_TABLES</code>、<code>TRADITIONAL</code>，ansi和traditional是上面的几种组合。</p>
<ul>
<li><code>ANSI</code>：更改语法和行为，使其更符合标准SQL<br>相当于REAL_AS_FLOAT, PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE</li>
<li><code>TRADITIONAL</code>：更像传统SQL数据库系统，该模式的简单描述是当在列中插入不正确的值时“给出错误而不是警告”。<br>相当于 STRICT_TRANS_TABLES, STRICT_ALL_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, NO_AUTO_CREATE_USER, NO_ENGINE_SUBSTITUTION</li>
<li><code>ORACLE</code>：相当于 PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS, NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER</li>
</ul>
<p>无论何种mode，产生error之后就意味着单条sql执行失败，对于支持事务的表，则导致当前事务回滚；但如果没有放在事务中执行，或者不支持事务的存储引擎表，则可能导致数据不一致。MySQL认为，相比直接报错终止，数据不一致问题更严重。于是 <code>STRICT_TRANS_TABLES</code> 对非事务表依然尽可能的让写入继续，比如给个”最合理”的默认值或截断。而对于 <code>STRICT_ALL_TABLES</code>，如果是单条更新，则不影响，但如果更新的是多条，第一条成功，后面失败则会出现部分更新。</p>
<p>5.6.6 以后版本默认就是<code>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</code>，5.5默认为 ‘’ 。</p>
<h2 id="3-设置-sql-mode"><a href="#3-设置-sql-mode" class="headerlink" title="3. 设置 sql_mode"></a>3. 设置 sql_mode</h2><p><strong>查看</strong><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">查看当前连接会话的sql模式：</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> @@session.sql_mode;</div><div class="line">或者从环境变量里取</div><div class="line">mysql&gt; show variables like <span class="string">"sql_mode"</span>;</div><div class="line"></div><div class="line"></div><div class="line">查看全局sql_mode设置：</div><div class="line">mysql&gt; <span class="keyword">select</span> @@<span class="keyword">global</span>.sql_mode;</div><div class="line"></div><div class="line">只设置<span class="keyword">global</span>，需要重新连接进来才会生效</div></pre></td></tr></table></figure></p>
<p><strong>设置</strong><br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">形式如</div><div class="line">mysql&gt; <span class="keyword">set</span> sql_mode=<span class="string">''</span>;</div><div class="line">mysql&gt; <span class="keyword">set</span> global <span class="comment">sql_mode=</span><span class="comment">'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES'</span>;</div><div class="line"></div><div class="line"></div><div class="line">如果是自定义的模式组合，可以像下面这样</div><div class="line"></div><div class="line">Adding only one mode to sql_mode without removing existing ones:</div><div class="line">mysql&gt; <span class="keyword">SET</span> sql_mode=(SELECT <span class="comment">CONCAT(@@sql_mode,</span><span class="comment">',&lt;mode_to_add&gt;'</span><span class="comment">))</span>;</div><div class="line"></div><div class="line">Removing only a specific mode from sql_mode without removing others:</div><div class="line">mysql&gt; <span class="keyword">SET</span> sql_mode=(SELECT <span class="comment">REPLACE(@@sql_mode,</span><span class="comment">'&lt;mode_to_remove&gt;'</span><span class="comment">,</span><span class="comment">''</span><span class="comment">))</span>;</div></pre></td></tr></table></figure></p>
<p>配置文件里面设置<code>sql-mode=&quot;&quot;</code> 。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sql-mode-strict" target="_blank" rel="external">MySQL manual sql-mode</a></li>
<li><a href="http://xstarcd.github.io/wiki/MySQL/MySQL-sql-mode.html" target="_blank" rel="external">mysql的sql_mode合理设置</a></li>
<li><a href="http://dba.stackexchange.com/questions/109053/set-sql-mode-blank-after-upgrading-to-mysql-5-6" target="_blank" rel="external">set-sql-mode-blank-after-upgrading-to-mysql-5-6</a></li>
<li><a href="http://blog.itpub.net/29773961/viewspace-1813501/" target="_blank" rel="external">MySQL SQL_MODE详解</a></li>
</ul>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/">http://seanlook.com/2016/04/22/mysql-sql-mode-troubleshooting/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-MySQL莫名变成了-Strict-SQL-Mode&quot;&gt;&lt;a href=&quot;#1-MySQL莫名变成了-Strict-SQL-Mode&quot; class=&quot;headerlink&quot; title=&quot;1. MySQL莫名变成了 Strict SQL Mode&quot;&gt;&lt;/a&gt;1. MySQL莫名变成了 Strict SQL Mode&lt;/h2&gt;&lt;p&gt;最近测试组那边反应数据库部分写入失败，app层提示是插入成功，但表里面里面没有产生数据，而两个写入操作的另外一个表有数据。因为 insert 失败在数据库层面是看不出来的，于是找php的同事看下错误信息：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;literal&quot;&gt;Err&lt;/span&gt;] &lt;span class=&quot;number&quot;&gt;1364&lt;/span&gt; - Field `f_company_id` doesn&lt;span class=&quot;symbol&quot;&gt;&#39;t&lt;/span&gt; have a &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; value&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很明显2个 insert 操作，第一条成功，第二条失败了，但因为没有控制在一个事务当中，导致app里面依然提示成功，这是客户入库操作，心想如果线上也有这个问题得是多大的代价。&lt;/p&gt;
&lt;p&gt;不说开发的问题，好端端的mysql怎么突然就部分表写入失败呢？根据上面的问题很快能猜到是 sql_mode 问题： NOT NULL 列没有默认值但代码里也没给值，在非严格模式下，int列默认为0，string列默认为’’了，所以不成问题；但在严格模式下，是直接返回失败的。&lt;/p&gt;
&lt;p&gt;一看，果然：&lt;br&gt;&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;mysql&amp;gt; show variables like &quot;sql_mode&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+--------------------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| Variable_name | Value                                      |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+--------------------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| sql_mode      | STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+--------------------------------------------+&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是一直是没问题的的，就突然出现了，有谁会去改 sql_mode 呢，生产环境产生这个问题的风险有多大？所以必须揪出来。&lt;/p&gt;
&lt;p&gt;先 &lt;code&gt;set global sql_mode=&amp;#39;&amp;#39;&lt;/code&gt; ，让他们用着先（文后会给解决问题根本的办法），同时打开general_log看是哪一个用户有类似设置 sql_mode 命令：&lt;br&gt;&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1134456 &lt;/span&gt;Query   SET autocommit=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1134456 &lt;/span&gt;Query   Set sql_mode=&lt;span class=&quot;comment&quot;&gt;&#39;NO_ENGINE_SUBSITUTION,STRICT_TRANS_TABLES&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1134457 &lt;/span&gt;Connect ecuser@&lt;span class=&quot;number&quot;&gt;10.0.200.173&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1134457 &lt;/span&gt;Query   /* mysql-connector-java-&lt;span class=&quot;number&quot;&gt;5.1.35&lt;/span&gt; ...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看出是java组那边哪个框架建立连接的时候使用设置了sql_mode，但这是session级别的，不影响php那边用户的连接。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="sql_mode" scheme="http://seanlook.com/tags/sql-mode/"/>
    
  </entry>
  
  <entry>
    <title>MySQL避免索引列使用 OR 条件</title>
    <link href="http://seanlook.com/2016/04/05/mysql-avoid-or-query/"/>
    <id>http://seanlook.com/2016/04/05/mysql-avoid-or-query/</id>
    <published>2016-04-05T08:32:49.000Z</published>
    <updated>2016-04-05T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个亏已经吃过很多次了，在开发以前的sql代码里面，许多以 or 作为where条件的查询，甚至更新。这里举例来说明使用 or 的弊端，以及改进办法。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">926067</span>  </div><div class="line"><span class="keyword">and</span> (f_mobile =<span class="string">'1234567891'</span> <span class="keyword">or</span> f_phone =<span class="string">'1234567891'</span> ) <span class="keyword">limit</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>从查询语句很容易看出，f_mobile和f_phone两个字段都有可能存电话号码，一般思路都是用 or 去一条sql解决，但表数据量一大简直是灾难：<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-avoid-or-1.png" alt=""></p>
<p>t_tbanme1上有索引<code>idx_id_mobile(f_xxx_id,f_mobile)</code>, <code>idx_phone(f_phone)</code>,<code>idx_id_email(f_id,f_email)</code>，explain 的结果却使用了 idx_id_email 索引，有时候运气好可能走 idx_id_mobile f_xxx_id</p>
<p><strong>因为mysql的每条查询，每个表上只能选择一个索引</strong>。如果使用了 idx_id_mobile 索引，恰好有一条数据，因为有 limit 1 ，那么恭喜很快得到结果；但如果 f_mobile 没有数据，那 f_phone 字段只能在f_id条件下挨个查找，扫描12w行。 or 跟 and 不一样，甚至有开发认为添加 <code>(f_xxx_id,f_mobile,f_phone)</code>不就完美了吗，要吐血了~<br><a id="more"></a><br>那么优化sql呢，很简单（<strong>注意f_mobile,f_phone上都要有相应的索引</strong>），<strong>方法一</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_mobile =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span> )</div><div class="line"><span class="keyword">UNION</span> ALL </div><div class="line">(<span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_phone =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span> )</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-avoid-or-2.png" alt=""></p>
<p>两条独立的sql都能用上索引，分查询各自limit，如果都有结果集返回，随便取一条就行。</p>
<p>还有一种优化办法，如果这种查询特别频繁（又无缓存），改成单独的sql执行，比如大部分号码值都在f_mobile上，那就先执行分sql1，有结果则结束，判断没有结果再执行分sql2 ，能减少数据库查询速度，让代码去处理更多的事情，<strong>方法二</strong>伪代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sql1 = <span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_mobile =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span>;</div><div class="line">sq1.execute();</div><div class="line">if no result sql1:</div><div class="line">  sql1 = <span class="keyword">select</span> f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">where</span>  f_xxx_id = <span class="number">900000</span>  <span class="keyword">and</span> f_phone =<span class="string">'1234567891'</span> <span class="keyword">limit</span> <span class="number">1</span>;</div><div class="line">    sql1.execute();</div></pre></td></tr></table></figure></p>
<hr>
<p>复杂一点的场景是止返回一条记录那么简单，limit 2：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.f_crm_id</span> from d_dbname1<span class="selector-class">.t_tbname1</span> as <span class="selector-tag">a</span> </div><div class="line">where (<span class="selector-tag">a</span><span class="selector-class">.f_create_time</span> &gt; from_unixtime(<span class="string">'1464107527'</span>) or <span class="selector-tag">a</span><span class="selector-class">.f_modify_time</span> &gt; from_unixtime(<span class="string">'1464107527'</span>) )</div><div class="line">limit <span class="number">0</span>,<span class="number">200</span></div></pre></td></tr></table></figure></p>
<p>这种情况方法一、二都需要改造，因为 f_create_time，f_modify_time 都可能均满足判断条件，这样就会返回重复的数据。</p>
<p>方法一需要改造：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(select <span class="selector-tag">a</span><span class="selector-class">.f_crm_id</span> from d_dbname1<span class="selector-class">.t_tbname1</span> as <span class="selector-tag">a</span> </div><div class="line">where <span class="selector-tag">a</span><span class="selector-class">.f_create_time</span> &gt; from_unixtime(<span class="string">'1464397527'</span>)</div><div class="line">limit <span class="number">0</span>,<span class="number">200</span> )</div><div class="line">UNION ALL</div><div class="line">(select <span class="selector-tag">a</span><span class="selector-class">.f_crm_id</span> from d_dbname1<span class="selector-class">.t_tbname1</span> as <span class="selector-tag">a</span> </div><div class="line">where <span class="selector-tag">a</span><span class="selector-class">.f_modify_time</span> &gt; from_unixtime(<span class="string">'1464397527'</span>) and <span class="selector-tag">a</span><span class="selector-class">.f_create_time</span> &lt;= from_unixtime(<span class="string">'1464397527'</span>)</div><div class="line">limit <span class="number">0</span>,<span class="number">200</span> )</div></pre></td></tr></table></figure></p>
<p>有人说 把 UNION ALL 改成 UNION 不就去重了吗？如果说查询比较频繁，或者limit比较大，数据库还是会有压力，所以需要做trade off。</p>
<p>这种情况更多还是适合方法二，包括有可能需要 order by limit 情况。改造伪代码：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sql1 = (<span class="keyword">select</span> a.f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">as</span> a <span class="keyword">where</span> a.f_create_time &gt; from_unixtime(<span class="string">'1464397527'</span>) limit <span class="number">0</span>,<span class="number">200</span> );</div><div class="line">sql1.execute();</div><div class="line">sql1_count = sql1.result.count</div><div class="line"><span class="keyword">if</span> sql1_count &lt; <span class="number">200</span> :</div><div class="line">  sql2 = (<span class="keyword">select</span> a.f_crm_id <span class="keyword">from</span> d_dbname1.t_tbname1 <span class="keyword">as</span> a <span class="keyword">where</span> a.f_modify_time &gt; from_unixtime(<span class="string">'1464397527'</span>) <span class="keyword">and</span> a.f_create_time &lt;= from_unixtime(<span class="string">'1464397527'</span>) limit <span class="number">0</span>, (<span class="number">200</span> - sql1_count) );</div><div class="line">  sql2.execute();</div><div class="line"></div><div class="line">final_result = paste(sql1,sql2);</div></pre></td></tr></table></figure></p>
<p>or条件在数据库上很难优化，能在代码里优化逻辑，不至于拖垮数据库。只有在 or 条件下无需索引时（且需要比较的数据量小），才考虑。</p>
<p>相同字段 or 可改成 in，如 <code>f_id=1 or f_id=100</code> -&gt; <code>f_id in (1,100)</code>。 效率问题见文章 <a href="http://blog.chinaunix.net/uid-20639775-id-3416737.html" target="_blank" rel="external">mysql中or和in的效率问题</a> 。</p>
<p>上述优化情景都是存储引擎在 InnoDB 情况下，在MyISAM有不同，见<a href="http://blog.csdn.net/hguisu/article/details/7106159" target="_blank" rel="external">mysql or条件可以使用索引而避免全表</a> 。</p>
<hr>
<p>原文链接地址：<a href="http://seanlook.com/2016/04/05/mysql-avoid-or-query/">http://seanlook.com/2016/04/05/mysql-avoid-or-query/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个亏已经吃过很多次了，在开发以前的sql代码里面，许多以 or 作为where条件的查询，甚至更新。这里举例来说明使用 or 的弊端，以及改进办法。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; f_crm_id &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; d_dbname1.t_tbname1 &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;  f_xxx_id = &lt;span class=&quot;number&quot;&gt;926067&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (f_mobile =&lt;span class=&quot;string&quot;&gt;&#39;1234567891&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; f_phone =&lt;span class=&quot;string&quot;&gt;&#39;1234567891&#39;&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从查询语句很容易看出，f_mobile和f_phone两个字段都有可能存电话号码，一般思路都是用 or 去一条sql解决，但表数据量一大简直是灾难：&lt;br&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/mysql-avoid-or-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;t_tbanme1上有索引&lt;code&gt;idx_id_mobile(f_xxx_id,f_mobile)&lt;/code&gt;, &lt;code&gt;idx_phone(f_phone)&lt;/code&gt;,&lt;code&gt;idx_id_email(f_id,f_email)&lt;/code&gt;，explain 的结果却使用了 idx_id_email 索引，有时候运气好可能走 idx_id_mobile f_xxx_id&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为mysql的每条查询，每个表上只能选择一个索引&lt;/strong&gt;。如果使用了 idx_id_mobile 索引，恰好有一条数据，因为有 limit 1 ，那么恭喜很快得到结果；但如果 f_mobile 没有数据，那 f_phone 字段只能在f_id条件下挨个查找，扫描12w行。 or 跟 and 不一样，甚至有开发认为添加 &lt;code&gt;(f_xxx_id,f_mobile,f_phone)&lt;/code&gt;不就完美了吗，要吐血了~&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="SQL优化" scheme="http://seanlook.com/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>使用sysbench对mysql压力测试</title>
    <link href="http://seanlook.com/2016/03/28/mysql-sysbench/"/>
    <id>http://seanlook.com/2016/03/28/mysql-sysbench/</id>
    <published>2016-03-28T08:32:49.000Z</published>
    <updated>2016-04-04T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>sysbench是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。关于这个项目的详细介绍请看：<a href="https://github.com/akopytov/sysbench" target="_blank" rel="external">https://github.com/akopytov/sysbench</a> 。<br>它主要包括以下几种方式的测试：</p>
<ol>
<li>cpu性能</li>
<li>磁盘io性能</li>
<li>调度程序性能</li>
<li>内存分配及传输速度</li>
<li>POSIX线程性能</li>
<li>数据库性能(OLTP基准测试)</li>
</ol>
<p>sysbench的数据库OLTP测试支持MySQL、PostgreSQL、Oracle，目前主要用于Linux操作系统，开源社区已经将sysbench移植到了Windows，并支持SQL Server的基准测试。</p>
<p>废话不多说，开始。</p>
<h2 id="1-sysbench安装"><a href="#1-sysbench安装" class="headerlink" title="1. sysbench安装"></a>1. sysbench安装</h2><ul>
<li>mysql版本: mysql-community-server-5.6.29   </li>
<li>OS: CentOS 6.7 X86_64</li>
<li>sysbench 0.5相比0.4版本有一些变化，包括oltp测试结合了lua脚本，还多了一些隐藏选项，本文会涉及得到一部分。</li>
</ul>
<p>目前许多仓库里已编译好的二进制sysbench还是0.4.x版本，不过现在主流也还是github上的0.5，可以从 <a href="http://www.lefred.be/node/154" target="_blank" rel="external">这里</a>下载0.5版本的rpm包直接安装，不过我选择自己编译，因为只有这个办法是通用的。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先安装编译依赖环境</span></div><div class="line">$ sudo yum install gcc gcc-c++ automake make  libtool mysql-community-devel</div><div class="line"></div><div class="line">$ cd <span class="regexp">/tmp &amp;&amp; git clone https:/</span><span class="regexp">/github.com/</span>akopytov/sysbench.git</div><div class="line"></div><div class="line">$ cd <span class="regexp">/tmp/</span>sysbench &amp;&amp; ./autogen.sh</div><div class="line">$ .<span class="regexp">/configure --prefix=/</span>usr<span class="regexp">/local/</span>sysbench<span class="number">-0.5</span></div><div class="line">$ ./make &amp;&amp; sudo make install</div><div class="line"></div><div class="line"><span class="comment">// 0.5版本需要oltp.lua测试脚本</span></div><div class="line"><span class="comment">// 如果是rpm包方式安装的，在 /usr/share/doc/sysbench/tests/db/ 下可找到</span></div><div class="line">$ cd <span class="regexp">/usr/</span>local<span class="regexp">/sysbench &amp;&amp; sudo mkdir -p share/</span>tests/db</div><div class="line">$ cp <span class="regexp">/tmp/</span>sysbench<span class="regexp">/sysbench/</span>tests<span class="regexp">/db/</span>*.lua share<span class="regexp">/tests/</span>db/</div><div class="line">$ .<span class="regexp">/bin/</span>sysbench --version</div><div class="line">sysbench <span class="number">0.5</span></div></pre></td></tr></table></figure>
<p>如果需要测试PostgreSQL、Oracle，则在configure时需要加上 –with-oracle 或者 –with-pgsql 参数</p>
<h2 id="2-使用sysbench对mysql压测"><a href="#2-使用sysbench对mysql压测" class="headerlink" title="2. 使用sysbench对mysql压测"></a>2. 使用sysbench对mysql压测</h2><h3 id="2-1-只读示例"><a href="#2-1-只读示例" class="headerlink" title="2.1 只读示例"></a>2.1 只读示例</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">dist</span><span class="literal">-</span><span class="comment">type=uniform</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">skip</span><span class="literal">-</span><span class="comment">trx=on</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=12</span> <span class="comment">\</span></div><div class="line"><span class="title">[</span><span class="comment">prepare|run|cleanup</span><span class="title">]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意最后一行，一项测试开始前需要用<code>prepare</code>来准备好表和数据，<code>run</code>执行真正的压测，<code>cleanup</code>用来清除数据和表。实际prepare的表结构：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; desc dbtest1a.sbtest1;</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> Field </span>|<span class="string"> Type             </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra          </span>|</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">|<span class="string"> id    </span>|<span class="string"> int(10) unsigned </span>|<span class="string"> NO   </span>|<span class="string"> PRI </span>|<span class="string"> NULL    </span>|<span class="string"> auto_increment </span>|</div><div class="line">|<span class="string"> k     </span>|<span class="string"> int(10) unsigned </span>|<span class="string"> NO   </span>|<span class="string"> MUL </span>|<span class="string"> 0       </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> c     </span>|<span class="string"> char(120)        </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string">         </span>|<span class="string">                </span>|</div><div class="line">|<span class="string"> pad   </span>|<span class="string"> char(60)         </span>|<span class="string"> NO   </span>|<span class="string">     </span>|<span class="string">         </span>|<span class="string">                </span>|</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">4 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>上面的测试命令代表的是：对mysql进行oltp基准测试，表数量10，每表行数约50w（几乎delete多少就会insert的多少），并且是非事务的只读测试，持续60s，并发线程数12。</p>
<p><strong>需要说明的选项：</strong></p>
<ul>
<li><code>mysql-db=dbtest1a</code>：测试使用的目标数据库，这个库名要事先创建</li>
<li><code>--oltp-tables-count=10</code>：产生表的数量</li>
<li><code>--oltp-table-size=500000</code>：每个表产生的记录行数</li>
<li><code>--oltp-dist-type=uniform</code>：指定随机取样类型，可选值有 uniform(均匀分布), Gaussian(高斯分布), special(空间分布)。默认是special</li>
<li><code>--oltp-read-only=off</code>：表示不止产生只读SQL，也就是使用oltp.lua时会采用读写混合模式。默认 off，如果设置为on，则不会产生update,delete,insert的sql。</li>
<li><code>--oltp-test-mode=nontrx</code>：执行模式，这里是非事务式的。可选值有simple,complex,nontrx。默认是complex<ul>
<li>simple：简单查询，SELECT c FROM sbtest WHERE id=N</li>
<li>complex (advanced transactional)：事务模式在开始和结束事务之前加上begin和commit， 一个事务里可以有多个语句，如点查询、范围查询、排序查询、更新、删除、插入等，并且为了不破坏测试表的数据，该模式下一条记录删除后会在同一个事务里添加一条相同的记录。</li>
<li>nontrx (non-transactional)：与simple相似，但是可以进行update/insert等操作，所以如果做连续的对比压测，你可能需要重新cleanup,prepare。</li>
</ul>
</li>
<li><p><code>--oltp-skip-trx=[on|off]</code>：省略begin/commit语句。默认是off</p>
</li>
<li><p><code>--rand-init=on</code>：是否随机初始化数据，如果不随机化那么初始好的数据每行内容除了主键不同外其他完全相同</p>
</li>
<li><code>--num-threads=12</code>： 并发线程数，可以理解为模拟的客户端并发连接数</li>
<li><code>--report-interval=10</code>：表示每10s输出一次测试进度报告</li>
<li><code>--max-requests=0</code>：压力测试产生请求的总数，如果以下面的<code>max-time</code>来记，这个值设为0</li>
<li><code>--max-time=120</code>：压力测试的持续时间，这里是2分钟。</li>
</ul>
<p>注意，针对不同的选项取值就会有不同的子选项。比如<code>oltp-dist-type=special</code>，就有比如<code>oltp-dist-pct=1</code>、<code>oltp-dist-res=50</code>两个子选项，代表有50%的查询落在1%的行（即热点数据）上，另外50%均匀的(sample uniformly)落在另外99%的记录行上。</p>
<p>再比如<code>oltp-test-mode=nontrx</code>时, 就可以有<code>oltp-nontrx-mode</code>，可选值有select（默认）, update_key, update_nokey, insert, delete，代表非事务式模式下使用的测试sql类型。</p>
<p>以上代表的是一个只读的例子，可以把<code>num-threads</code>依次递增（16,36,72,128,256,512），或者调整my.cnf参数，比较效果。另外需要注意的是，大部分mysql中间件对事务的处理，默认都是把sql发到主库执行，所以只读测试需要加上<code>oltp-skip-trx=on</code>来跳过测试中的显式事务。</p>
<p>ps1: 只读测试也可以使用<code>share/tests/db/select.lua</code>进行，但只是简单的point select。<br>ps2: 我在用sysbench压的时候，在mysql后端会话里有时看到大量的query cache lock，如果使用的是uniform取样，最好把查询缓存关掉。当然如果是做两组性能对比压测，因为都受这个因素影响，关心也不大。</p>
<h3 id="2-2-混合读写"><a href="#2-2-混合读写" class="headerlink" title="2.2 混合读写"></a>2.2 混合读写</h3><p>读写测试还是用oltp.lua，只需把<code>--oltp-read-only</code>等于<code>off</code>。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">prepare</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">run</span></div><div class="line"></div><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/oltp</span><span class="string">.</span><span class="comment">lua</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">test</span><span class="literal">-</span><span class="comment">mode=nontrx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">nontrx</span><span class="literal">-</span><span class="comment">mode=select</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">cleanup</span></div></pre></td></tr></table></figure>
<p>然而<code>oltp-test-mode=nontrx</code>一直没有跟着我预期的去走，在mysql general log里面看到的sql记录与<code>complex</code>模式相同。所以上面示例中的<code>--oltp-test-mode=nontrx --oltp-nontrx-mode=select</code>可以删掉。</p>
<p><strong>update: </strong><br>sysbench作者 akopytov 对我这个疑问有了回复：<a href="https://github.com/akopytov/sysbench/issues/34" target="_blank" rel="external">https://github.com/akopytov/sysbench/issues/34</a> ，原来sysbench 0.5版本去掉了这个选项，因为作者正在准备1.0版本，所以也就没有更新0.5版本的doc。网上的博客漫天飞，就没有一个提出来的，也是没谁了。</p>
<p>分析一下oltp.lua脚本内容，可以清楚单个事务各操作的默认比例：select:update_key:update_non_key:delete:insert = 14:1:1:1:1，可通过<code>oltp-point-selects</code>、<code>oltp-simple-ranges</code>、<code>oltp-sum-ranges</code>、<code>oltp-order-ranges</code>、<code>oltp-distinct-ranges</code>，<code>oltp-index-updates</code>、<code>oltp-non-index-updates</code>这些选项去调整读写权重。</p>
<p>同只读测试一样，在atlas,mycat这类中间件测试中如果不加<code>oltp-skip-trx=on</code>，那么所有查询都会发往主库，但如果在有写入的情况下使用<code>--oltp-skip-trx=on</code>跳过BEGIN和COMMIT，会出现问题：</p>
<blockquote>
<p>ALERT: failed to execute MySQL query: <code>INSERT INTO sbtest4 (id, k, c, pad) VALUES (48228,
47329, &#39;82773802508-44916890724-85859319254-67627358653-96425730419-64102446666-75789993135-91202056934-68463872307-28147315305&#39;, 
&#39;13146850449-23153169696-47584324044-14749610547-34267941374&#39;)</code>:<br>ALERT: Error 1062 Duplicate entry ‘48228’ for key ‘PRIMARY’<br>FATAL: failed to execute function `event’: (null)</p>
</blockquote>
<p>原因也很容易理解，每个线程将选择一个随机的表，不加事务的情况下高并发更新（插入）出现重复key的概率很大，但我们压测不在乎这些数据，所以需要跳过这个错误<code>--mysql-ignore-errors=1062</code>，这个问题老外有出过打补丁的方案允许<code>--mysql-ignore-duplicates=on</code>，但作者新加入的忽略错误码这个功能已经取代了它。<code>mysql-ignore-errors</code>选项是0.5版本加入的，但目前没有文档标明，也是我在github上提的 <a href="https://github.com/akopytov/sysbench/issues/23" target="_blank" rel="external">issue</a> 作者回复的。</p>
<p>这里不得不佩服老外的办事效率和责任心，提个疑惑能立马得到回复，反观国内，比如在atlas,mycat项目里提到问题到现在都没人搭理。。。</p>
<h3 id="2-3-只更新"><a href="#2-3-只更新" class="headerlink" title="2.3 只更新"></a>2.3 只更新</h3><p>如果基准测试的时候，你只想比较两个项目的update（或insert）效率，那可以不使用oltp脚本，而直接改用<code>update_index.lua</code>：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/bin/sysbench</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">test=</span><span class="string">.</span><span class="comment">/share/tests/db/update_index</span><span class="string">.</span><span class="comment">lua</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">201</span><span class="string">.</span><span class="comment">36</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">port=8066</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">user=ecuser</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">password=ecuser</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">mysql</span><span class="literal">-</span><span class="comment">db=dbtest1a</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">tables</span><span class="literal">-</span><span class="comment">count=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">table</span><span class="literal">-</span><span class="comment">size=500000</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">report</span><span class="literal">-</span><span class="comment">interval=10</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rand</span><span class="literal">-</span><span class="comment">init=on</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">requests=0</span> <span class="comment">\</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">oltp</span><span class="literal">-</span><span class="comment">read</span><span class="literal">-</span><span class="comment">only=off</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max</span><span class="literal">-</span><span class="comment">time=120</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">num</span><span class="literal">-</span><span class="comment">threads=128</span> <span class="comment">\</span></div><div class="line"><span class="title">[</span> <span class="comment">prepare</span> <span class="comment">|</span> <span class="comment">run</span> <span class="comment">|</span> <span class="comment">cleanup</span> <span class="title">]</span></div></pre></td></tr></table></figure>
<p>此时像<code>oltp-read-only=off</code>许多参数都失效了。需要说明的是这里 (非)索引更新，不是where条件根据索引去查找更新，而是更新索引列上的值。</p>
<h2 id="3-结果解读"><a href="#3-结果解读" class="headerlink" title="3. 结果解读"></a>3. 结果解读</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">sysbench <span class="number">0.5</span>:  multi-threaded <span class="built_in">system</span> evaluation benchmark</div><div class="line"></div><div class="line">Running the test with following option<span class="variable">s:</span></div><div class="line">Number of thread<span class="variable">s:</span> <span class="number">128</span></div><div class="line">Report intermediate results every <span class="number">20</span> second(s)</div><div class="line">Initializing random <span class="keyword">number</span> generator from timer.</div><div class="line"></div><div class="line">Random <span class="keyword">number</span> generator seed <span class="keyword">is</span> <span class="number">0</span> <span class="built_in">and</span> will <span class="keyword">be</span> ignored</div><div class="line"></div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">[  <span class="number">20</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2354.54</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33035.89</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9423.39</span>, response time: <span class="number">66.80</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[  <span class="number">40</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2377.75</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33274.26</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9507.55</span>, response time: <span class="number">66.88</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[  <span class="number">60</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2401.35</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33615.30</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9607.40</span>, response time: <span class="number">66.40</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[  <span class="number">80</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2381.20</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33331.50</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9522.55</span>, response time: <span class="number">67.30</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[ <span class="number">100</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2388.85</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33446.10</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9556.35</span>, response time: <span class="number">67.00</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">[ <span class="number">120</span>s] thread<span class="variable">s:</span> <span class="number">128</span>, <span class="keyword">tp</span><span class="variable">s:</span> <span class="number">2386.40</span>, <span class="keyword">read</span><span class="variable">s:</span> <span class="number">33421.35</span>, <span class="keyword">write</span><span class="variable">s:</span> <span class="number">9545.35</span>, response time: <span class="number">66.94</span>ms (<span class="number">95</span>%), error<span class="variable">s:</span> <span class="number">0.00</span>, reconnect<span class="variable">s:</span>  <span class="number">0.00</span></div><div class="line">OLTP test statistic<span class="variable">s:</span></div><div class="line">    queries performed:</div><div class="line">        <span class="keyword">read</span>:                            <span class="number">4003048</span>  //总select数量</div><div class="line">        <span class="keyword">write</span>:                           <span class="number">1143728</span>  //总<span class="keyword">update</span>、<span class="keyword">insert</span>、<span class="keyword">delete</span>语句数量</div><div class="line">        other:                           <span class="number">571864</span>   //commit、unlock tables以及其他mutex的数量</div><div class="line">        tota<span class="variable">l:</span>                           <span class="number">5718640</span></div><div class="line">    transaction<span class="variable">s:</span>                        <span class="number">285932</span> (<span class="number">2382.10</span> per sec.) //通常需要关注的数字(TPS)</div><div class="line">    <span class="keyword">read</span>/<span class="keyword">write</span> request<span class="variable">s:</span>                 <span class="number">5146776</span> (<span class="number">42877.85</span> per sec.)</div><div class="line">    other operation<span class="variable">s:</span>                    <span class="number">571864</span> (<span class="number">4764.21</span> per sec.)</div><div class="line">    ignored error<span class="variable">s:</span>                      <span class="number">0</span>      (<span class="number">0.00</span> per sec.) //忽略的错误数</div><div class="line">    reconnect<span class="variable">s:</span>                          <span class="number">0</span>      (<span class="number">0.00</span> per sec.)</div><div class="line"></div><div class="line">General statistic<span class="variable">s:</span></div><div class="line">    total time:                          <span class="number">120.0334</span>s //即<span class="built_in">max</span>-time指定的压测实际</div><div class="line">    total <span class="keyword">number</span> of event<span class="variable">s:</span>              <span class="number">285932</span>   //总的事件数，一般与transactions相同</div><div class="line">    total time taken by event execution: <span class="number">15362.6623</span>s</div><div class="line">    response time:</div><div class="line">         <span class="built_in">min</span>:                                 <span class="number">17.60</span>ms</div><div class="line">         av<span class="variable">g:</span>                                 <span class="number">53.73</span>ms //<span class="number">95</span>%的语句的平均响应时间</div><div class="line">         <span class="built_in">max</span>:                                <span class="number">252.90</span>ms</div><div class="line">         approx.  <span class="number">95</span> percentile:              <span class="number">66.88</span>ms</div><div class="line"></div><div class="line">Threads fairnes<span class="variable">s:</span></div><div class="line">    events (avg/stddev):           <span class="number">2233.8438</span>/<span class="number">9.04</span></div><div class="line">    execution time (avg/stddev):   <span class="number">120.0208</span>/<span class="number">0.01</span></div></pre></td></tr></table></figure>
<p>我们一般关注的用于绘图的指标主要有：</p>
<ul>
<li>response time avg: 平均响应时间。（后面的95%的大小可以通过<code>--percentile=98</code>的方式去更改）</li>
<li>transactions: 精确的说是这一项后面的TPS 。但如果使用了<code>-oltp-skip-trx=on</code>，这项事务数恒为0，需要用<code>total number of events</code> 去除以总时间，得到tps（其实还可以分为读tps和写tps）</li>
<li>read/write requests: 用它除以总时间，得到吞吐量QPS</li>
<li>当然还有一些系统层面的cpu,io,mem相关指标</li>
</ul>
<p>sysbench还可以对文件系统IO测试，CPU性能测试，以及内存分配与传输速度测试，这里就不介绍了。</p>
<p>总结起来sysbench的缺点就是，模拟的表结构太简单，不像tpcc-mysql那样完整的事务系统。但对于性能压测对比还是很有用的，因为sysbench使用的环境参数限制是一样的。</p>
<h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul>
<li><a href="https://www.percona.com/docs/wiki/benchmark:sysbench:olpt.lua" target="_blank" rel="external">Percona sysbench oltp.lua</a></li>
<li><a href="http://imysql.com/wp-content/uploads/2014/10/sysbench-manual.pdf" target="_blank" rel="external">sysbench manual 0.4</a></li>
<li><a href="http://blog.csdn.net/zbszhangbosen/article/details/8236331" target="_blank" rel="external">sysbench介绍与使用</a></li>
<li><a href="http://verynull.com/2016/01/29/sysbench%E6%B5%8B%E8%AF%95mysql%E6%80%A7%E8%83%BD/" target="_blank" rel="external">sysbench测试mysql性能</a></li>
<li><a href="http://mingxinglai.com/cn/2013/07/sysbench/" target="_blank" rel="external">sysbench 0.5使用手册</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/03/28/mysql-sysbench">http://seanlook.com/2016/03/28/mysql-sysbench</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sysbench是一个模块化的、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。关于这个项目的详细介绍请看：&lt;a href=&quot;https://github.com/akopytov/sysbench&quot;&gt;https://github.com/akopytov/sysbench&lt;/a&gt; 。&lt;br&gt;它主要包括以下几种方式的测试：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cpu性能&lt;/li&gt;
&lt;li&gt;磁盘io性能&lt;/li&gt;
&lt;li&gt;调度程序性能&lt;/li&gt;
&lt;li&gt;内存分配及传输速度&lt;/li&gt;
&lt;li&gt;POSIX线程性能&lt;/li&gt;
&lt;li&gt;数据库性能(OLTP基准测试)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;sysbench的数据库OLTP测试支持MySQL、PostgreSQL、Oracle，目前主要用于Linux操作系统，开源社区已经将sysbench移植到了Windows，并支持SQL Server的基准测试。&lt;/p&gt;
&lt;p&gt;废话不多说，开始。&lt;/p&gt;
&lt;h2 id=&quot;1-sysbench安装&quot;&gt;&lt;a href=&quot;#1-sysbench安装&quot; class=&quot;headerlink&quot; title=&quot;1. sysbench安装&quot;&gt;&lt;/a&gt;1. sysbench安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;mysql版本: mysql-community-server-5.6.29   &lt;/li&gt;
&lt;li&gt;OS: CentOS 6.7 X86_64&lt;/li&gt;
&lt;li&gt;sysbench 0.5相比0.4版本有一些变化，包括oltp测试结合了lua脚本，还多了一些隐藏选项，本文会涉及得到一部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前许多仓库里已编译好的二进制sysbench还是0.4.x版本，不过现在主流也还是github上的0.5，可以从 &lt;a href=&quot;http://www.lefred.be/node/154&quot;&gt;这里&lt;/a&gt;下载0.5版本的rpm包直接安装，不过我选择自己编译，因为只有这个办法是通用的。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 先安装编译依赖环境&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo yum install gcc gcc-c++ automake make  libtool mysql-community-devel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd &lt;span class=&quot;regexp&quot;&gt;/tmp &amp;amp;&amp;amp; git clone https:/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/github.com/&lt;/span&gt;akopytov/sysbench.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd &lt;span class=&quot;regexp&quot;&gt;/tmp/&lt;/span&gt;sysbench &amp;amp;&amp;amp; ./autogen.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ .&lt;span class=&quot;regexp&quot;&gt;/configure --prefix=/&lt;/span&gt;usr&lt;span class=&quot;regexp&quot;&gt;/local/&lt;/span&gt;sysbench&lt;span class=&quot;number&quot;&gt;-0.5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ./make &amp;amp;&amp;amp; sudo make install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0.5版本需要oltp.lua测试脚本&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果是rpm包方式安装的，在 /usr/share/doc/sysbench/tests/db/ 下可找到&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd &lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;regexp&quot;&gt;/sysbench &amp;amp;&amp;amp; sudo mkdir -p share/&lt;/span&gt;tests/db&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cp &lt;span class=&quot;regexp&quot;&gt;/tmp/&lt;/span&gt;sysbench&lt;span class=&quot;regexp&quot;&gt;/sysbench/&lt;/span&gt;tests&lt;span class=&quot;regexp&quot;&gt;/db/&lt;/span&gt;*.lua share&lt;span class=&quot;regexp&quot;&gt;/tests/&lt;/span&gt;db/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ .&lt;span class=&quot;regexp&quot;&gt;/bin/&lt;/span&gt;sysbench --version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sysbench &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果需要测试PostgreSQL、Oracle，则在configure时需要加上 –with-oracle 或者 –with-pgsql 参数&lt;/p&gt;
&lt;h2 id=&quot;2-使用sysbench对mysql压测&quot;&gt;&lt;a href=&quot;#2-使用sysbench对mysql压测&quot; class=&quot;headerlink&quot; title=&quot;2. 使用sysbench对mysql压测&quot;&gt;&lt;/a&gt;2. 使用sysbench对mysql压测&lt;/h2&gt;&lt;h3 id=&quot;2-1-只读示例&quot;&gt;&lt;a href=&quot;#2-1-只读示例&quot; class=&quot;headerlink&quot; title=&quot;2.1 只读示例&quot;&gt;&lt;/a&gt;2.1 只读示例&lt;/h3&gt;&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/bin/sysbench&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/share/tests/db/oltp&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;lua&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;host=10&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;port=8066&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;user=ecuser&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;password=ecuser&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;db=dbtest1a&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;oltp&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;count=10&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;oltp&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;size=500000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;interval=10&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;oltp&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;type=uniform&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;init=on&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;requests=0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;oltp&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;mode=nontrx&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;oltp&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;nontrx&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;mode=select&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;oltp&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;only=on&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;oltp&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;trx=on&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;time=120&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;threads=12&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;\&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;prepare|run|cleanup&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="sysbench" scheme="http://seanlook.com/tags/sysbench/"/>
    
  </entry>
  
  <entry>
    <title>记一次Mac mini折腾过程（鼠键共享，更换SSD）</title>
    <link href="http://seanlook.com/2016/01/18/mac-mini-zturn/"/>
    <id>http://seanlook.com/2016/01/18/mac-mini-zturn/</id>
    <published>2016-01-18T08:32:49.000Z</published>
    <updated>2016-01-18T08:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>从公司网管那捣鼓来一个“遗弃” Mac mini，说其它人觉得用起来太卡，正好我的工作PC( CPU 4×i3，MEM 8G, HDD 500G)软件开多了也觉得有些卡，特别是我使用浏览器的习惯不太好，每次搜索统一结果都要打开好多标签页对比，文章性质的觉得有用想将来记录下来就没关闭页面，一两个星期下来只Chrome使用的内存就达到4G多。不用也浪费，于是就拿Mac mini分摊一下压力。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-a1347.jpg" alt="macmini-a1347.jpg"></p>
<p>刚拿到手时心想得有多不堪配置才使得的Mac mini卡到嫌弃的地步，看了下底面的型号，A1347——这是2014年底出的新款，没有我想象的那么旧，还好。于是找来显示器、鼠键准备开用了（在某宝上买根八字电源线）。</p>
<p>但是开机密码没有啊！虽然简单重装是个办法，但我还是想看看里面现在是什么样的，杀鸡焉用牛刀。直接Crack root…</p>
<hr>
<h1 id="1-破解Mac-root密码"><a href="#1-破解Mac-root密码" class="headerlink" title="1. 破解Mac root密码"></a>1. 破解Mac root密码</h1><p>找到这篇文章 <a href="http://wowking.blog.51cto.com/1638252/753774" target="_blank" rel="external">http://wowking.blog.51cto.com/1638252/753774</a> 。我们平头百姓手头哪会有刻录的Mac OS光盘，而且也没移动光驱，所以方法一就不考虑了。方法二是单用户模式，毕竟 OS X 也是*nix血统，命令行几个命令倒难不到我。</p>
<p>可是众所周知，Mac的键盘跟普通键盘是不一样的，开机启动的时候<code>command + S</code>在一般美式键盘下到底能不能进入单用户模式呢？嗯，行的，按下mini的开机按钮之后不断 <code>win + S</code>。进入Single user model之后提示符#root&gt;，逐步输入以下命令：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 执行硬盘检测（只读）, 这一步可以省略</span></div><div class="line">/sbin/fsck -y</div><div class="line"></div><div class="line"><span class="meta"># 加载文件系统（读/写）</span></div><div class="line">/sbin/mount -uaw</div><div class="line"></div><div class="line"><span class="meta"># 删除初始化设置时的OSX生成的隐藏文件”.applesetupdone”</span></div><div class="line">rm /<span class="keyword">var</span>/db/.AppleSetupDone</div><div class="line"></div><div class="line"><span class="meta"># 重启</span></div><div class="line">reboot</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>重启后开机画面会指导你创建一个新的<strong>管理员</strong>账号，然后这个新的账号密码登陆。就是这么简单，接下来删用户抹除一切使用痕迹😄。</p>
<p>进去之后着实令我窃喜：OS X Yosemite, 2.6 GHZ Intel Core i5, 8G DDR3, Intel Iris 1536 MB, 1TB HDD，就这配置比得上我当前的Win PC了，高兴得捡了块宝似的。优胜美地系统与我自己的Mac Book Pro一样，无缝立马开始用。</p>
<p>然而面临的一个问题来了，现在2台工作电脑，配有2套鼠标键盘，切换太不方便了。于是我用大腿想了想，嗯，应该有专门的多台电脑间共享鼠键的软件。啪啪啪几下锁定两款<code>Sharemouse</code>、<code>Synergy</code>。</p>
<hr>
<h1 id="2-跨平台共享鼠标键盘-synergy"><a href="#2-跨平台共享鼠标键盘-synergy" class="headerlink" title="2. 跨平台共享鼠标键盘-synergy"></a>2. 跨平台共享鼠标键盘-synergy</h1><p>先来简单说一下Sharemouse，收费，但你懂的，但这东西毕竟用的人少，要分别在在windows和Mac两个平台上找到相同版本的破解版是多么不容易。中间折腾就不说了，成功使用 V2.0.53 版本。但号称的拖拽文件我始终没看到，我猜还是不同系统的缘故。sharemouse是有阉割了拖拽和加密功能的免费版的，而且配置超级简单，基本上只要在同一局域网，各自把软件装上，就可以用其中随便哪一电脑的鼠键来回在两个显示器之间滑动，而且还有dimmy效果。（抱歉，因为文章是后写的，没截图）</p>
<p><a href="http://synergy-project.org/download/free/" target="_blank" rel="external">Synergy</a>也是鼎鼎大名的一款，而且开源、跨平台，也能复制剪切版和拖拽文件，据说它是谷歌工程师标配，因为他们也有在多台主机间控制电脑困扰。</p>
<p>但synergy公司也很奇葩，工具开源，但最新版的下载不免费，你要支付之后才能看到新版下载页面（旧版本免费开放，但你明知道有bug而且已解决，纠结吧少年）。我想原因大概是synergy既要遵守开源协议，但又要维持收入吧。奇怪的是网上竟然很少有人把它共享下载。当然，如果你不嫌麻烦，可以去 <a href="https://github.com/symless/synergy" target="_blank" rel="external">https://github.com/symless/synergy</a> 下载源码，自己编译，synergy还很友好的提供了编译指南…点到为止，我也不想再浪费无谓的折腾时间。</p>
<p>这里分享v1.7.4版本下载，链接: <a href="http://pan.baidu.com/s/1mhbaLza" target="_blank" rel="external">http://pan.baidu.com/s/1mhbaLza</a> 密码: m4d7</p>
<p>我现在一直使用的是synergy，鼠键接在Windows主机，但有一个问题没解决：synergy即使加入了Mac mini（用户）开机启动，但用户没输密码登陆之前，是不会启动synergy的，所以还是要另外接一套鼠键来输密码，随后synergy接管，衰，不知谁有更好的办法？</p>
<p>下面简单介绍配置过程。</p>
<h2 id="windows作服务端"><a href="#windows作服务端" class="headerlink" title="windows作服务端"></a>windows作服务端</h2><p>synergy跟sharemouse很大不同在于，sharemouse是不分Server和Client的，鼠键可以插在任意一台电脑上，而synergy要求鼠键在Server，需要鼠键的其它电脑可以没有。</p>
<ol>
<li><p>勾选 【Server】，可以看到当前ip<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-server.png" alt="macmini-synergy-server"></p>
</li>
<li><p>点击 【设置服务端】，默认最中间显示器代表当前电脑<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-server-settings.png" alt="macmini-synergy-server-settings"></p>
</li>
</ol>
<p>从右上角拖一个到你想要展示的相对位置，双击编辑 【屏幕名】（即其它电脑的主机名）</p>
<h2 id="mac做客户端"><a href="#mac做客户端" class="headerlink" title="mac做客户端"></a>mac做客户端</h2><ol>
<li>在mac【设置】里选择【安全与隐私】，点击【隐私】选项卡，【辅助功能】，勾选右边的 Synergy。</li>
</ol>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-client-pre.png" alt="macmini-synergy-client-pre.jpg"></p>
<ol>
<li>勾选【Client】，输入上一节看到的服务端ip。</li>
</ol>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-synergy-client.png" alt="macmini-synergy-client.jpg"></p>
<p>同时注意 screen name 就是上一节要填入的屏幕名，也是主机名啦。<br>不要忘了 start，看到 starting cocoa loop 就正常了，享受 “一键” 的快感吧。</p>
<p>偷偷的往后瞥了一眼，那个同事还说2套鼠键来回用。。。</p>
<p>多说一句，synergy或sharemouse跟kvm切换器不同，不能实现kvm switch的屏幕扩展、录像等功能，kvm switch显示器也是共用的。</p>
<p>一切似乎都完美了，开开心心的typing, browsing了2个星期，卡！一直盯着那个圈转啊转啊。Mac mini上任务也不算多，活动监视器也没看到CPU消耗大户。</p>
<p>这就是这台Mac mini被抛弃的原因吗？难道我也要放弃它吗？我陷入了深深的沉思。</p>
<p>网上查了查“Mac mini 换固态硬盘”，有大批的文章。一不做二不休，给Mac mini拆机换SSD ！</p>
<hr>
<h1 id="3-Mac-mini换SSD"><a href="#3-Mac-mini换SSD" class="headerlink" title="3. Mac mini换SSD"></a>3. Mac mini换SSD</h1><p>跟小吴关系好，要来一个SATA接口的128G三星固态硬盘850 EVO，查了3篇文章对着看，精确每一步，这么mini的mini，拆坏一个零件或者掉个螺丝，赔不起…</p>
<p>就是这几篇了：</p>
<ol>
<li><a href="http://www.feng.com/iPhone/news/2015-08-12/Match-the-Mac-mini-tutorial-2014-low-SSD-solid-state-drives_621487.shtml" target="_blank" rel="external">教程：2014款低配Mac mini换SSD固态硬盘</a>  (主要看这个，作者好有耐心)</li>
<li><a href="http://bbs.feng.com/read-htm-tid-9010944.html" target="_blank" rel="external">2014款mac mini 拆机 更换ssd 升级硬盘 固态硬盘 记录教程</a></li>
<li>这还有个不是2014款的<a href="http://www.tudou.com/programs/view/Y25qE4t8kNY/" target="_blank" rel="external">拆解视频</a> (没看过，写文章的时候才搜到)</li>
</ol>
<p>但是有个问题，旧的HDD换下来，新的SSD装上去，系统资料什么的可都没了。</p>
<p>解决这个问题方法可多了：</p>
<ol>
<li>有硬盘盒的话最方便。用Superduper或者Carbon Copy Cloner工具直接把源OSX系统+数据整盘镜像到你的SSD中，换好之后开机直接可以用了。</li>
<li>先手动备份（拷贝）文件到其它系统/硬盘，换上SSD后用U盘全新安装OSX，恢复数据。</li>
</ol>
<p>好吧，好像也没有那么多方法。虽然第一种比较通用而且技术含量高，但因为这台Mac并没用多久，文稿和软件不多，备份恢复容易，于是我选择了第2种。</p>
<p>另外又多说一句，Mac mini因为零部件排版紧密，没有台式机或笔记本那么多插拔的口子，CPU和内存是焊死在主板上的，所以是换不了滴。</p>
<p>接下来就是心灵手巧的我，漫长的两个小时的肢解和还原过程了，此处略去一万字。</p>
<p>拆的时候<strong>螺丝按顺序分开放</strong>，脑子记好零件位置，不确定之前先拍个照好还原，其它也没什么了。附图：</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-ssd-1.jpg" alt="macmini-change-ssd-1"><br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-ssd-2.jpg" alt="macmini-change-ssd-2"></p>
<p>几点说明：</p>
<ol>
<li>第一步打开黑色后盖，用刀口起子或者硬薄片轻轻在下方撬动。早前一直想转开它（老版）</li>
<li>用到两种螺丝刀 T6H和T9，JK 6089-A</li>
<li>第3步取下wifi天线，有3根线各自连接的圆圈比较难取，我是用镊子夹住网上提的。取天线的时候往后小幅度摇摆拉拽。</li>
<li>第4步说的取风扇排线，我是用手一边向上空提排线，一边镊子的小尖尖在下面翘。它的排线是从上空往下“按”的，跟平常印象里的“插”不一样。这个地方堵了好久</li>
<li>第六步把主板撬出来很关键了。千万注意啊，是<strong>水平</strong>的往出口方向使劲，“推”出来，文中说“撬”有点误导。我是以下面做支点撬，那两个孔让我给弄坏了😓，还好不太要紧。</li>
<li>装回去文章倒着往前看就是了</li>
</ol>
<p>不得不说换完之后，很有成就感。下面就是装系统，感受一下要上天的ssd了。</p>
<h1 id="4-U盘安装OS-X"><a href="#4-U盘安装OS-X" class="headerlink" title="4. U盘安装OS X"></a>4. U盘安装OS X</h1><p>跟用U盘安装windows还是有点不同的，要先在一台Mac电脑上格式化U盘。参考这里<a href="http://www.iplaysoft.com/osx-yosemite-usb-install-drive.html" target="_blank" rel="external">U盘全新安装OS X</a></p>
<ol>
<li>下载苹果官方 OS X Yosemite 正式版，解压得到 “Install OS X Yosemite.app”，拷贝到【应用程序】目录中</li>
<li>使用Mac的【磁盘工具】，将U盘分区划成“Mac OS扩展(日志式)”、“GUID分区表”</li>
<li><p>在终端里执行下面的命令</p>
<pre><code>sudo /Applications/Install\ OS\ X\ Yosemite.app/Contents/Resources/createinstallmedia --volume \
/Volumes/Untitled --applicationpath /Applications/Install\ OS\ X\ Yosemite.app --nointeraction
</code></pre><p> 上面<code>/Volumes/Untitled</code>是U盘的名字。回车后，系统会提示你输入管理员密码，接下来就是等待系统开始制作启动盘了。</p>
</li>
<li><p>从U盘启动安装 OS X<br>在Mac mini上插上U盘，启动Mac，然后一直按住【option】键（即Alt键，不行就重启多试几次）。<br><img src="http://7q5fot.com1.z0.glb.clouddn.com/macmini-osx-u-install.jpg" alt="macmini-osx-u-install.jpg"></p>
</li>
<li><p>在进入刚进入安装过程后，要先对ssd盘格式化才能看到它。接下来就按照 <a href="http://tu.pcpop.com/all-771688.htm" target="_blank" rel="external">向导</a> 就可以完成安装了。建议appleID完成后再添加。</p>
</li>
</ol>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2016/01/18/mac-mini-zturn/">http://seanlook.com/2016/01/18/mac-mini-zturn/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从公司网管那捣鼓来一个“遗弃” Mac mini，说其它人觉得用起来太卡，正好我的工作PC( CPU 4×i3，MEM 8G, HDD 500G)软件开多了也觉得有些卡，特别是我使用浏览器的习惯不太好，每次搜索统一结果都要打开好多标签页对比，文章性质的觉得有用想将来记录下来就没关闭页面，一两个星期下来只Chrome使用的内存就达到4G多。不用也浪费，于是就拿Mac mini分摊一下压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/macmini-a1347.jpg&quot; alt=&quot;macmini-a1347.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;刚拿到手时心想得有多不堪配置才使得的Mac mini卡到嫌弃的地步，看了下底面的型号，A1347——这是2014年底出的新款，没有我想象的那么旧，还好。于是找来显示器、鼠键准备开用了（在某宝上买根八字电源线）。&lt;/p&gt;
&lt;p&gt;但是开机密码没有啊！虽然简单重装是个办法，但我还是想看看里面现在是什么样的，杀鸡焉用牛刀。直接Crack root…&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1-破解Mac-root密码&quot;&gt;&lt;a href=&quot;#1-破解Mac-root密码&quot; class=&quot;headerlink&quot; title=&quot;1. 破解Mac root密码&quot;&gt;&lt;/a&gt;1. 破解Mac root密码&lt;/h1&gt;&lt;p&gt;找到这篇文章 &lt;a href=&quot;http://wowking.blog.51cto.com/1638252/753774&quot;&gt;http://wowking.blog.51cto.com/1638252/753774&lt;/a&gt; 。我们平头百姓手头哪会有刻录的Mac OS光盘，而且也没移动光驱，所以方法一就不考虑了。方法二是单用户模式，毕竟 OS X 也是*nix血统，命令行几个命令倒难不到我。&lt;/p&gt;
&lt;p&gt;可是众所周知，Mac的键盘跟普通键盘是不一样的，开机启动的时候&lt;code&gt;command + S&lt;/code&gt;在一般美式键盘下到底能不能进入单用户模式呢？嗯，行的，按下mini的开机按钮之后不断 &lt;code&gt;win + S&lt;/code&gt;。进入Single user model之后提示符#root&amp;gt;，逐步输入以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 执行硬盘检测（只读）, 这一步可以省略&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/sbin/fsck -y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 加载文件系统（读/写）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/sbin/mount -uaw&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 删除初始化设置时的OSX生成的隐藏文件”.applesetupdone”&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm /&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/db/.AppleSetupDone&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 重启&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;reboot&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mac OSX" scheme="http://seanlook.com/categories/Mac-OSX/"/>
    
    
      <category term="Mac" scheme="http://seanlook.com/tags/Mac/"/>
    
      <category term="鼠标键盘" scheme="http://seanlook.com/tags/%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98/"/>
    
      <category term="synergy" scheme="http://seanlook.com/tags/synergy/"/>
    
  </entry>
  
  <entry>
    <title>生产环境使用 pt-table-checksum 检查MySQL数据一致性</title>
    <link href="http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/"/>
    <id>http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/</id>
    <published>2015-12-29T02:21:25.000Z</published>
    <updated>2015-12-28T16:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司数据中心从托管机房迁移到阿里云，需要对mysql迁移（Replication）后的数据一致性进行校验，但又不能对生产环境使用造成影响，pt-table-checksum 成为了绝佳也是唯一的检查工具。</p>
<p><code>pt-table-checksum</code> 是 Percona-Toolkit 的组件之一，用于检测MySQL主、从库的数据是否一致。其原理是在主库执行基于statement的sql语句来生成主库数据块的checksum，把相同的sql语句传递到从库执行，并在从库上计算相同数据块的checksum，最后，比较主从库上相同数据块的checksum值，由此判断主从数据是否一致。检测过程根据唯一索引将表按row切分为块（chunk），以为单位计算，可以避免锁表。检测时会自动判断复制延迟、 master的负载， 超过阀值后会自动将检测暂停，减小对线上服务的影响。</p>
<p><code>pt-table-checksum</code> 默认情况下可以应对绝大部分场景，官方说，即使上千个库、上万亿的行，它依然可以很好的工作，这源自于设计很简单，一次检查一个表，不需要太多的内存和多余的操作；必要时，<code>pt-table-checksum</code> 会根据服务器负载动态改变 chunk 大小，减少从库的延迟。</p>
<p>为了减少对数据库的干预，<code>pt-table-checksum</code>还会自动侦测并连接到从库，当然如果失败，可以指定<code>--recursion-method</code>选项来告诉从库在哪里。它的易用性还体现在，复制若有延迟，在从库 checksum 会暂停直到赶上主库的计算时间点（也通过选项<code>--</code>设定一个可容忍的延迟最大值，超过这个值也认为不一致）。 </p>
<p>为了保证主数据库服务的安全，该工具实现了许多保护措施：</p>
<ol>
<li>自动设置 <code>innodb_lock_wait_timeout</code> 为1s，避免引起</li>
<li>默认当数据库有25个以上的并发查询时，<code>pt-table-checksum</code>会暂停。可以设置 <code>--max-load</code> 选项来设置这个阀值</li>
<li>当用 Ctrl+C 停止任务后，工具会正常的完成当前 chunk 检测，下次使用 <code>--resume</code> 选项启动可以恢复继续下一个 chunk</li>
</ol>
<h2 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h2><p>直接看 <a href="http://www.nettedfish.com/blog/2013/06/04/check-replication-consistency-by-pt-table-checksum/" target="_blank" rel="external">nettedfish</a> 的说明：</p>
<blockquote>
<p>1. 连接到主库：pt工具连接到主库，然后自动发现主库的所有从库。默认采用show full processlist来查找从库，但是这只有在主从实例端口相同的情况下才有效。<br>3. 查找主库或者从库是否有复制过滤规则：这是为了安全而默认检查的选项。你可以关闭这个检查，但是这可能导致checksum的sql语句要么不会同步到从库，要么到了从库发现从库没有要被checksum的表，这都会导致从库同步卡库。<br>5. 开始获取表，一个个的计算。<br>6. 如果是表的第一个chunk，那么chunk-size一般为1000；如果不是表的第一个chunk，那么采用19步中分析出的结果。<br>7. 检查表结构，进行数据类型转换等，生成checksum的sql语句。<br>8. 根据表上的索引和数据的分布，选择最合适的split表的方法。<br>9. 开始checksum表。<br>10. 默认在chunk一个表之前，先删除上次这个表相关的计算结果。除非–resume。<br>14. 根据explain的结果，判断chunk的size是否超过了你定义的chunk-size的上限。如果超过了，为了不影响线上性能，这个chunk将被忽略。<br>15. 把要checksum的行加上for update锁，并计算。<br>17-18. 把计算结果存储到master_crc master_count列中。<br>19. 调整下一个chunk的大小。<br>20. 等待从库追上主库。如果没有延迟备份的从库在运行，最好检查所有的从库，如果发现延迟最大的从库延迟超过max-lag秒，pt工具在这里将暂停。<br>21. 如果发现主库的max-load超过某个阈值，pt工具在这里将暂停。<br>22. 继续下一个chunk，直到这个table被chunk完毕。<br>23-24. 等待从库执行完checksum，便于生成汇总的统计结果。每个表汇总并统计一次。<br>25-26. 循环每个表，直到结束。<br>校验结束后，在每个从库上，执行如下的sql语句即可看到是否有主从不一致发生： </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> percona.checksums <span class="keyword">where</span> master_cnt &lt;&gt; this_cnt <span class="keyword">OR</span> master_crc &lt;&gt; this_crc <span class="keyword">OR</span> </div><div class="line"><span class="keyword">ISNULL</span>(master_crc) &lt;&gt; <span class="keyword">ISNULL</span>(this_crc) \G</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="你需要知道的选项"><a href="#你需要知道的选项" class="headerlink" title="你需要知道的选项"></a>你需要知道的选项</h2><ul>
<li><p><code>--replicate-check</code>：执行完 checksum 查询在percona.checksums表中，不一定马上查看结果呀 —— yes则马上比较chunk的crc32值并输出DIFFS列，否则不输出。默认yes，如果指定为<code>--noreplicate-check</code>，一般后续使用下面的<code>--replicate-check-only</code>去输出DIFF结果。</p>
</li>
<li><p><code>--replicate-check-only</code>：不在主从库做 checksum 查询，只在原有 <code>percona.checksums</code> 表中查询结果，并输出数据不一致的信息。周期性的检测一致性时可能用到。</p>
</li>
<li><p><code>--nocheck-binlog-format</code>：不检测日志格式。这个选项对于 ROW 模式的复制很重要，因为<code>pt-table-checksum</code>会在 Master和Slave 上设置<code>binlog_format=STATEMENT</code>（确保从库也会执行 checksum SQL），MySQL限制从库是无法设置的，所以假如行复制从库，再作为主库复制出新从库时（A-&gt;B-&gt;C），B的checksums数据将无法传输。（没验证）</p>
</li>
<li><p><code>--replicate=</code> 指定 checksum 计算结果存到哪个库表里，如果没有指定，默认是 percona.checksums 。<br>但是我们检查使用的mysql用户一般是没有 create table 权限的，所以你可能需要先手动创建：</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> percona;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> percona.checksums (</div><div class="line">    db <span class="built_in">CHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    tbl <span class="built_in">CHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="keyword">chunk</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    chunk_time <span class="built_in">FLOAT</span> <span class="literal">NULL</span>,</div><div class="line">    chunk_index <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</div><div class="line">    lower_boundary <span class="built_in">TEXT</span> <span class="literal">NULL</span>,</div><div class="line">    upper_boundary <span class="built_in">TEXT</span> <span class="literal">NULL</span>,</div><div class="line">    this_crc <span class="built_in">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    this_cnt <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    master_crc <span class="built_in">CHAR</span>(<span class="number">40</span>) <span class="literal">NULL</span>,</div><div class="line">    master_cnt <span class="built_in">INT</span> <span class="literal">NULL</span>,</div><div class="line">    ts <span class="keyword">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</div><div class="line">    PRIMARY <span class="keyword">KEY</span> (db,tbl,<span class="keyword">chunk</span>),</div><div class="line">    <span class="keyword">INDEX</span> ts_db_tbl(ts,db,tbl)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>生产环境中数据库用户权限一般都是有严格管理的，假如连接用户是<code>repl_user</code>（即直接用复制用户来检查），它应该额外赋予对其它库的 SELECT ，LOCK TABLES 权限，如果后续要用 pt-table-sync 就就需要写权限了。对percona库有写权限：</p>
<pre><code>GRANT ALL PRIVILEGEES on percona.* to repl_user@&apos;%&apos; IDENTIFIED BY &apos;repl_pass&apos;;
GRANT SELECT,LOCK TABLES,PROCESS,SUPER on *.* to repl_user@&apos;%&apos;;
</code></pre><p>注：</p>
<ol>
<li>为了减少不必要的麻烦，确保你的 repl_user@’xxx’ 用户能同时登陆主库和从库</li>
<li><code>--create-replicate-table</code> 选项会自动创建 percona.checksums 表，但也意味着赋予额外的 <code>CREATE TABLE</code>权限给 percona_tk@’xxx’ 用户。默认yes</li>
<li>PROCESS用于自动发现从库信息，SUPER权限用于set binlog_format。</li>
</ol>
<ul>
<li><p><code>--no-check-replication-filters</code> 表示不需要检查 Master 配置里是否指定了 Filter。 默认会检查，如果配置了 Filter，如 replicate_do_db,replicate-wild-ignore-table,binlog_ignore_db 等，在从库checksum就与遇到表不存在而报错退出，所以官方默认是yes（<code>--check-replication-filters</code>）但我们实际在检测中时指定<code>--databases=</code>，所以就不存在这个问题，干脆不检测</p>
</li>
<li><p><code>--empty-replicate-table</code>：每个表checksum开始前，清空它之前的检测数据（不影响其它表的checksum数据），默认yes。当然如果使用<code>--resume</code>启动检测数据不会清空。<br>当启用<code>--noempty-replicate-table</code>即不清空时，不计算计算chunk,只计算。</p>
</li>
<li><p><code>--databases=</code>，<code>-d</code>：要检查的数据库，逗号分隔。用脚趾头想也知道 <code>--databases-regex</code> 正则匹配要检测的数据库，<code>--ignore-databases[-regex]</code>忽略检查的库。Filter选项。</p>
</li>
<li><p><code>--tables=</code>，<code>-t</code>：要检查的表，逗号分隔。如果要检查的表分布在不同的db中，可以用<code>--tables=dbname1.table1,dbnamd2.table2</code>的形式。同理有<code>--tables-regex</code>，<code>--ignore-tables</code>，<code>--ignore-tables-regex</code>。<code>--replicate</code>指定的checksum表始终会被过滤。</p>
</li>
<li><p><code>--recursion-method</code>：发现从库的方式。pt-table-checksum 默认可以在主库的 <code>processlist</code> 中找到从库复制进程，从而识别出有哪些从库，但如果使用是非标准3306端口，会导致找不到从库信息。此时就会自动采用<code>host</code>方式，但需要提前在从库 my.cnf 里面配置<code>report_host</code>、<code>report_port</code>信息，如：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">report_host</span> = MASTER_HOST</div><div class="line"><span class="attr">report_port</span> = <span class="number">13306</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>最终极的办法是<code>dsn</code>，dsn指定的是某个表（如 percona.dsns ），表行记录是改主库的（多个）从库的连接信息。适用以下任一情形：</p>
<ol>
<li>主库不能自动发现从库</li>
<li>不想在从库添加额外配置（因为要重启）</li>
<li>主从检测连接用户信息不一样</li>
<li>多个从库时只想验证指定从库的一致</li>
</ol>
<p>我比较倾向使用DSN的方式。这个dsns表只需要在执行 <code>pt-table-checksum</code> 命令的服务器上能够访问到就行。这里纠正一个认识，网上很多人说 pt-table-checksum 要在主库上执行，其实不是的，我的mysql实例比较多，只需在某一台服务器上安装percona-toolkit，这台服务能够同时访问主库和从库就行了。具体用法见后面实例。</p>
<h2 id="检测实例"><a href="#检测实例" class="headerlink" title="检测实例"></a>检测实例</h2><h3 id="同网段间主从一致检查"><a href="#同网段间主从一致检查" class="headerlink" title="同网段间主从一致检查"></a>同网段间主从一致检查</h3><p>场景：</p>
<ol>
<li>标准端口3306，只检查某一个库的关键表</li>
<li>一主一从，binlog<strong>不</strong>是ROW模式</li>
<li>同网段复制，percona_tk@’192.168.5.%’ 具备该有的权限：<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> ALL PRIVILEGEES <span class="keyword">on</span> repl_user.* <span class="keyword">to</span> repl_user@<span class="string">'192.168.5.%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'repl_pass'</span>;</div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">LOCK</span> <span class="keyword">TABLES</span>,PROCESS,SUPER <span class="keyword">on</span> *.* <span class="keyword">to</span> repl_user@<span class="string">'192.168.5.%'</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这是最简单的方式，把要连接和检查的信息交代就行了：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># pt-<span class="keyword">table</span>-checksum <span class="comment">h=MASTER_HOST,u=repl_user,p=</span><span class="comment">'repl_pass'</span><span class="comment">,P=3306 \</span></div><div class="line">--databases=d_ts_profile --tables=t_user,t_user_detail,t_user_group --nocheck-replication-filters</div></pre></td></tr></table></figure></p>
<p>如果是首次运行，会在主库自动创建 percona.checksums 表。</p>
<p>输出结果：</p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Replica lag is<span class="number"> 2307 </span>seconds on mysql-5.  Waiting.</div><div class="line">Checksumming d_ts_profile.t_user_account:   3% 54:48 remain</div><div class="line">            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE</div><div class="line">12-18T16:07:48     <span class="number"> 0 </span>    <span class="number"> 0 </span> <span class="number"> 313641 </span>     <span class="number"> 9 </span>     <span class="number"> 0 </span>146.417 d_ts_profile.t_user</div><div class="line">12-18T16:08:00     <span class="number"> 0 </span>    <span class="number"> 0 </span> <span class="number"> 397734 </span>    <span class="number"> 12 </span>     <span class="number"> 0 </span> 11.747 d_ts_profile.t_user_detail</div><div class="line">12-18T16:08:24     <span class="number"> 0 </span>    <span class="number"> 0 </span><span class="number"> 1668327 </span>    <span class="number"> 20 </span>     <span class="number"> 0 </span> 23.941 d_ts_profile.t_user_group</div></pre></td></tr></table></figure>
<ul>
<li>TS ：完成检查的时间戳。</li>
<li>ERRORS ：检查时候发生错误和警告的数量。 </li>
<li>DIFFS ：不一致的chunk数量。当指定 <code>--no-replicate-check</code> 即检查完但不立即输出结果时，会一直为0；当指定 <code>--replicate-check-only</code> 即不检查只从checksums表中计算crc32，且只显示不一致的信息（毕竟输出的大部分应该是一致的，容易造成干扰）。</li>
<li>ROWS ：比对的表行数。</li>
<li>CHUNKS ：被划分到表中的块的数目。</li>
<li>SKIPPED ：由于错误或警告或过大，则跳过块的数目。</li>
<li>TIME ：执行的时间。</li>
<li>TABLE ：被检查的表名</li>
</ul>
<h3 id="使用dsn跨数据中心检测"><a href="#使用dsn跨数据中心检测" class="headerlink" title="使用dsn跨数据中心检测"></a>使用dsn跨数据中心检测</h3><p>场景：</p>
<ol>
<li>非标准端口13306，只检查以 d_ts 开头的所有库</li>
<li>一主二从，binlog<strong>是</strong>ROW模式，其中一从在阿里云ECS上，主库是无法直接访问该从库的</li>
<li>检测用的账号因为不是%，所以不一样</li>
<li>以下是我环境的情况<br>MASTER_HOST:13306 主库<br>REPLICA_HOST:3306    从库<br>PTCHECK_HOST pt-table-checksum所在服务器<br>DSN_DBHOST，记录从库（连接）dsns的数据库</li>
</ol>
<p>最优的方式就是dsn指定从库了。在从库或从库同网段主机里装上 percona-toolkit。</p>
<p>在DSN_DBHOST 数据库实例上创建DSNs表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> percona;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`percona`</span>.<span class="string">`dsns`</span> (</div><div class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line"><span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`dsn`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">GRANT</span> ALL PRIVILEGEES <span class="keyword">on</span> percona.* <span class="keyword">to</span> percona_tk@<span class="string">'PTCHECK_HOST'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'percona_pass'</span>;</div></pre></td></tr></table></figure>
<p>如果有多个实例要检查，可以创建多个类似的dsns表。上面的percona_tk用户只是用来访问dsn库。插入从库信息：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> percona;</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dsns(dsn) <span class="keyword">values</span>(<span class="string">'h=REPLICA_HOST,P=3306,u=repl_user,p=repl_pass'</span>);</div></pre></td></tr></table></figure>
<p>DSNs记录 dsn 列格式如 <code>h=REPLICA_HOST,u=repl_user,p=repl_pass</code></p>
<p>在 PTCHECK_HOST 上执行检查命令：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># pt-table-checksum --replicate=percona.checksums --nocheck-replication-filters --no-check-binlog-format \</div><div class="line">h=MASTER_HOST,u=repl_user,p=<span class="string">'repl_pass'</span>,P=<span class="number">13306</span> --databases-regex=d_ts.* \</div><div class="line">--recursion-<span class="function"><span class="keyword">method</span> <span class="title">dsn</span>=<span class="title">h</span>=<span class="title">DSN_DBHOST</span>,<span class="title">u</span>=<span class="title">percona_tk</span>,<span class="title">p</span>='<span class="title">percona_pass</span>',<span class="title">P</span>=3306,<span class="title">D</span>=<span class="title">percona</span>,<span class="title">t</span>=<span class="title">dsn</span></span></div></pre></td></tr></table></figure>
<p>选项的意思就不多说了。</p>
<p>检测完如果一致，其实是求个心安，特别是在做数据迁移的时候。如果不一致，那就需要借助 <code>pt-table-sync</code> 工具了，不作介绍。</p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li><p>Diffs cannot be detected because no slaves were found<br>不能自动找到从库，确认processlist或host或dsns方式用对了。</p>
</li>
<li><p>Cannot connect to h=slave1.<em>*</em>.com,p=…,u=percona_user<br>可以在<code>pt-table-checksum</code>命令前加<code>PTDEBUG=1</code>来看详细的执行过程，如端口、用户名、权限错误。</p>
</li>
<li><p>Waiting for the –replicate table to replicate to XXX<br>问题出在 percona.checksums 表在从库不存在，根本原因是没有从主库同步过来，所以看一下从库是否延迟严重。</p>
</li>
<li><p>Pausing because Threads_running=25<br>反复打印出类似上面停止检查的信息。这是因为当前数据库正在运行的线程数大于默认25，pt-table-checksum 为了减少对库的压力暂停检查了。等数据库压力过了就好了，或者也可以直接 Ctrl+C 终端，下一次加上<code>--resume</code>继续执行，或者加大<code>--max-load=</code>值。</p>
</li>
<li><p>字符集问题</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Error checksumming table Error executing checksum query: DBD::mysql::st execute failed: Illegal mix of collations</div><div class="line">12-17T14:48:04 Error checksumming table d<span class="emphasis">_ec_</span>cs.t<span class="emphasis">_online_</span>cs: Error executing checksum query: </div><div class="line">DBD::mysql::st execute failed: Illegal mix of collations for operation 'concat_ws' [for Statement </div><div class="line">"REPLACE INTO <span class="code">`percona`</span>.<span class="code">`ali_checksum`</span> (db, tbl, chunk, chunk<span class="emphasis">_index, lower_</span>boundary, upper<span class="emphasis">_boundary, this_</span>cnt, this<span class="emphasis">_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_</span>XOR(CAST(CRC32(CONCAT<span class="emphasis">_WS('#', `f_</span>cs<span class="emphasis">_id`, `f_</span>corp<span class="emphasis">_id`, `f_</span>valid<span class="code">`, `</span>f<span class="emphasis">_show_</span>name<span class="code">`, `</span>f<span class="emphasis">_online_</span>msg<span class="code">`, `</span>f<span class="emphasis">_offline_</span>msg<span class="code">`, `</span>f<span class="emphasis">_show_</span>mobile<span class="code">`, `</span>f<span class="emphasis">_group_</span>id<span class="code">`, `</span>f<span class="emphasis">_qq`, `f_</span>show<span class="emphasis">_qq`, `f_</span>msn<span class="code">`, `</span>f<span class="emphasis">_show_</span>msn<span class="code">`, `</span>f<span class="emphasis">_sms_</span>online<span class="code">`, `</span>f<span class="emphasis">_scheme`, `f_</span>tel<span class="code">`, `</span>f<span class="emphasis">_telno`, `f_</span>show<span class="emphasis">_tel`, `f_</span>contact<span class="code">`, `</span>f<span class="emphasis">_mobile`, `f_</span>position<span class="code">`, `</span>f<span class="emphasis">_other1`, `f_</span>other2<span class="code">`, `</span>f<span class="emphasis">_other_</span>text1<span class="code">`, `</span>f<span class="emphasis">_other_</span>text2<span class="code">`, `</span>f<span class="emphasis">_email`, `f_</span>qq<span class="emphasis">_first`, `f_</span>qq<span class="emphasis">_first_</span>type<span class="code">`, `</span>f<span class="emphasis">_aids_</span>open<span class="code">`, `</span>f<span class="emphasis">_aids_</span>qq<span class="code">`, `</span>f<span class="emphasis">_aids_</span>crmqq<span class="code">`, `</span>f<span class="emphasis">_aids_</span>yahoo<span class="code">`, `</span>f<span class="emphasis">_aids_</span>skype<span class="code">`, `</span>f<span class="emphasis">_aids_</span>aliww<span class="code">`, `</span>f<span class="emphasis">_aids_</span>msn<span class="code">`, `</span>f<span class="emphasis">_aids_</span>alibaba<span class="code">`, `</span>f<span class="emphasis">_aids_</span>alitrade<span class="code">`, CONCAT(ISNULL(`</span>f<span class="emphasis">_show_</span>name<span class="code">`), ISNULL(`</span>f<span class="emphasis">_group_</span>id<span class="code">`), ISNULL(`</span>f<span class="emphasis">_qq`), ISNULL(`f_</span>show<span class="emphasis">_qq`), ISNULL(`f_</span>sms<span class="emphasis">_online`), ISNULL(`f_</span>other<span class="emphasis">_text1`), ISNULL(`f_</span>other<span class="emphasis">_text2`), ISNULL(`f_</span>email<span class="code">`)) )) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `</span>d<span class="emphasis">_ec_</span>cs<span class="code">`.`</span>t<span class="emphasis">_online_</span>cs` </div><div class="line">/<span class="emphasis">*checksum table*</span>/" with ParamValues: 0='d<span class="emphasis">_ts_</span>profile', 1='t<span class="emphasis">_user_</span>account', 2=1, 3=undef, 4=undef, 5=undef] at /usr/bin/pt-table-checksum line 10520.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>是个bug，暂时无法解决，<a href="https://bugs.launchpad.net/percona-toolkit/+bug/1427552" target="_blank" rel="external">Illegal mix of collations for operation ‘concat_ws’</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.percona.com/doc/percona-toolkit/2.2/pt-table-checksum.html" target="_blank" rel="external">pt-table-checksum</a></li>
<li><a href="http://www.nettedfish.com/blog/2013/06/04/check-replication-consistency-by-pt-table-checksum/" target="_blank" rel="external">用pt-table-checksum校验数据一致性</a></li>
<li><a href="http://blog.csdn.net/melody_mr/article/details/45224249" target="_blank" rel="external">使用pt-table-checksum及pt-table-sync校验复制一致性详细介绍</a></li>
<li><a href="http://imysql.com/2015/04/19/mysql-faq-pt-table-checksum-use-case.shtml" target="_blank" rel="external">Pausing because Threads_running=0</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/">http://seanlook.com/2015/12/29/mysql_replica_pt-table-checksum/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司数据中心从托管机房迁移到阿里云，需要对mysql迁移（Replication）后的数据一致性进行校验，但又不能对生产环境使用造成影响，pt-table-checksum 成为了绝佳也是唯一的检查工具。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pt-table-checksum&lt;/code&gt; 是 Percona-Toolkit 的组件之一，用于检测MySQL主、从库的数据是否一致。其原理是在主库执行基于statement的sql语句来生成主库数据块的checksum，把相同的sql语句传递到从库执行，并在从库上计算相同数据块的checksum，最后，比较主从库上相同数据块的checksum值，由此判断主从数据是否一致。检测过程根据唯一索引将表按row切分为块（chunk），以为单位计算，可以避免锁表。检测时会自动判断复制延迟、 master的负载， 超过阀值后会自动将检测暂停，减小对线上服务的影响。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pt-table-checksum&lt;/code&gt; 默认情况下可以应对绝大部分场景，官方说，即使上千个库、上万亿的行，它依然可以很好的工作，这源自于设计很简单，一次检查一个表，不需要太多的内存和多余的操作；必要时，&lt;code&gt;pt-table-checksum&lt;/code&gt; 会根据服务器负载动态改变 chunk 大小，减少从库的延迟。&lt;/p&gt;
&lt;p&gt;为了减少对数据库的干预，&lt;code&gt;pt-table-checksum&lt;/code&gt;还会自动侦测并连接到从库，当然如果失败，可以指定&lt;code&gt;--recursion-method&lt;/code&gt;选项来告诉从库在哪里。它的易用性还体现在，复制若有延迟，在从库 checksum 会暂停直到赶上主库的计算时间点（也通过选项&lt;code&gt;--&lt;/code&gt;设定一个可容忍的延迟最大值，超过这个值也认为不一致）。 &lt;/p&gt;
&lt;p&gt;为了保证主数据库服务的安全，该工具实现了许多保护措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动设置 &lt;code&gt;innodb_lock_wait_timeout&lt;/code&gt; 为1s，避免引起&lt;/li&gt;
&lt;li&gt;默认当数据库有25个以上的并发查询时，&lt;code&gt;pt-table-checksum&lt;/code&gt;会暂停。可以设置 &lt;code&gt;--max-load&lt;/code&gt; 选项来设置这个阀值&lt;/li&gt;
&lt;li&gt;当用 Ctrl+C 停止任务后，工具会正常的完成当前 chunk 检测，下次使用 &lt;code&gt;--resume&lt;/code&gt; 选项启动可以恢复继续下一个 chunk&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;工作过程&quot;&gt;&lt;a href=&quot;#工作过程&quot; class=&quot;headerlink&quot; title=&quot;工作过程&quot;&gt;&lt;/a&gt;工作过程&lt;/h2&gt;&lt;p&gt;直接看 &lt;a href=&quot;http://www.nettedfish.com/blog/2013/06/04/check-replication-consistency-by-pt-table-checksum/&quot;&gt;nettedfish&lt;/a&gt; 的说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 连接到主库：pt工具连接到主库，然后自动发现主库的所有从库。默认采用show full processlist来查找从库，但是这只有在主从实例端口相同的情况下才有效。&lt;br&gt;3. 查找主库或者从库是否有复制过滤规则：这是为了安全而默认检查的选项。你可以关闭这个检查，但是这可能导致checksum的sql语句要么不会同步到从库，要么到了从库发现从库没有要被checksum的表，这都会导致从库同步卡库。&lt;br&gt;5. 开始获取表，一个个的计算。&lt;br&gt;6. 如果是表的第一个chunk，那么chunk-size一般为1000；如果不是表的第一个chunk，那么采用19步中分析出的结果。&lt;br&gt;7. 检查表结构，进行数据类型转换等，生成checksum的sql语句。&lt;br&gt;8. 根据表上的索引和数据的分布，选择最合适的split表的方法。&lt;br&gt;9. 开始checksum表。&lt;br&gt;10. 默认在chunk一个表之前，先删除上次这个表相关的计算结果。除非–resume。&lt;br&gt;14. 根据explain的结果，判断chunk的size是否超过了你定义的chunk-size的上限。如果超过了，为了不影响线上性能，这个chunk将被忽略。&lt;br&gt;15. 把要checksum的行加上for update锁，并计算。&lt;br&gt;17-18. 把计算结果存储到master_crc master_count列中。&lt;br&gt;19. 调整下一个chunk的大小。&lt;br&gt;20. 等待从库追上主库。如果没有延迟备份的从库在运行，最好检查所有的从库，如果发现延迟最大的从库延迟超过max-lag秒，pt工具在这里将暂停。&lt;br&gt;21. 如果发现主库的max-load超过某个阈值，pt工具在这里将暂停。&lt;br&gt;22. 继续下一个chunk，直到这个table被chunk完毕。&lt;br&gt;23-24. 等待从库执行完checksum，便于生成汇总的统计结果。每个表汇总并统计一次。&lt;br&gt;25-26. 循环每个表，直到结束。&lt;br&gt;校验结束后，在每个从库上，执行如下的sql语句即可看到是否有主从不一致发生： &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; percona.checksums &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; master_cnt &amp;lt;&amp;gt; this_cnt &lt;span class=&quot;keyword&quot;&gt;OR&lt;/span&gt; master_crc &amp;lt;&amp;gt; this_crc &lt;span class=&quot;keyword&quot;&gt;OR&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ISNULL&lt;/span&gt;(master_crc) &amp;lt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;ISNULL&lt;/span&gt;(this_crc) \G&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="主从复制" scheme="http://seanlook.com/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
      <category term="percona" scheme="http://seanlook.com/tags/percona/"/>
    
  </entry>
  
  <entry>
    <title>使用 Xtrabackup 在线对MySQL做主从复制</title>
    <link href="http://seanlook.com/2015/12/14/mysql-replicas/"/>
    <id>http://seanlook.com/2015/12/14/mysql-replicas/</id>
    <published>2015-12-14T02:21:25.000Z</published>
    <updated>2015-12-13T16:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><h3 id="1-1-xtrabackup"><a href="#1-1-xtrabackup" class="headerlink" title="1.1 xtrabackup"></a>1.1 xtrabackup</h3><p>mysqldump对于导出10G以下的数据库或几个表，还是适用的，而且更快捷。一旦数据量达到100-500G，无论是对原库的压力还是导出的性能，mysqldump就力不从心了。Percona-Xtrabackup备份工具，是实现MySQL在线热备工作的不二选择，可进行全量、增量、单表备份和还原。（但当数据量更大时，可能需要考虑分库分表，或使用 LVM 快照来加快备份速度了）</p>
<p>2.2版本 xtrabackup 能对InnoDB和XtraDB存储引擎的数据库非阻塞地备份，innobackupex通过perl封装了一层xtrabackup，对MyISAM的备份通过加表读锁的方式实现。2.3版本 xtrabackup 命令直接支持MyISAM引擎。</p>
<p>XtraBackup优势 ：</p>
<ol>
<li>无需停止数据库进行InnoDB热备</li>
<li>增量备份MySQL</li>
<li>流压缩到传输到其它服务器</li>
<li>能比较容易地创建主从同步</li>
<li>备份MySQL时不会增大服务器负载</li>
</ol>
<h3 id="1-2-replication"><a href="#1-2-replication" class="headerlink" title="1.2 replication"></a>1.2 replication</h3><ol>
<li><p><strong>为什么要做主从复制？</strong><br>我想这是要在实施以前要想清楚的问题。是为了实现读写分离，减轻主库负载或数据分析？ 为了数据安全，做备份恢复？主从切换做高可用？<br>大部分场景下，以上三个问号一主一从都能够解决，而且任何生产环境都建议你至少要有一个从库，假如你的读操作压力特别大，甚至要做一主多从，还可以不同的slave扮演不同的角色，例如使用不同的索引，或者不同的存储引擎，或使用一个小内存server做slave只用于备份。（当然slave太多也会对master的负载和网络带宽造成压力，此时可以考虑级联复制，即 A-&gt;B-&gt;C ）</p>
<p> 还有需要考虑的是，一主一从，一旦做了主从切换，不通过其它HA手段干预的话，业务访问的还是原IP，而且原主库很容易就作废了。于是 主-主 复制就产生了，凭借各自不同的 server-id ，可以避免 “A的变化同步到B，B应用变化又同步到A” 这样循环复制的问题。但建议是，主主复制，其中一个主库强制设置为只读，主从切换后架构依然是可用的。</p>
<p> 复制过程是slave主动向master拉取，而不是master去推的，所以理想情况下做搭建主从时不需要master做出任何改变甚至停服，slave失败也不影响主库。</p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p><strong>复制类型</strong></p>
<ul>
<li>基于语句的复制：<code>STATEMENT</code>，在主服务器上执行的SQL语句，在从服务器上执行同样的语句，有可能会由于SQL执行上下文环境不同而是数据不一致，例如调用NOW()函数。MySQL在5.7.7以前默认采用基于语句的复制，在 5.7.7 及以后版本默认改用 row-based。   </li>
<li>基于行的复制：<code>ROW</code>，把改变的内容复制过去，而不是把命令在从服务器上执行一遍。从mysql5.0开始支持，能够严格保证数据完全一致，但此时用<code>mysqlbinlog</code>去分析日志就没啥意义。因为任何一条update语句，都会把涉及到的行数据全部set值，所以binlog文件会比较大。<br>（遇到的一个坑是，迁移时，从库改正了字段默认值定义，但数据在主库更改后，即使产生的新数据默认值是正确的，但基于行的复制依然用不正确的值字段全部更新了）</li>
<li>混合类型的复制: <code>MIXED</code>，默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</li>
</ul>
<p>mysql系统库<code>mysql</code>库里面表的日志记录格式需要说明：在通过如INSERT、UPDATE、DELETE、TRUNCATE等方式直接修改数据的语句，使用<code>binlog_format</code>指定的方式记录，但使用GRANT、ALTER、CREATE、RENAME等改动的mysql库里数据的，会强制使用<code>statement-based</code>方式记录binlog。</p>
<p>可以在线修改二进制日志类型，如<code>SET SESSION binlog_format=MIXED;</code>，需要<code>SUPER</code>权限。</p>
<p> 复制类型还可以分为 异步复制和半同步复制。<br> 通常没说明指的都是异步，即主库执行完Commit后，在主库写入Binlog日志后即可成功返回客户端，无需等等Binlog日志传送给从库，一旦主库宕机，有可能会丢失日志。而半同步复制，是等待其中一个从库也接收到Binlog事务并成功写入Relay Log之后，才返回Commit操作成功给客户端；如此半同步就保证了事务成功提交后至少有两份日志记录，一份在主库Binlog上，另一份在从库的Relay Log上，从而进一步保证数据完整性；半同步复制很大程度取决于主从网络RTT（往返时延），以插件 semisync_master/semisync_slave 形式存在。</p>
</li>
</ol>
<ol>
<li><strong>原理</strong><br>(1) master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）；<br>(2) slave将master的binary log events拷贝到它的中继日志(relay log)；<br>(3) slave重做中继日志中的事件，将改变反映它自己的数据。</li>
</ol>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/mysql-replica-concept.jpg" alt="mysql-replication"></p>
<ul>
<li>该过程的第一部分就是master记录二进制日志。在每个事务更新数据完成之前，master在二进制日志记录这些改变。MySQL将事务串行的写入二进制日志，即使事务中的语句都是交叉执行的。在事件写入二进制日志完成后，master通知存储引擎提交事务。</li>
<li>下一步将master的binary log拷贝到它自己的中继日志。首先，slave开始一个工作线程——I/O线程。I/O线程在master上打开一个普通的连接，请求从指定日志文件的指定位置之后的日志内容，然后开始binlog dump process。Binlog dump process从master的二进制日志中读取事件，如果已经跟上master，它会睡眠并等待master产生新的事件。I/O线程将这些事件写入中继日志。</li>
<li><p>SQL slave thread（SQL从线程）处理该过程的最后一步。SQL线程从中继日志读取事件，并重放其中的事件而更新slave的数据，使其与master中的数据一致。只要该线程与I/O线程保持一致，中继日志通常会位于OS的缓存中，所以中继日志的开销很小。</p>
<p>此外，在master中也有一个工作线程：和其它MySQL的连接一样，slave在master中打开一个连接也会使得master开始一个线程。复制过程有一个很重要的限制——复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。</p>
</li>
</ul>
<p>补充:</p>
<ul>
<li>mysql 5.7开始加入了多源复制，这个特性对同时有很多个mysql实例是很有用的，阿里云RDS（迁移）实现了类似的方式。</li>
<li>从MySQL 5.6.2开始，mysql binlog支持checksum校验，并且5.6.6默认启用（CRC32），这对自己模拟实现mysql复制的场景有影响。</li>
</ul>
<p><strong>下面开始配置主从</strong>：</p>
<p>　　主从版本一致—&gt;主库授权复制帐号—&gt;确保开启binlog及主从server_id唯一—&gt;xtrabackup恢复到从库—&gt;记录xtrabackup_binlog_info中binlog名称及偏移量—&gt;从库change master to —&gt;slave start—&gt;检查两个yes</p>
<h2 id="2-创建复制账号"><a href="#2-创建复制账号" class="headerlink" title="2. 创建复制账号"></a>2. 创建复制账号</h2><p>在主库上</p>
<pre><code>mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;slave_ali&apos;@&apos;192.168.5.%&apos; IDENTIFIED BY &apos;slave_ali_pass&apos;;  
mysql&gt; FLUSH PRIVILEGES;
</code></pre><h2 id="3-使用Percona-Xtrabackup恢复数据"><a href="#3-使用Percona-Xtrabackup恢复数据" class="headerlink" title="3. 使用Percona-Xtrabackup恢复数据"></a>3. 使用Percona-Xtrabackup恢复数据</h2><p>这里假设比较简单的情况：全量备份，全量恢复，不涉及增量。</p>
<p>安装和具体使用，见<a href="">文章</a>。</p>
<p>赋予备份用户权限：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; <span class="keyword">CREATE</span> USER <span class="string">'bkpuser'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'bkppass'</span>;</div><div class="line">mysql&gt; GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT,PROCESS,SUPER <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'bkpuser'</span>@<span class="string">'localhost'</span>;</div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div></pre></td></tr></table></figure></p>
<p>完整的选项使用请执行innobackupex –-help，这里只介绍使用常用的选项进行完整备份及增量备份和还原。</p>
<p>这一节是把数据恢复到从库，借此记录一下xtrabackup的使用（用了云之后，备份技能都丢了~）。生产环境你应该是早就有了xtrabackup的备份，做从库时只需要把备份拷过来，解压恢复。</p>
<p>假设 MySQL 安装目录在<code>/opt/mysql</code>，my.cnf配置文件<code>/opt/mysql/my.cnf</code>，端口3306，数据目录<code>/opt/mysql_data</code>，sock位于<code>/opt/mysql_data/mysql.sock</code>。备份数据放在<code>/data/backup/mysql/</code>。</p>
<h3 id="3-1-全量备份"><a href="#3-1-全量备份" class="headerlink" title="3.1 全量备份"></a>3.1 全量备份</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="string">export </span><span class="string">BKP_PASS=</span><span class="string">"bkppass"</span></div><div class="line">$ <span class="string">innobackupex </span><span class="built_in">--defaults-file=/opt/mysql/my.cnf</span> <span class="built_in">--host=localhost</span> <span class="built_in">--port=3306</span> <span class="built_in">--user=bkpuser</span> <span class="built_in">--password=$&#123;BKP_PASS&#125;</span> /<span class="string">data/</span><span class="string">backup/</span><span class="string">mysql</span></div></pre></td></tr></table></figure>
<p>默认会以当天 日期+时间 戳命名备份目录，如 2015-09-16_00-00-02。一般会对它进行tar压缩，由于tar只能单进程，所以往往这个压缩过程会比备份过程耗时2倍还多。拷贝到需要恢复（做从库）的目录。</p>
<pre><code>如果手头有一份未压缩的全备数据，要在另一台恢复，其实还不如直接 rsync 过来，将近400G的数据压缩与解压缩过程特别漫长。
</code></pre><h3 id="3-2-全量恢复"><a href="#3-2-全量恢复" class="headerlink" title="3.2 全量恢复"></a>3.2 全量恢复</h3><p>在恢复的数据库服务器（从库）上：</p>
<pre><code><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">恢复准备</div><div class="line">$ innobackupex --use-memory=<span class="number">16</span>G --apply-log <span class="number">2015</span><span class="number">-09</span><span class="number">-16</span>_00<span class="number">-00</span><span class="number">-02</span></div><div class="line"></div><div class="line">确认数据库是关闭的，并且datadir，目录下为空</div><div class="line">$ innobackupex --defaults-file=/opt/mysql/my.cnf --use-memory=<span class="number">16</span>G --copy-back <span class="number">2015</span><span class="number">-09</span><span class="number">-16</span>_00<span class="number">-00</span><span class="number">-02</span></div></pre></td></tr></table></figure>

第一步是恢复准备，apply-log应用全备时 log sequence number 之后的数据，完了后会输出类似 InnoDB: Last MySQL binlog file position 0 262484673, file name ./mysql-bin.000135 的信息，告诉我们了后面的从库应该从哪个地方开始复制。时间不会很长，但最好用screen之类的软件放到后台执行，以免终端断开，功亏一篑。

第二步使用新的my.cnf文件，将完整的mysql数据文件拷贝到datadir下。
</code></pre><h2 id="4-做从库"><a href="#4-做从库" class="headerlink" title="4. 做从库"></a>4. 做从库</h2><p>上面恢复过程最后一步<code>apply-log</code>完成之后，会得到一个lsn position 和binlog文件名：262484673、mysql-bin.000135。下面开始从库制作。</p>
<p>一般在<code>copy-back</code>之后需要修改数据文件目录的属性：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chown -R mysql.mysql /opt/mysql_data</span></div></pre></td></tr></table></figure></p>
<h3 id="4-1-my-cnf"><a href="#4-1-my-cnf" class="headerlink" title="4.1 my.cnf"></a>4.1 my.cnf</h3><p>从库的配置文件简单一点可以从主库拷贝过来，但根据需要，要注意以下几处</p>
<ul>
<li><p>server-id一定不能与主库相同<br>否则，会出现如下错误：<br>Slave: received end packet FROM server, apparent master shutdown</p>
</li>
<li><p>从库一般作为只读库使用，所以为安全起见，设置只读 <code>set global read_only=1</code>;<br>可以在从服务器的 my.cnf 里加入<code>read-only</code>参数来实现这一点，唯一需要注意的一点事read-only仅对没有super权限的用户有效。所以最好核对一下连接从服务器的用户，确保其没有super权限。</p>
</li>
<li><p>关于从库的事件<br>MYSQL Replication 可以很好的达到你的预期：从库的事件不会自己去执行，主库会把event执行的结果直接同步。在statement模式下，复制的是 event BODY 里的SQL，在row模式下是主库事件执行完成后影响的行精确复制。</p>
<p>  从库 event_scheduler 参数是被忽略的，并且每个event 状态会是 SLAVESIDE_DISABLED ，但CREATE/ALTER EVENT等操作语句是会复制。主从切换后，从库事件状态会变成ENABLE。</p>
</li>
<li><p>参数调整<br>从库是不允许写入的，否则数据就不一致了。从库实例的配置可以不要主库那么高，比如原16G的buffer pool，根据用途，从库可以设到4-8G（当时前提是将来你也不打算把它切换为主库用）。<br>相应的，read_buffer_size，sort_buffer_size, query_cache_size 这些读相关参数可以略微增大。当然我一般都懒得去改。</p>
</li>
<li><p>skip-slave-start<br>主从创建完成后，默认情况下次启动从库，会自动启动复制进程，一般这也正是我们需要的，但在维护阶段时你可能不想从库启动后立即开始复制，<code>--skip-slave-start</code>选项可以帮到你。</p>
</li>
<li><p>log-slave-updates<br>正常情况从库是不需要写回放日志产生的binlog，无形中增加服务器压力。但如果你想要实现级联复制即 <code>A -&gt; B -&gt; C</code> ，B同时是A的从库，也是C的主库，就需要开启 log-bin 和 log-slave-updates 。</p>
<p>  另外，建议显示设置 <code>log-bin=mysql-bin</code> 确保主从正常切换。 <code>show variables like &#39;log%&#39;</code> 查看当前值。</p>
</li>
<li><p>关于过滤表见<a href="">mysql-replica-filter</a></p>
</li>
<li><p>sync_binlog<br>For the greatest possible durability and consistency in a replication setup using InnoDB with transactions, you should use innodb_flush_log_at_trx_commit=1 and sync_binlog=1 in the master my.cnf file.</p>
<p>  上面的话同时也意味着性能最低。可以在这埋点，假如出现慢的情况，把两参数调成2。</p>
</li>
</ul>
<h3 id="4-2-启动从库"><a href="#4-2-启动从库" class="headerlink" title="4.2 启动从库"></a>4.2 启动从库</h3><p>启动数据库，注意看日志<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="regexp">/opt/my</span>sql<span class="regexp">/bin/my</span>sqld_safe --defaults-<span class="keyword">file</span>=<span class="regexp">/opt/my</span>sql<span class="regexp">/my.cnf &amp;</span></div></pre></td></tr></table></figure></p>
<p>提示：如果你不确定这个库是谁的从库，保守起见加上<code>--skip-slave-start</code>启动，兴许能防止数据不一致。</p>
<h3 id="4-3-change-master"><a href="#4-3-change-master" class="headerlink" title="4.3 change master"></a>4.3 change master</h3><p>在从库上</p>
<pre><code>$ mysql -uslave_ali -p&apos;slave_ali_pass&apos; -S /opt/mysql_data/mysql.sock
mysql&gt; change master to master_host=MASTER_HOST, master_port=3306, 
       master_user=&apos;slave_ali&apos;,master_password=&apos;slave_ali_pass&apos;,
       master_log_file=&apos;mysql-bin.000135&apos;, master_log_pos=262484673;
</code></pre><p>上面的 master_log_file 和 master_log_pos 即是输出的值，也可以在新的数据目录下<code>xtrabackup_binlog_info</code>找到信息。</p>
<pre><code>mysql&gt; show slave status\G
mysql&gt; start slave;
mysql&gt; show slave status\G
</code></pre><h3 id="4-4-验证同步延迟"><a href="#4-4-验证同步延迟" class="headerlink" title="4.4 验证同步延迟"></a>4.4 验证同步延迟</h3><p>从库执行 show slave status\G<br>节选：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">      Slave_IO_State:</span> Waiting for master to send event</div><div class="line"><span class="attr">      Master_Log_File:</span> mysql-bin<span class="number">.000004</span></div><div class="line"><span class="attr">  Read_Master_Log_Pos:</span> <span class="number">931</span></div><div class="line"><span class="attr">       Relay_Log_File:</span> slave1-relay-bin<span class="number">.000056</span></div><div class="line"><span class="attr">        Relay_Log_Pos:</span> <span class="number">950</span></div><div class="line"><span class="attr">Relay_Master_Log_File:</span> mysql-bin<span class="number">.000004</span></div><div class="line"><span class="attr">     Slave_IO_Running:</span> <span class="literal">Yes</span></div><div class="line"><span class="attr">    Slave_SQL_Running:</span> <span class="literal">Yes</span></div><div class="line"><span class="attr">   Exec_Master_Log_Pos:</span> <span class="number">931</span></div><div class="line"><span class="attr">      Relay_Log_Space:</span> <span class="number">408</span></div><div class="line"><span class="attr">Seconds_Behind_Master:</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>Master_Log_File</code>： I/O线程当前正在读取的主服务器二进制日志文件的名称</li>
<li><code>Read_Master_Log_Pos</code>：本机I/O线程读取主服务器二进制日志位置<br>上面2各值，与在主库执行<code>show master status;</code>看到的值如果基本接近，说明从库<em>IO线程</em>已经赶上了主库的binlog。</li>
<li><code>Relay_Master_Log_File</code>: 由SQL线程执行的包含多数近期事件的主服务器二进制日志文件的名称</li>
<li><p><code>Exec_Master_Log_Pos</code>: SQL线程执行来自master的二进制日志最后一个事件位置<br>与上面的<code>Relay_Master_Log_File</code>一起，同<code>Master_Log_File</code>、<code>Read_Master_Log_Pos</code>比较，能看到<em>SQL线程</em>是否已经赶上从库本地的IO线程。</p>
</li>
<li><p><code>Slave_IO_Running</code>：I/O线程是否启动并成功连接到主服务器上<br>一般和下面的<code>Slave_IO_Running</code>和<code>Seconds_Behind_Master</code>一起监控主从健康状态</p>
</li>
<li><code>Slave_SQL_Running</code>：SQL线程是否启动</li>
<li><code>Seconds_Behind_Master</code>: 从属服务器“落后”多少秒<br>官网的解释是：The number of seconds that the slave SQL thread is behind processing the master binary log。但是当 SBM 为 0 时也不代表一定没有延迟，因为可能因为网络慢的缘故，从库的IO线程传输binlog太慢，它的SQL线程应用日志很容易就赶上relay log，但实际主库产生的binlog比传输的快，就会造成为0的假象。<br>有时你反复status会发现 Seconds_Behind_Master 的值在0与一个很大的数之间波动，有可能是主库上执行了一个非常大的event，没执行完毕的时候从库SBM显示为0，event执行完成并传输完binlog后，就会显示SBM非常巨大。（我在从机房迁移mysql到阿里云上部分库老出现这种情况，应该跟网络和大event都有关系）。<br>另外，relay log 中event记录的时间戳是主库上的时间戳，而SQL thread的时间戳是从库上的，如果主库和从库的时间偏差较大，那么这个SBM的意义就基本不存在了。</li>
</ul>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul>
<li><a href="http://blog.csdn.net/hguisu/article/details/7325124" target="_blank" rel="external">高性能Mysql主从架构的复制原理及配置详解</a></li>
<li><a href="https://www.percona.com/blog/2013/01/09/how-does-mysql-replication-really-work/" target="_blank" rel="external">How does MySQL Replication really work?</a></li>
<li><a href="https://segmentfault.com/a/1190000003063874" target="_blank" rel="external">XtraBackup不停机不锁表搭建MySQL主从同步实践</a></li>
<li><a href="http://www.simlinux.com/archives/236.html" target="_blank" rel="external">MySQL复制原理与配置</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/replication-administration-status.html" target="_blank" rel="external">许多模糊的内容还是看官网的</a></li>
</ul>
<hr>
<p>本文链接地址：<a href="http://seanlook.com/2015/12/14/mysql-replicas/">http://seanlook.com/2015/12/14/mysql-replicas/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-说明&quot;&gt;&lt;a href=&quot;#1-说明&quot; class=&quot;headerlink&quot; title=&quot;1. 说明&quot;&gt;&lt;/a&gt;1. 说明&lt;/h2&gt;&lt;h3 id=&quot;1-1-xtrabackup&quot;&gt;&lt;a href=&quot;#1-1-xtrabackup&quot; class=&quot;headerlink&quot; title=&quot;1.1 xtrabackup&quot;&gt;&lt;/a&gt;1.1 xtrabackup&lt;/h3&gt;&lt;p&gt;mysqldump对于导出10G以下的数据库或几个表，还是适用的，而且更快捷。一旦数据量达到100-500G，无论是对原库的压力还是导出的性能，mysqldump就力不从心了。Percona-Xtrabackup备份工具，是实现MySQL在线热备工作的不二选择，可进行全量、增量、单表备份和还原。（但当数据量更大时，可能需要考虑分库分表，或使用 LVM 快照来加快备份速度了）&lt;/p&gt;
&lt;p&gt;2.2版本 xtrabackup 能对InnoDB和XtraDB存储引擎的数据库非阻塞地备份，innobackupex通过perl封装了一层xtrabackup，对MyISAM的备份通过加表读锁的方式实现。2.3版本 xtrabackup 命令直接支持MyISAM引擎。&lt;/p&gt;
&lt;p&gt;XtraBackup优势 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无需停止数据库进行InnoDB热备&lt;/li&gt;
&lt;li&gt;增量备份MySQL&lt;/li&gt;
&lt;li&gt;流压缩到传输到其它服务器&lt;/li&gt;
&lt;li&gt;能比较容易地创建主从同步&lt;/li&gt;
&lt;li&gt;备份MySQL时不会增大服务器负载&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-2-replication&quot;&gt;&lt;a href=&quot;#1-2-replication&quot; class=&quot;headerlink&quot; title=&quot;1.2 replication&quot;&gt;&lt;/a&gt;1.2 replication&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;为什么要做主从复制？&lt;/strong&gt;&lt;br&gt;我想这是要在实施以前要想清楚的问题。是为了实现读写分离，减轻主库负载或数据分析？ 为了数据安全，做备份恢复？主从切换做高可用？&lt;br&gt;大部分场景下，以上三个问号一主一从都能够解决，而且任何生产环境都建议你至少要有一个从库，假如你的读操作压力特别大，甚至要做一主多从，还可以不同的slave扮演不同的角色，例如使用不同的索引，或者不同的存储引擎，或使用一个小内存server做slave只用于备份。（当然slave太多也会对master的负载和网络带宽造成压力，此时可以考虑级联复制，即 A-&amp;gt;B-&amp;gt;C ）&lt;/p&gt;
&lt;p&gt; 还有需要考虑的是，一主一从，一旦做了主从切换，不通过其它HA手段干预的话，业务访问的还是原IP，而且原主库很容易就作废了。于是 主-主 复制就产生了，凭借各自不同的 server-id ，可以避免 “A的变化同步到B，B应用变化又同步到A” 这样循环复制的问题。但建议是，主主复制，其中一个主库强制设置为只读，主从切换后架构依然是可用的。&lt;/p&gt;
&lt;p&gt; 复制过程是slave主动向master拉取，而不是master去推的，所以理想情况下做搭建主从时不需要master做出任何改变甚至停服，slave失败也不影响主库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://seanlook.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://seanlook.com/tags/mysql/"/>
    
      <category term="主从复制" scheme="http://seanlook.com/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
      <category term="备份" scheme="http://seanlook.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>南山南</title>
    <link href="http://seanlook.com/2015/11/01/nan-shan-hike/"/>
    <id>http://seanlook.com/2015/11/01/nan-shan-hike/</id>
    <published>2015-11-01T03:59:31.000Z</published>
    <updated>2015-11-01T03:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天11月1号，深圳的天气正好从这一天凉了起来，傍晚回住处的公交车上给家里打了个电话，是爸爸接的，说家里已经有点冷了。</p>
<p>现在对冷没什么概念了，深圳是一个没有冬天的城市，一件外套就能过冬。也就是今天起风了出门才稍稍感觉到凉，昨天还热的不行呢——那是因为去爬山了。</p>
<p>南山，2年前来这里的第一个月就听说过，但两次上过梧桐山，上半年爬过凤凰山，就偏偏离自己最近的南山未曾到访。山虽然不高，但一直放着不去还能再找到人陪我去不成，于是就响应党组织号召，登山去。</p>
<p>周六下午，小明从公司过去，而我从家里坐公交过去，照计划的时间应该2点半可以集合，无奈在深大转车多等了20分钟，结果是小明跟其他人一起先从海关登山口上山，先到山顶者有奖，我晚十分钟到出发点，去追他们。出乎意料，迈进登山口就一直上台阶，上啊上啊上，T恤已经全湿了，我竟然还穿着紧身牛仔裤！（其实主要考虑到晚上吃饭方便）。由于平时也打打球，体力不算太差，20分钟上到了全程海拔一半的样子，还没追上，双腿力量也下降了，正好碰到没跟上大部队的两个人，就一起走了。后半程坡也小了很多，吹来一丝微风能感觉到背上一阵凉意。此时群里已经有人到观景台发图了，但奇怪的是那么一大波上去怎么才有2个人发图，原来拼的不仅仅是体力，还有手机信号……</p>
<p>三点半时基本上都到顶了，风景还不错，能看到深圳湾大桥（据说晚上很美），和对面的香港。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nan-hilltop.jpg" alt="nan-hilltop.jpg"></p>
<p>团体里大部分我是认识的，有我以前的同事，和球场上认识的伙伴。虽然我已离职近4个月，但我党组织关系还在TP，也交了党费，这才有机会和他们一起出来。还有经费，号召大家买书，于是买了《摄影的艺术》《皮囊》等，小明也为他单反买了本，我看中的是他那本室内装饰和川菜食谱，嘿嘿。</p>
<a id="more"></a>
<p>爬完山当然还有活动，自助餐——不是平时想象的哪种自助餐。蛇口是富人区，自助的当然是海鲜之类的，与大饱口福和四海一家有点像，除了种类没有后面两家多，味道和环境都还不错，感受一下。</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nan-food.jpg" alt="nan-food.jpg"></p>
<p>原本以为5点半开吃，顶多2小时回去了（因为人多而且还有些不熟的），结果听说海上世界就在附近，反正刚刚为了吃回本，肚子都撑了，就走着去了。哦，想起原来当天是万圣节，可不热闹了。</p>
<p>常去的南山腐败地，一个海岸城，一个欢乐海岸，怎么能漏了海上世界，也是早有听说却没来过。一路望去，好多歪果仁，而且装扮忒吓人。海上世界最中心有一艘“船”叫明华号，当然甲板上开着各种餐厅。无意听到人说8点整有水秀表演，几个大男人在一顿狂拍后，终于等来了 water show 。短短的三分钟！</p>
<p><img src="http://7q5fot.com1.z0.glb.clouddn.com/nan-show.jpg" alt="nan-show.jpg"></p>
<p>周六算是疯了一天，周日计划还是学点东西，上午9点起来看了看puppet视频，下午去公司简单加了个班。上周经理不在，杂事一大堆，也是身不由己，也是欠了很多技术债。</p>
<p>最后，晚上做了顿饭，忙活2个小时——可是三个人的两顿饭菜啊，不过挺有成就感的，因为吃完了……</p>
<hr>
<p>11月，你好！</p>
<hr>
<p>本文链接地址： <a href="http://seanlook.com/2015/11/01/nan-shan-hike/">http://seanlook.com/2015/11/01/nan-shan-hike/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天11月1号，深圳的天气正好从这一天凉了起来，傍晚回住处的公交车上给家里打了个电话，是爸爸接的，说家里已经有点冷了。&lt;/p&gt;
&lt;p&gt;现在对冷没什么概念了，深圳是一个没有冬天的城市，一件外套就能过冬。也就是今天起风了出门才稍稍感觉到凉，昨天还热的不行呢——那是因为去爬山了。&lt;/p&gt;
&lt;p&gt;南山，2年前来这里的第一个月就听说过，但两次上过梧桐山，上半年爬过凤凰山，就偏偏离自己最近的南山未曾到访。山虽然不高，但一直放着不去还能再找到人陪我去不成，于是就响应党组织号召，登山去。&lt;/p&gt;
&lt;p&gt;周六下午，小明从公司过去，而我从家里坐公交过去，照计划的时间应该2点半可以集合，无奈在深大转车多等了20分钟，结果是小明跟其他人一起先从海关登山口上山，先到山顶者有奖，我晚十分钟到出发点，去追他们。出乎意料，迈进登山口就一直上台阶，上啊上啊上，T恤已经全湿了，我竟然还穿着紧身牛仔裤！（其实主要考虑到晚上吃饭方便）。由于平时也打打球，体力不算太差，20分钟上到了全程海拔一半的样子，还没追上，双腿力量也下降了，正好碰到没跟上大部队的两个人，就一起走了。后半程坡也小了很多，吹来一丝微风能感觉到背上一阵凉意。此时群里已经有人到观景台发图了，但奇怪的是那么一大波上去怎么才有2个人发图，原来拼的不仅仅是体力，还有手机信号……&lt;/p&gt;
&lt;p&gt;三点半时基本上都到顶了，风景还不错，能看到深圳湾大桥（据说晚上很美），和对面的香港。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7q5fot.com1.z0.glb.clouddn.com/nan-hilltop.jpg&quot; alt=&quot;nan-hilltop.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;团体里大部分我是认识的，有我以前的同事，和球场上认识的伙伴。虽然我已离职近4个月，但我党组织关系还在TP，也交了党费，这才有机会和他们一起出来。还有经费，号召大家买书，于是买了《摄影的艺术》《皮囊》等，小明也为他单反买了本，我看中的是他那本室内装饰和川菜食谱，嘿嘿。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://seanlook.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随记" scheme="http://seanlook.com/categories/%E7%94%9F%E6%B4%BB/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="生活" scheme="http://seanlook.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
